
PreCharge_CabinLights_Buzzer_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008bf0  08008bf0  00018bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800907c  0800907c  0002032c  2**0
                  CONTENTS
  4 .ARM          00000000  0800907c  0800907c  0002032c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800907c  0800907c  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800907c  0800907c  0001907c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08009084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  2000032c  080093b0  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  080093b0  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b1d  00000000  00000000  00020397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001649  00000000  00000000  00028eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000637  00000000  00000000  0002ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cf2  00000000  00000000  0002b357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ec8  00000000  00000000  00045049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092add  00000000  00000000  0004ef11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002eb8  00000000  00000000  000e19f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  000e48a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000032c 	.word	0x2000032c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008bd4 	.word	0x08008bd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000330 	.word	0x20000330
 8000104:	08008bd4 	.word	0x08008bd4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcdf 	bl	8001e00 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc2f 	bl	8001cb0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcd1 	bl	8001e00 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fcc7 	bl	8001e00 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc57 	bl	8001d34 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc4d 	bl	8001d34 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb59 	bl	8000b68 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fae5 	bl	8000a90 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb4b 	bl	8000b68 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb41 	bl	8000b68 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faf1 	bl	8000adc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae7 	bl	8000adc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fadd>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	4647      	mov	r7, r8
 8000520:	46ce      	mov	lr, r9
 8000522:	024a      	lsls	r2, r1, #9
 8000524:	0243      	lsls	r3, r0, #9
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	0fc4      	lsrs	r4, r0, #31
 800052a:	0a50      	lsrs	r0, r2, #9
 800052c:	4680      	mov	r8, r0
 800052e:	0048      	lsls	r0, r1, #1
 8000530:	0a5b      	lsrs	r3, r3, #9
 8000532:	0e00      	lsrs	r0, r0, #24
 8000534:	0992      	lsrs	r2, r2, #6
 8000536:	4694      	mov	ip, r2
 8000538:	b580      	push	{r7, lr}
 800053a:	001e      	movs	r6, r3
 800053c:	4681      	mov	r9, r0
 800053e:	0002      	movs	r2, r0
 8000540:	0e2d      	lsrs	r5, r5, #24
 8000542:	00df      	lsls	r7, r3, #3
 8000544:	0fc9      	lsrs	r1, r1, #31
 8000546:	428c      	cmp	r4, r1
 8000548:	d024      	beq.n	8000594 <__aeabi_fadd+0x78>
 800054a:	1a28      	subs	r0, r5, r0
 800054c:	2800      	cmp	r0, #0
 800054e:	dd0e      	ble.n	800056e <__aeabi_fadd+0x52>
 8000550:	2a00      	cmp	r2, #0
 8000552:	d13e      	bne.n	80005d2 <__aeabi_fadd+0xb6>
 8000554:	4662      	mov	r2, ip
 8000556:	2a00      	cmp	r2, #0
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x40>
 800055a:	e0fd      	b.n	8000758 <__aeabi_fadd+0x23c>
 800055c:	1e42      	subs	r2, r0, #1
 800055e:	2801      	cmp	r0, #1
 8000560:	d100      	bne.n	8000564 <__aeabi_fadd+0x48>
 8000562:	e137      	b.n	80007d4 <__aeabi_fadd+0x2b8>
 8000564:	28ff      	cmp	r0, #255	; 0xff
 8000566:	d100      	bne.n	800056a <__aeabi_fadd+0x4e>
 8000568:	e0a9      	b.n	80006be <__aeabi_fadd+0x1a2>
 800056a:	0010      	movs	r0, r2
 800056c:	e039      	b.n	80005e2 <__aeabi_fadd+0xc6>
 800056e:	2800      	cmp	r0, #0
 8000570:	d063      	beq.n	800063a <__aeabi_fadd+0x11e>
 8000572:	464b      	mov	r3, r9
 8000574:	1b52      	subs	r2, r2, r5
 8000576:	2d00      	cmp	r5, #0
 8000578:	d000      	beq.n	800057c <__aeabi_fadd+0x60>
 800057a:	e0e0      	b.n	800073e <__aeabi_fadd+0x222>
 800057c:	2f00      	cmp	r7, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x66>
 8000580:	e0ce      	b.n	8000720 <__aeabi_fadd+0x204>
 8000582:	1e53      	subs	r3, r2, #1
 8000584:	2a01      	cmp	r2, #1
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x6e>
 8000588:	e155      	b.n	8000836 <__aeabi_fadd+0x31a>
 800058a:	2aff      	cmp	r2, #255	; 0xff
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x74>
 800058e:	e094      	b.n	80006ba <__aeabi_fadd+0x19e>
 8000590:	001a      	movs	r2, r3
 8000592:	e0d9      	b.n	8000748 <__aeabi_fadd+0x22c>
 8000594:	1a2a      	subs	r2, r5, r0
 8000596:	2a00      	cmp	r2, #0
 8000598:	dc00      	bgt.n	800059c <__aeabi_fadd+0x80>
 800059a:	e099      	b.n	80006d0 <__aeabi_fadd+0x1b4>
 800059c:	2800      	cmp	r0, #0
 800059e:	d062      	beq.n	8000666 <__aeabi_fadd+0x14a>
 80005a0:	2dff      	cmp	r5, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x8a>
 80005a4:	e08b      	b.n	80006be <__aeabi_fadd+0x1a2>
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	4661      	mov	r1, ip
 80005aa:	04db      	lsls	r3, r3, #19
 80005ac:	4319      	orrs	r1, r3
 80005ae:	468c      	mov	ip, r1
 80005b0:	2a1b      	cmp	r2, #27
 80005b2:	dc00      	bgt.n	80005b6 <__aeabi_fadd+0x9a>
 80005b4:	e0d2      	b.n	800075c <__aeabi_fadd+0x240>
 80005b6:	2301      	movs	r3, #1
 80005b8:	19db      	adds	r3, r3, r7
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	d56a      	bpl.n	8000694 <__aeabi_fadd+0x178>
 80005be:	3501      	adds	r5, #1
 80005c0:	2dff      	cmp	r5, #255	; 0xff
 80005c2:	d05b      	beq.n	800067c <__aeabi_fadd+0x160>
 80005c4:	2201      	movs	r2, #1
 80005c6:	49a3      	ldr	r1, [pc, #652]	; (8000854 <__aeabi_fadd+0x338>)
 80005c8:	401a      	ands	r2, r3
 80005ca:	085b      	lsrs	r3, r3, #1
 80005cc:	400b      	ands	r3, r1
 80005ce:	4313      	orrs	r3, r2
 80005d0:	e01c      	b.n	800060c <__aeabi_fadd+0xf0>
 80005d2:	2dff      	cmp	r5, #255	; 0xff
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0xbc>
 80005d6:	e072      	b.n	80006be <__aeabi_fadd+0x1a2>
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	4662      	mov	r2, ip
 80005dc:	04db      	lsls	r3, r3, #19
 80005de:	431a      	orrs	r2, r3
 80005e0:	4694      	mov	ip, r2
 80005e2:	281b      	cmp	r0, #27
 80005e4:	dc00      	bgt.n	80005e8 <__aeabi_fadd+0xcc>
 80005e6:	e090      	b.n	800070a <__aeabi_fadd+0x1ee>
 80005e8:	2301      	movs	r3, #1
 80005ea:	1afb      	subs	r3, r7, r3
 80005ec:	015a      	lsls	r2, r3, #5
 80005ee:	d551      	bpl.n	8000694 <__aeabi_fadd+0x178>
 80005f0:	019b      	lsls	r3, r3, #6
 80005f2:	099e      	lsrs	r6, r3, #6
 80005f4:	0030      	movs	r0, r6
 80005f6:	f002 fc23 	bl	8002e40 <__clzsi2>
 80005fa:	0033      	movs	r3, r6
 80005fc:	3805      	subs	r0, #5
 80005fe:	4083      	lsls	r3, r0
 8000600:	4285      	cmp	r5, r0
 8000602:	dc00      	bgt.n	8000606 <__aeabi_fadd+0xea>
 8000604:	e075      	b.n	80006f2 <__aeabi_fadd+0x1d6>
 8000606:	4a94      	ldr	r2, [pc, #592]	; (8000858 <__aeabi_fadd+0x33c>)
 8000608:	1a2d      	subs	r5, r5, r0
 800060a:	4013      	ands	r3, r2
 800060c:	075a      	lsls	r2, r3, #29
 800060e:	d004      	beq.n	800061a <__aeabi_fadd+0xfe>
 8000610:	220f      	movs	r2, #15
 8000612:	401a      	ands	r2, r3
 8000614:	2a04      	cmp	r2, #4
 8000616:	d000      	beq.n	800061a <__aeabi_fadd+0xfe>
 8000618:	3304      	adds	r3, #4
 800061a:	015a      	lsls	r2, r3, #5
 800061c:	d53c      	bpl.n	8000698 <__aeabi_fadd+0x17c>
 800061e:	1c68      	adds	r0, r5, #1
 8000620:	2dfe      	cmp	r5, #254	; 0xfe
 8000622:	d02b      	beq.n	800067c <__aeabi_fadd+0x160>
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	0a5e      	lsrs	r6, r3, #9
 8000628:	b2c0      	uxtb	r0, r0
 800062a:	05c0      	lsls	r0, r0, #23
 800062c:	4330      	orrs	r0, r6
 800062e:	07e4      	lsls	r4, r4, #31
 8000630:	4320      	orrs	r0, r4
 8000632:	bcc0      	pop	{r6, r7}
 8000634:	46b9      	mov	r9, r7
 8000636:	46b0      	mov	r8, r6
 8000638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800063a:	20fe      	movs	r0, #254	; 0xfe
 800063c:	1c6a      	adds	r2, r5, #1
 800063e:	4210      	tst	r0, r2
 8000640:	d172      	bne.n	8000728 <__aeabi_fadd+0x20c>
 8000642:	2d00      	cmp	r5, #0
 8000644:	d000      	beq.n	8000648 <__aeabi_fadd+0x12c>
 8000646:	e0ae      	b.n	80007a6 <__aeabi_fadd+0x28a>
 8000648:	2f00      	cmp	r7, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x132>
 800064c:	e0ec      	b.n	8000828 <__aeabi_fadd+0x30c>
 800064e:	4663      	mov	r3, ip
 8000650:	2000      	movs	r0, #0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0e9      	beq.n	800062a <__aeabi_fadd+0x10e>
 8000656:	1afb      	subs	r3, r7, r3
 8000658:	015a      	lsls	r2, r3, #5
 800065a:	d400      	bmi.n	800065e <__aeabi_fadd+0x142>
 800065c:	e0f3      	b.n	8000846 <__aeabi_fadd+0x32a>
 800065e:	4663      	mov	r3, ip
 8000660:	000c      	movs	r4, r1
 8000662:	1bdb      	subs	r3, r3, r7
 8000664:	e7d2      	b.n	800060c <__aeabi_fadd+0xf0>
 8000666:	4661      	mov	r1, ip
 8000668:	2900      	cmp	r1, #0
 800066a:	d05b      	beq.n	8000724 <__aeabi_fadd+0x208>
 800066c:	1e51      	subs	r1, r2, #1
 800066e:	2a01      	cmp	r2, #1
 8000670:	d100      	bne.n	8000674 <__aeabi_fadd+0x158>
 8000672:	e0a7      	b.n	80007c4 <__aeabi_fadd+0x2a8>
 8000674:	2aff      	cmp	r2, #255	; 0xff
 8000676:	d022      	beq.n	80006be <__aeabi_fadd+0x1a2>
 8000678:	000a      	movs	r2, r1
 800067a:	e799      	b.n	80005b0 <__aeabi_fadd+0x94>
 800067c:	20ff      	movs	r0, #255	; 0xff
 800067e:	2600      	movs	r6, #0
 8000680:	e7d3      	b.n	800062a <__aeabi_fadd+0x10e>
 8000682:	21fe      	movs	r1, #254	; 0xfe
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	4211      	tst	r1, r2
 8000688:	d073      	beq.n	8000772 <__aeabi_fadd+0x256>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d0f6      	beq.n	800067c <__aeabi_fadd+0x160>
 800068e:	0015      	movs	r5, r2
 8000690:	4467      	add	r7, ip
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	075a      	lsls	r2, r3, #29
 8000696:	d1bb      	bne.n	8000610 <__aeabi_fadd+0xf4>
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	2dff      	cmp	r5, #255	; 0xff
 800069c:	d00f      	beq.n	80006be <__aeabi_fadd+0x1a2>
 800069e:	025b      	lsls	r3, r3, #9
 80006a0:	0a5e      	lsrs	r6, r3, #9
 80006a2:	b2e8      	uxtb	r0, r5
 80006a4:	e7c1      	b.n	800062a <__aeabi_fadd+0x10e>
 80006a6:	4662      	mov	r2, ip
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d008      	beq.n	80006be <__aeabi_fadd+0x1a2>
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	03d2      	lsls	r2, r2, #15
 80006b0:	4213      	tst	r3, r2
 80006b2:	d004      	beq.n	80006be <__aeabi_fadd+0x1a2>
 80006b4:	4640      	mov	r0, r8
 80006b6:	4210      	tst	r0, r2
 80006b8:	d101      	bne.n	80006be <__aeabi_fadd+0x1a2>
 80006ba:	000c      	movs	r4, r1
 80006bc:	4643      	mov	r3, r8
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0dc      	beq.n	800067c <__aeabi_fadd+0x160>
 80006c2:	2680      	movs	r6, #128	; 0x80
 80006c4:	03f6      	lsls	r6, r6, #15
 80006c6:	431e      	orrs	r6, r3
 80006c8:	0276      	lsls	r6, r6, #9
 80006ca:	20ff      	movs	r0, #255	; 0xff
 80006cc:	0a76      	lsrs	r6, r6, #9
 80006ce:	e7ac      	b.n	800062a <__aeabi_fadd+0x10e>
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d0d6      	beq.n	8000682 <__aeabi_fadd+0x166>
 80006d4:	1b42      	subs	r2, r0, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d05c      	beq.n	8000794 <__aeabi_fadd+0x278>
 80006da:	28ff      	cmp	r0, #255	; 0xff
 80006dc:	d0ee      	beq.n	80006bc <__aeabi_fadd+0x1a0>
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	04db      	lsls	r3, r3, #19
 80006e2:	431f      	orrs	r7, r3
 80006e4:	2a1b      	cmp	r2, #27
 80006e6:	dc00      	bgt.n	80006ea <__aeabi_fadd+0x1ce>
 80006e8:	e082      	b.n	80007f0 <__aeabi_fadd+0x2d4>
 80006ea:	2301      	movs	r3, #1
 80006ec:	464d      	mov	r5, r9
 80006ee:	4463      	add	r3, ip
 80006f0:	e763      	b.n	80005ba <__aeabi_fadd+0x9e>
 80006f2:	2220      	movs	r2, #32
 80006f4:	1b40      	subs	r0, r0, r5
 80006f6:	3001      	adds	r0, #1
 80006f8:	1a12      	subs	r2, r2, r0
 80006fa:	0019      	movs	r1, r3
 80006fc:	4093      	lsls	r3, r2
 80006fe:	40c1      	lsrs	r1, r0
 8000700:	1e5a      	subs	r2, r3, #1
 8000702:	4193      	sbcs	r3, r2
 8000704:	2500      	movs	r5, #0
 8000706:	430b      	orrs	r3, r1
 8000708:	e780      	b.n	800060c <__aeabi_fadd+0xf0>
 800070a:	2320      	movs	r3, #32
 800070c:	4661      	mov	r1, ip
 800070e:	1a1b      	subs	r3, r3, r0
 8000710:	4099      	lsls	r1, r3
 8000712:	4662      	mov	r2, ip
 8000714:	000b      	movs	r3, r1
 8000716:	40c2      	lsrs	r2, r0
 8000718:	1e59      	subs	r1, r3, #1
 800071a:	418b      	sbcs	r3, r1
 800071c:	4313      	orrs	r3, r2
 800071e:	e764      	b.n	80005ea <__aeabi_fadd+0xce>
 8000720:	000c      	movs	r4, r1
 8000722:	4643      	mov	r3, r8
 8000724:	0015      	movs	r5, r2
 8000726:	e7b8      	b.n	800069a <__aeabi_fadd+0x17e>
 8000728:	4663      	mov	r3, ip
 800072a:	1afe      	subs	r6, r7, r3
 800072c:	0173      	lsls	r3, r6, #5
 800072e:	d445      	bmi.n	80007bc <__aeabi_fadd+0x2a0>
 8000730:	2e00      	cmp	r6, #0
 8000732:	d000      	beq.n	8000736 <__aeabi_fadd+0x21a>
 8000734:	e75e      	b.n	80005f4 <__aeabi_fadd+0xd8>
 8000736:	2400      	movs	r4, #0
 8000738:	2000      	movs	r0, #0
 800073a:	2600      	movs	r6, #0
 800073c:	e775      	b.n	800062a <__aeabi_fadd+0x10e>
 800073e:	2bff      	cmp	r3, #255	; 0xff
 8000740:	d0bb      	beq.n	80006ba <__aeabi_fadd+0x19e>
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	04db      	lsls	r3, r3, #19
 8000746:	431f      	orrs	r7, r3
 8000748:	2a1b      	cmp	r2, #27
 800074a:	dd47      	ble.n	80007dc <__aeabi_fadd+0x2c0>
 800074c:	2301      	movs	r3, #1
 800074e:	4662      	mov	r2, ip
 8000750:	000c      	movs	r4, r1
 8000752:	464d      	mov	r5, r9
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	e749      	b.n	80005ec <__aeabi_fadd+0xd0>
 8000758:	0005      	movs	r5, r0
 800075a:	e79e      	b.n	800069a <__aeabi_fadd+0x17e>
 800075c:	4661      	mov	r1, ip
 800075e:	2320      	movs	r3, #32
 8000760:	40d1      	lsrs	r1, r2
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	4662      	mov	r2, ip
 8000766:	409a      	lsls	r2, r3
 8000768:	0013      	movs	r3, r2
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	4193      	sbcs	r3, r2
 800076e:	430b      	orrs	r3, r1
 8000770:	e722      	b.n	80005b8 <__aeabi_fadd+0x9c>
 8000772:	2d00      	cmp	r5, #0
 8000774:	d146      	bne.n	8000804 <__aeabi_fadd+0x2e8>
 8000776:	2f00      	cmp	r7, #0
 8000778:	d062      	beq.n	8000840 <__aeabi_fadd+0x324>
 800077a:	4663      	mov	r3, ip
 800077c:	2000      	movs	r0, #0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_fadd+0x268>
 8000782:	e752      	b.n	800062a <__aeabi_fadd+0x10e>
 8000784:	003b      	movs	r3, r7
 8000786:	4463      	add	r3, ip
 8000788:	015a      	lsls	r2, r3, #5
 800078a:	d583      	bpl.n	8000694 <__aeabi_fadd+0x178>
 800078c:	4a32      	ldr	r2, [pc, #200]	; (8000858 <__aeabi_fadd+0x33c>)
 800078e:	3501      	adds	r5, #1
 8000790:	4013      	ands	r3, r2
 8000792:	e77f      	b.n	8000694 <__aeabi_fadd+0x178>
 8000794:	2f00      	cmp	r7, #0
 8000796:	d0c4      	beq.n	8000722 <__aeabi_fadd+0x206>
 8000798:	1e53      	subs	r3, r2, #1
 800079a:	2a01      	cmp	r2, #1
 800079c:	d012      	beq.n	80007c4 <__aeabi_fadd+0x2a8>
 800079e:	2aff      	cmp	r2, #255	; 0xff
 80007a0:	d08c      	beq.n	80006bc <__aeabi_fadd+0x1a0>
 80007a2:	001a      	movs	r2, r3
 80007a4:	e79e      	b.n	80006e4 <__aeabi_fadd+0x1c8>
 80007a6:	2f00      	cmp	r7, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x290>
 80007aa:	e77c      	b.n	80006a6 <__aeabi_fadd+0x18a>
 80007ac:	4663      	mov	r3, ip
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d183      	bne.n	80006ba <__aeabi_fadd+0x19e>
 80007b2:	2680      	movs	r6, #128	; 0x80
 80007b4:	2400      	movs	r4, #0
 80007b6:	20ff      	movs	r0, #255	; 0xff
 80007b8:	03f6      	lsls	r6, r6, #15
 80007ba:	e736      	b.n	800062a <__aeabi_fadd+0x10e>
 80007bc:	4663      	mov	r3, ip
 80007be:	000c      	movs	r4, r1
 80007c0:	1bde      	subs	r6, r3, r7
 80007c2:	e717      	b.n	80005f4 <__aeabi_fadd+0xd8>
 80007c4:	003b      	movs	r3, r7
 80007c6:	4463      	add	r3, ip
 80007c8:	2501      	movs	r5, #1
 80007ca:	015a      	lsls	r2, r3, #5
 80007cc:	d400      	bmi.n	80007d0 <__aeabi_fadd+0x2b4>
 80007ce:	e761      	b.n	8000694 <__aeabi_fadd+0x178>
 80007d0:	2502      	movs	r5, #2
 80007d2:	e6f7      	b.n	80005c4 <__aeabi_fadd+0xa8>
 80007d4:	4663      	mov	r3, ip
 80007d6:	2501      	movs	r5, #1
 80007d8:	1afb      	subs	r3, r7, r3
 80007da:	e707      	b.n	80005ec <__aeabi_fadd+0xd0>
 80007dc:	2320      	movs	r3, #32
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	0038      	movs	r0, r7
 80007e2:	409f      	lsls	r7, r3
 80007e4:	003b      	movs	r3, r7
 80007e6:	40d0      	lsrs	r0, r2
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	4193      	sbcs	r3, r2
 80007ec:	4303      	orrs	r3, r0
 80007ee:	e7ae      	b.n	800074e <__aeabi_fadd+0x232>
 80007f0:	2320      	movs	r3, #32
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	0039      	movs	r1, r7
 80007f6:	409f      	lsls	r7, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	40d1      	lsrs	r1, r2
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	4193      	sbcs	r3, r2
 8000800:	430b      	orrs	r3, r1
 8000802:	e773      	b.n	80006ec <__aeabi_fadd+0x1d0>
 8000804:	2f00      	cmp	r7, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2ee>
 8000808:	e758      	b.n	80006bc <__aeabi_fadd+0x1a0>
 800080a:	4662      	mov	r2, ip
 800080c:	2a00      	cmp	r2, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x2f6>
 8000810:	e755      	b.n	80006be <__aeabi_fadd+0x1a2>
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	4213      	tst	r3, r2
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x300>
 800081a:	e750      	b.n	80006be <__aeabi_fadd+0x1a2>
 800081c:	4641      	mov	r1, r8
 800081e:	4211      	tst	r1, r2
 8000820:	d000      	beq.n	8000824 <__aeabi_fadd+0x308>
 8000822:	e74c      	b.n	80006be <__aeabi_fadd+0x1a2>
 8000824:	4643      	mov	r3, r8
 8000826:	e74a      	b.n	80006be <__aeabi_fadd+0x1a2>
 8000828:	4663      	mov	r3, ip
 800082a:	2b00      	cmp	r3, #0
 800082c:	d083      	beq.n	8000736 <__aeabi_fadd+0x21a>
 800082e:	000c      	movs	r4, r1
 8000830:	4646      	mov	r6, r8
 8000832:	2000      	movs	r0, #0
 8000834:	e6f9      	b.n	800062a <__aeabi_fadd+0x10e>
 8000836:	4663      	mov	r3, ip
 8000838:	000c      	movs	r4, r1
 800083a:	1bdb      	subs	r3, r3, r7
 800083c:	3501      	adds	r5, #1
 800083e:	e6d5      	b.n	80005ec <__aeabi_fadd+0xd0>
 8000840:	4646      	mov	r6, r8
 8000842:	2000      	movs	r0, #0
 8000844:	e6f1      	b.n	800062a <__aeabi_fadd+0x10e>
 8000846:	2b00      	cmp	r3, #0
 8000848:	d000      	beq.n	800084c <__aeabi_fadd+0x330>
 800084a:	e723      	b.n	8000694 <__aeabi_fadd+0x178>
 800084c:	2400      	movs	r4, #0
 800084e:	2600      	movs	r6, #0
 8000850:	e6eb      	b.n	800062a <__aeabi_fadd+0x10e>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	7dffffff 	.word	0x7dffffff
 8000858:	fbffffff 	.word	0xfbffffff

0800085c <__aeabi_fdiv>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	464f      	mov	r7, r9
 8000860:	4646      	mov	r6, r8
 8000862:	46d6      	mov	lr, sl
 8000864:	0245      	lsls	r5, r0, #9
 8000866:	b5c0      	push	{r6, r7, lr}
 8000868:	0047      	lsls	r7, r0, #1
 800086a:	1c0c      	adds	r4, r1, #0
 800086c:	0a6d      	lsrs	r5, r5, #9
 800086e:	0e3f      	lsrs	r7, r7, #24
 8000870:	0fc6      	lsrs	r6, r0, #31
 8000872:	2f00      	cmp	r7, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fdiv+0x1c>
 8000876:	e06f      	b.n	8000958 <__aeabi_fdiv+0xfc>
 8000878:	2fff      	cmp	r7, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fdiv+0x22>
 800087c:	e074      	b.n	8000968 <__aeabi_fdiv+0x10c>
 800087e:	2300      	movs	r3, #0
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	4699      	mov	r9, r3
 8000884:	469a      	mov	sl, r3
 8000886:	00ed      	lsls	r5, r5, #3
 8000888:	04d2      	lsls	r2, r2, #19
 800088a:	4315      	orrs	r5, r2
 800088c:	3f7f      	subs	r7, #127	; 0x7f
 800088e:	0263      	lsls	r3, r4, #9
 8000890:	0a5b      	lsrs	r3, r3, #9
 8000892:	4698      	mov	r8, r3
 8000894:	0063      	lsls	r3, r4, #1
 8000896:	0e1b      	lsrs	r3, r3, #24
 8000898:	0fe4      	lsrs	r4, r4, #31
 800089a:	2b00      	cmp	r3, #0
 800089c:	d04d      	beq.n	800093a <__aeabi_fdiv+0xde>
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	d045      	beq.n	800092e <__aeabi_fdiv+0xd2>
 80008a2:	4642      	mov	r2, r8
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	00d2      	lsls	r2, r2, #3
 80008a8:	04c9      	lsls	r1, r1, #19
 80008aa:	4311      	orrs	r1, r2
 80008ac:	4688      	mov	r8, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	3b7f      	subs	r3, #127	; 0x7f
 80008b2:	0031      	movs	r1, r6
 80008b4:	1aff      	subs	r7, r7, r3
 80008b6:	464b      	mov	r3, r9
 80008b8:	4061      	eors	r1, r4
 80008ba:	b2c9      	uxtb	r1, r1
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d900      	bls.n	80008c2 <__aeabi_fdiv+0x66>
 80008c0:	e0b8      	b.n	8000a34 <__aeabi_fdiv+0x1d8>
 80008c2:	4870      	ldr	r0, [pc, #448]	; (8000a84 <__aeabi_fdiv+0x228>)
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	58c3      	ldr	r3, [r0, r3]
 80008c8:	469f      	mov	pc, r3
 80008ca:	2300      	movs	r3, #0
 80008cc:	4698      	mov	r8, r3
 80008ce:	0026      	movs	r6, r4
 80008d0:	4645      	mov	r5, r8
 80008d2:	4692      	mov	sl, r2
 80008d4:	4653      	mov	r3, sl
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d100      	bne.n	80008dc <__aeabi_fdiv+0x80>
 80008da:	e08d      	b.n	80009f8 <__aeabi_fdiv+0x19c>
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d100      	bne.n	80008e2 <__aeabi_fdiv+0x86>
 80008e0:	e0a1      	b.n	8000a26 <__aeabi_fdiv+0x1ca>
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d018      	beq.n	8000918 <__aeabi_fdiv+0xbc>
 80008e6:	003b      	movs	r3, r7
 80008e8:	337f      	adds	r3, #127	; 0x7f
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd6d      	ble.n	80009ca <__aeabi_fdiv+0x16e>
 80008ee:	076a      	lsls	r2, r5, #29
 80008f0:	d004      	beq.n	80008fc <__aeabi_fdiv+0xa0>
 80008f2:	220f      	movs	r2, #15
 80008f4:	402a      	ands	r2, r5
 80008f6:	2a04      	cmp	r2, #4
 80008f8:	d000      	beq.n	80008fc <__aeabi_fdiv+0xa0>
 80008fa:	3504      	adds	r5, #4
 80008fc:	012a      	lsls	r2, r5, #4
 80008fe:	d503      	bpl.n	8000908 <__aeabi_fdiv+0xac>
 8000900:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <__aeabi_fdiv+0x22c>)
 8000902:	401d      	ands	r5, r3
 8000904:	003b      	movs	r3, r7
 8000906:	3380      	adds	r3, #128	; 0x80
 8000908:	2bfe      	cmp	r3, #254	; 0xfe
 800090a:	dd00      	ble.n	800090e <__aeabi_fdiv+0xb2>
 800090c:	e074      	b.n	80009f8 <__aeabi_fdiv+0x19c>
 800090e:	01aa      	lsls	r2, r5, #6
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	b2d8      	uxtb	r0, r3
 8000914:	e002      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000916:	000e      	movs	r6, r1
 8000918:	2000      	movs	r0, #0
 800091a:	2200      	movs	r2, #0
 800091c:	05c0      	lsls	r0, r0, #23
 800091e:	07f6      	lsls	r6, r6, #31
 8000920:	4310      	orrs	r0, r2
 8000922:	4330      	orrs	r0, r6
 8000924:	bce0      	pop	{r5, r6, r7}
 8000926:	46ba      	mov	sl, r7
 8000928:	46b1      	mov	r9, r6
 800092a:	46a8      	mov	r8, r5
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092e:	4643      	mov	r3, r8
 8000930:	2b00      	cmp	r3, #0
 8000932:	d13f      	bne.n	80009b4 <__aeabi_fdiv+0x158>
 8000934:	2202      	movs	r2, #2
 8000936:	3fff      	subs	r7, #255	; 0xff
 8000938:	e003      	b.n	8000942 <__aeabi_fdiv+0xe6>
 800093a:	4643      	mov	r3, r8
 800093c:	2b00      	cmp	r3, #0
 800093e:	d12d      	bne.n	800099c <__aeabi_fdiv+0x140>
 8000940:	2201      	movs	r2, #1
 8000942:	0031      	movs	r1, r6
 8000944:	464b      	mov	r3, r9
 8000946:	4061      	eors	r1, r4
 8000948:	b2c9      	uxtb	r1, r1
 800094a:	4313      	orrs	r3, r2
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d838      	bhi.n	80009c2 <__aeabi_fdiv+0x166>
 8000950:	484e      	ldr	r0, [pc, #312]	; (8000a8c <__aeabi_fdiv+0x230>)
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	58c3      	ldr	r3, [r0, r3]
 8000956:	469f      	mov	pc, r3
 8000958:	2d00      	cmp	r5, #0
 800095a:	d113      	bne.n	8000984 <__aeabi_fdiv+0x128>
 800095c:	2304      	movs	r3, #4
 800095e:	4699      	mov	r9, r3
 8000960:	3b03      	subs	r3, #3
 8000962:	2700      	movs	r7, #0
 8000964:	469a      	mov	sl, r3
 8000966:	e792      	b.n	800088e <__aeabi_fdiv+0x32>
 8000968:	2d00      	cmp	r5, #0
 800096a:	d105      	bne.n	8000978 <__aeabi_fdiv+0x11c>
 800096c:	2308      	movs	r3, #8
 800096e:	4699      	mov	r9, r3
 8000970:	3b06      	subs	r3, #6
 8000972:	27ff      	movs	r7, #255	; 0xff
 8000974:	469a      	mov	sl, r3
 8000976:	e78a      	b.n	800088e <__aeabi_fdiv+0x32>
 8000978:	230c      	movs	r3, #12
 800097a:	4699      	mov	r9, r3
 800097c:	3b09      	subs	r3, #9
 800097e:	27ff      	movs	r7, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e784      	b.n	800088e <__aeabi_fdiv+0x32>
 8000984:	0028      	movs	r0, r5
 8000986:	f002 fa5b 	bl	8002e40 <__clzsi2>
 800098a:	2776      	movs	r7, #118	; 0x76
 800098c:	1f43      	subs	r3, r0, #5
 800098e:	409d      	lsls	r5, r3
 8000990:	2300      	movs	r3, #0
 8000992:	427f      	negs	r7, r7
 8000994:	4699      	mov	r9, r3
 8000996:	469a      	mov	sl, r3
 8000998:	1a3f      	subs	r7, r7, r0
 800099a:	e778      	b.n	800088e <__aeabi_fdiv+0x32>
 800099c:	4640      	mov	r0, r8
 800099e:	f002 fa4f 	bl	8002e40 <__clzsi2>
 80009a2:	4642      	mov	r2, r8
 80009a4:	1f43      	subs	r3, r0, #5
 80009a6:	409a      	lsls	r2, r3
 80009a8:	2376      	movs	r3, #118	; 0x76
 80009aa:	425b      	negs	r3, r3
 80009ac:	4690      	mov	r8, r2
 80009ae:	1a1b      	subs	r3, r3, r0
 80009b0:	2200      	movs	r2, #0
 80009b2:	e77e      	b.n	80008b2 <__aeabi_fdiv+0x56>
 80009b4:	2303      	movs	r3, #3
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4691      	mov	r9, r2
 80009bc:	33fc      	adds	r3, #252	; 0xfc
 80009be:	2203      	movs	r2, #3
 80009c0:	e777      	b.n	80008b2 <__aeabi_fdiv+0x56>
 80009c2:	000e      	movs	r6, r1
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	2200      	movs	r2, #0
 80009c8:	e7a8      	b.n	800091c <__aeabi_fdiv+0xc0>
 80009ca:	2201      	movs	r2, #1
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b1b      	cmp	r3, #27
 80009d0:	dca2      	bgt.n	8000918 <__aeabi_fdiv+0xbc>
 80009d2:	379e      	adds	r7, #158	; 0x9e
 80009d4:	002a      	movs	r2, r5
 80009d6:	40bd      	lsls	r5, r7
 80009d8:	40da      	lsrs	r2, r3
 80009da:	1e6b      	subs	r3, r5, #1
 80009dc:	419d      	sbcs	r5, r3
 80009de:	4315      	orrs	r5, r2
 80009e0:	076a      	lsls	r2, r5, #29
 80009e2:	d004      	beq.n	80009ee <__aeabi_fdiv+0x192>
 80009e4:	220f      	movs	r2, #15
 80009e6:	402a      	ands	r2, r5
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d000      	beq.n	80009ee <__aeabi_fdiv+0x192>
 80009ec:	3504      	adds	r5, #4
 80009ee:	016a      	lsls	r2, r5, #5
 80009f0:	d544      	bpl.n	8000a7c <__aeabi_fdiv+0x220>
 80009f2:	2001      	movs	r0, #1
 80009f4:	2200      	movs	r2, #0
 80009f6:	e791      	b.n	800091c <__aeabi_fdiv+0xc0>
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	2200      	movs	r2, #0
 80009fc:	e78e      	b.n	800091c <__aeabi_fdiv+0xc0>
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	2600      	movs	r6, #0
 8000a02:	20ff      	movs	r0, #255	; 0xff
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	e789      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	03d2      	lsls	r2, r2, #15
 8000a10:	4215      	tst	r5, r2
 8000a12:	d008      	beq.n	8000a26 <__aeabi_fdiv+0x1ca>
 8000a14:	4643      	mov	r3, r8
 8000a16:	4213      	tst	r3, r2
 8000a18:	d105      	bne.n	8000a26 <__aeabi_fdiv+0x1ca>
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	0252      	lsls	r2, r2, #9
 8000a1e:	0026      	movs	r6, r4
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	0a52      	lsrs	r2, r2, #9
 8000a24:	e77a      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	03d2      	lsls	r2, r2, #15
 8000a2a:	432a      	orrs	r2, r5
 8000a2c:	0252      	lsls	r2, r2, #9
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	0a52      	lsrs	r2, r2, #9
 8000a32:	e773      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a34:	4642      	mov	r2, r8
 8000a36:	016b      	lsls	r3, r5, #5
 8000a38:	0155      	lsls	r5, r2, #5
 8000a3a:	42ab      	cmp	r3, r5
 8000a3c:	d21a      	bcs.n	8000a74 <__aeabi_fdiv+0x218>
 8000a3e:	201b      	movs	r0, #27
 8000a40:	2200      	movs	r2, #0
 8000a42:	3f01      	subs	r7, #1
 8000a44:	2601      	movs	r6, #1
 8000a46:	001c      	movs	r4, r3
 8000a48:	0052      	lsls	r2, r2, #1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2c00      	cmp	r4, #0
 8000a4e:	db01      	blt.n	8000a54 <__aeabi_fdiv+0x1f8>
 8000a50:	429d      	cmp	r5, r3
 8000a52:	d801      	bhi.n	8000a58 <__aeabi_fdiv+0x1fc>
 8000a54:	1b5b      	subs	r3, r3, r5
 8000a56:	4332      	orrs	r2, r6
 8000a58:	3801      	subs	r0, #1
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d1f3      	bne.n	8000a46 <__aeabi_fdiv+0x1ea>
 8000a5e:	1e58      	subs	r0, r3, #1
 8000a60:	4183      	sbcs	r3, r0
 8000a62:	4313      	orrs	r3, r2
 8000a64:	001d      	movs	r5, r3
 8000a66:	003b      	movs	r3, r7
 8000a68:	337f      	adds	r3, #127	; 0x7f
 8000a6a:	000e      	movs	r6, r1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd00      	ble.n	8000a72 <__aeabi_fdiv+0x216>
 8000a70:	e73d      	b.n	80008ee <__aeabi_fdiv+0x92>
 8000a72:	e7aa      	b.n	80009ca <__aeabi_fdiv+0x16e>
 8000a74:	201a      	movs	r0, #26
 8000a76:	2201      	movs	r2, #1
 8000a78:	1b5b      	subs	r3, r3, r5
 8000a7a:	e7e3      	b.n	8000a44 <__aeabi_fdiv+0x1e8>
 8000a7c:	01aa      	lsls	r2, r5, #6
 8000a7e:	2000      	movs	r0, #0
 8000a80:	0a52      	lsrs	r2, r2, #9
 8000a82:	e74b      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a84:	08008c10 	.word	0x08008c10
 8000a88:	f7ffffff 	.word	0xf7ffffff
 8000a8c:	08008c50 	.word	0x08008c50

08000a90 <__eqsf2>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	0042      	lsls	r2, r0, #1
 8000a94:	0245      	lsls	r5, r0, #9
 8000a96:	024e      	lsls	r6, r1, #9
 8000a98:	004c      	lsls	r4, r1, #1
 8000a9a:	0fc3      	lsrs	r3, r0, #31
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0a76      	lsrs	r6, r6, #9
 8000aa4:	0e24      	lsrs	r4, r4, #24
 8000aa6:	0fc9      	lsrs	r1, r1, #31
 8000aa8:	2aff      	cmp	r2, #255	; 0xff
 8000aaa:	d006      	beq.n	8000aba <__eqsf2+0x2a>
 8000aac:	2cff      	cmp	r4, #255	; 0xff
 8000aae:	d003      	beq.n	8000ab8 <__eqsf2+0x28>
 8000ab0:	42a2      	cmp	r2, r4
 8000ab2:	d101      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ab4:	42b5      	cmp	r5, r6
 8000ab6:	d006      	beq.n	8000ac6 <__eqsf2+0x36>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x28>
 8000abe:	2cff      	cmp	r4, #255	; 0xff
 8000ac0:	d1fa      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d006      	beq.n	8000ad8 <__eqsf2+0x48>
 8000aca:	2001      	movs	r0, #1
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d1f3      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	1e43      	subs	r3, r0, #1
 8000ad4:	4198      	sbcs	r0, r3
 8000ad6:	e7ef      	b.n	8000ab8 <__eqsf2+0x28>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e7ed      	b.n	8000ab8 <__eqsf2+0x28>

08000adc <__gesf2>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0245      	lsls	r5, r0, #9
 8000ae2:	024e      	lsls	r6, r1, #9
 8000ae4:	004c      	lsls	r4, r1, #1
 8000ae6:	0fc3      	lsrs	r3, r0, #31
 8000ae8:	0a6d      	lsrs	r5, r5, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a76      	lsrs	r6, r6, #9
 8000aee:	0e24      	lsrs	r4, r4, #24
 8000af0:	0fc8      	lsrs	r0, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d01b      	beq.n	8000b2e <__gesf2+0x52>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d00e      	beq.n	8000b18 <__gesf2+0x3c>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11b      	bne.n	8000b36 <__gesf2+0x5a>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d101      	bne.n	8000b06 <__gesf2+0x2a>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d01c      	beq.n	8000b40 <__gesf2+0x64>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d00c      	beq.n	8000b24 <__gesf2+0x48>
 8000b0a:	4283      	cmp	r3, r0
 8000b0c:	d01c      	beq.n	8000b48 <__gesf2+0x6c>
 8000b0e:	2102      	movs	r1, #2
 8000b10:	1e58      	subs	r0, r3, #1
 8000b12:	4008      	ands	r0, r1
 8000b14:	3801      	subs	r0, #1
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	d122      	bne.n	8000b62 <__gesf2+0x86>
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d1f4      	bne.n	8000b0a <__gesf2+0x2e>
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d1f2      	bne.n	8000b0a <__gesf2+0x2e>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d1f6      	bne.n	8000b16 <__gesf2+0x3a>
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	e7f3      	b.n	8000b16 <__gesf2+0x3a>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d117      	bne.n	8000b62 <__gesf2+0x86>
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d0f0      	beq.n	8000b18 <__gesf2+0x3c>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d1e7      	bne.n	8000b0a <__gesf2+0x2e>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d1e5      	bne.n	8000b0a <__gesf2+0x2e>
 8000b3e:	e7e6      	b.n	8000b0e <__gesf2+0x32>
 8000b40:	2000      	movs	r0, #0
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d0e7      	beq.n	8000b16 <__gesf2+0x3a>
 8000b46:	e7e2      	b.n	8000b0e <__gesf2+0x32>
 8000b48:	42a2      	cmp	r2, r4
 8000b4a:	dc05      	bgt.n	8000b58 <__gesf2+0x7c>
 8000b4c:	dbea      	blt.n	8000b24 <__gesf2+0x48>
 8000b4e:	42b5      	cmp	r5, r6
 8000b50:	d802      	bhi.n	8000b58 <__gesf2+0x7c>
 8000b52:	d3e7      	bcc.n	8000b24 <__gesf2+0x48>
 8000b54:	2000      	movs	r0, #0
 8000b56:	e7de      	b.n	8000b16 <__gesf2+0x3a>
 8000b58:	4243      	negs	r3, r0
 8000b5a:	4158      	adcs	r0, r3
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7d9      	b.n	8000b16 <__gesf2+0x3a>
 8000b62:	2002      	movs	r0, #2
 8000b64:	4240      	negs	r0, r0
 8000b66:	e7d6      	b.n	8000b16 <__gesf2+0x3a>

08000b68 <__lesf2>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	0042      	lsls	r2, r0, #1
 8000b6c:	0245      	lsls	r5, r0, #9
 8000b6e:	024e      	lsls	r6, r1, #9
 8000b70:	004c      	lsls	r4, r1, #1
 8000b72:	0fc3      	lsrs	r3, r0, #31
 8000b74:	0a6d      	lsrs	r5, r5, #9
 8000b76:	0e12      	lsrs	r2, r2, #24
 8000b78:	0a76      	lsrs	r6, r6, #9
 8000b7a:	0e24      	lsrs	r4, r4, #24
 8000b7c:	0fc8      	lsrs	r0, r1, #31
 8000b7e:	2aff      	cmp	r2, #255	; 0xff
 8000b80:	d00b      	beq.n	8000b9a <__lesf2+0x32>
 8000b82:	2cff      	cmp	r4, #255	; 0xff
 8000b84:	d00d      	beq.n	8000ba2 <__lesf2+0x3a>
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d11f      	bne.n	8000bca <__lesf2+0x62>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d116      	bne.n	8000bbc <__lesf2+0x54>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d114      	bne.n	8000bbc <__lesf2+0x54>
 8000b92:	2000      	movs	r0, #0
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d010      	beq.n	8000bba <__lesf2+0x52>
 8000b98:	e009      	b.n	8000bae <__lesf2+0x46>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d10c      	bne.n	8000bb8 <__lesf2+0x50>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d113      	bne.n	8000bca <__lesf2+0x62>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d108      	bne.n	8000bb8 <__lesf2+0x50>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d008      	beq.n	8000bbc <__lesf2+0x54>
 8000baa:	4283      	cmp	r3, r0
 8000bac:	d012      	beq.n	8000bd4 <__lesf2+0x6c>
 8000bae:	2102      	movs	r1, #2
 8000bb0:	1e58      	subs	r0, r3, #1
 8000bb2:	4008      	ands	r0, r1
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	e000      	b.n	8000bba <__lesf2+0x52>
 8000bb8:	2002      	movs	r0, #2
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f4      	bne.n	8000baa <__lesf2+0x42>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d1fa      	bne.n	8000bba <__lesf2+0x52>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	e7f7      	b.n	8000bba <__lesf2+0x52>
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d1ed      	bne.n	8000baa <__lesf2+0x42>
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d1eb      	bne.n	8000baa <__lesf2+0x42>
 8000bd2:	e7ec      	b.n	8000bae <__lesf2+0x46>
 8000bd4:	42a2      	cmp	r2, r4
 8000bd6:	dc05      	bgt.n	8000be4 <__lesf2+0x7c>
 8000bd8:	dbf2      	blt.n	8000bc0 <__lesf2+0x58>
 8000bda:	42b5      	cmp	r5, r6
 8000bdc:	d802      	bhi.n	8000be4 <__lesf2+0x7c>
 8000bde:	d3ef      	bcc.n	8000bc0 <__lesf2+0x58>
 8000be0:	2000      	movs	r0, #0
 8000be2:	e7ea      	b.n	8000bba <__lesf2+0x52>
 8000be4:	4243      	negs	r3, r0
 8000be6:	4158      	adcs	r0, r3
 8000be8:	0040      	lsls	r0, r0, #1
 8000bea:	3801      	subs	r0, #1
 8000bec:	e7e5      	b.n	8000bba <__lesf2+0x52>
 8000bee:	46c0      	nop			; (mov r8, r8)

08000bf0 <__aeabi_fsub>:
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	46c6      	mov	lr, r8
 8000bf4:	0243      	lsls	r3, r0, #9
 8000bf6:	0a5b      	lsrs	r3, r3, #9
 8000bf8:	0045      	lsls	r5, r0, #1
 8000bfa:	00da      	lsls	r2, r3, #3
 8000bfc:	0fc4      	lsrs	r4, r0, #31
 8000bfe:	0248      	lsls	r0, r1, #9
 8000c00:	004f      	lsls	r7, r1, #1
 8000c02:	4694      	mov	ip, r2
 8000c04:	0a42      	lsrs	r2, r0, #9
 8000c06:	001e      	movs	r6, r3
 8000c08:	4690      	mov	r8, r2
 8000c0a:	b500      	push	{lr}
 8000c0c:	0e2d      	lsrs	r5, r5, #24
 8000c0e:	0e3f      	lsrs	r7, r7, #24
 8000c10:	0fc9      	lsrs	r1, r1, #31
 8000c12:	0980      	lsrs	r0, r0, #6
 8000c14:	2fff      	cmp	r7, #255	; 0xff
 8000c16:	d059      	beq.n	8000ccc <__aeabi_fsub+0xdc>
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4051      	eors	r1, r2
 8000c1c:	428c      	cmp	r4, r1
 8000c1e:	d039      	beq.n	8000c94 <__aeabi_fsub+0xa4>
 8000c20:	1bea      	subs	r2, r5, r7
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	dd58      	ble.n	8000cd8 <__aeabi_fsub+0xe8>
 8000c26:	2f00      	cmp	r7, #0
 8000c28:	d068      	beq.n	8000cfc <__aeabi_fsub+0x10c>
 8000c2a:	2dff      	cmp	r5, #255	; 0xff
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fsub+0x40>
 8000c2e:	e0d1      	b.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	04db      	lsls	r3, r3, #19
 8000c34:	4318      	orrs	r0, r3
 8000c36:	2a1b      	cmp	r2, #27
 8000c38:	dc00      	bgt.n	8000c3c <__aeabi_fsub+0x4c>
 8000c3a:	e0e3      	b.n	8000e04 <__aeabi_fsub+0x214>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4662      	mov	r2, ip
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	015a      	lsls	r2, r3, #5
 8000c44:	d400      	bmi.n	8000c48 <__aeabi_fsub+0x58>
 8000c46:	e0ac      	b.n	8000da2 <__aeabi_fsub+0x1b2>
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	099e      	lsrs	r6, r3, #6
 8000c4c:	0030      	movs	r0, r6
 8000c4e:	f002 f8f7 	bl	8002e40 <__clzsi2>
 8000c52:	0033      	movs	r3, r6
 8000c54:	3805      	subs	r0, #5
 8000c56:	4083      	lsls	r3, r0
 8000c58:	4285      	cmp	r5, r0
 8000c5a:	dc00      	bgt.n	8000c5e <__aeabi_fsub+0x6e>
 8000c5c:	e0c6      	b.n	8000dec <__aeabi_fsub+0x1fc>
 8000c5e:	4ab2      	ldr	r2, [pc, #712]	; (8000f28 <__aeabi_fsub+0x338>)
 8000c60:	1a2d      	subs	r5, r5, r0
 8000c62:	4013      	ands	r3, r2
 8000c64:	075a      	lsls	r2, r3, #29
 8000c66:	d004      	beq.n	8000c72 <__aeabi_fsub+0x82>
 8000c68:	220f      	movs	r2, #15
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	2a04      	cmp	r2, #4
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_fsub+0x82>
 8000c70:	3304      	adds	r3, #4
 8000c72:	015a      	lsls	r2, r3, #5
 8000c74:	d400      	bmi.n	8000c78 <__aeabi_fsub+0x88>
 8000c76:	e097      	b.n	8000da8 <__aeabi_fsub+0x1b8>
 8000c78:	1c6a      	adds	r2, r5, #1
 8000c7a:	2dfe      	cmp	r5, #254	; 0xfe
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_fsub+0x90>
 8000c7e:	e084      	b.n	8000d8a <__aeabi_fsub+0x19a>
 8000c80:	019b      	lsls	r3, r3, #6
 8000c82:	0a5e      	lsrs	r6, r3, #9
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	05d0      	lsls	r0, r2, #23
 8000c88:	4330      	orrs	r0, r6
 8000c8a:	07e4      	lsls	r4, r4, #31
 8000c8c:	4320      	orrs	r0, r4
 8000c8e:	bc80      	pop	{r7}
 8000c90:	46b8      	mov	r8, r7
 8000c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c94:	1bea      	subs	r2, r5, r7
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	dd41      	ble.n	8000d1e <__aeabi_fsub+0x12e>
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d06b      	beq.n	8000d76 <__aeabi_fsub+0x186>
 8000c9e:	2dff      	cmp	r5, #255	; 0xff
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0xb4>
 8000ca2:	e097      	b.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	04db      	lsls	r3, r3, #19
 8000ca8:	4318      	orrs	r0, r3
 8000caa:	2a1b      	cmp	r2, #27
 8000cac:	dc00      	bgt.n	8000cb0 <__aeabi_fsub+0xc0>
 8000cae:	e0cc      	b.n	8000e4a <__aeabi_fsub+0x25a>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4463      	add	r3, ip
 8000cb4:	015a      	lsls	r2, r3, #5
 8000cb6:	d574      	bpl.n	8000da2 <__aeabi_fsub+0x1b2>
 8000cb8:	3501      	adds	r5, #1
 8000cba:	2dff      	cmp	r5, #255	; 0xff
 8000cbc:	d065      	beq.n	8000d8a <__aeabi_fsub+0x19a>
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	499a      	ldr	r1, [pc, #616]	; (8000f2c <__aeabi_fsub+0x33c>)
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	085b      	lsrs	r3, r3, #1
 8000cc6:	400b      	ands	r3, r1
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	e7cb      	b.n	8000c64 <__aeabi_fsub+0x74>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d01f      	beq.n	8000d10 <__aeabi_fsub+0x120>
 8000cd0:	428c      	cmp	r4, r1
 8000cd2:	d022      	beq.n	8000d1a <__aeabi_fsub+0x12a>
 8000cd4:	002a      	movs	r2, r5
 8000cd6:	3aff      	subs	r2, #255	; 0xff
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d035      	beq.n	8000d48 <__aeabi_fsub+0x158>
 8000cdc:	1b7a      	subs	r2, r7, r5
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_fsub+0xf4>
 8000ce2:	e099      	b.n	8000e18 <__aeabi_fsub+0x228>
 8000ce4:	4663      	mov	r3, ip
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0xfc>
 8000cea:	e0dd      	b.n	8000ea8 <__aeabi_fsub+0x2b8>
 8000cec:	1e53      	subs	r3, r2, #1
 8000cee:	2a01      	cmp	r2, #1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x104>
 8000cf2:	e105      	b.n	8000f00 <__aeabi_fsub+0x310>
 8000cf4:	2aff      	cmp	r2, #255	; 0xff
 8000cf6:	d06b      	beq.n	8000dd0 <__aeabi_fsub+0x1e0>
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	e094      	b.n	8000e26 <__aeabi_fsub+0x236>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d073      	beq.n	8000de8 <__aeabi_fsub+0x1f8>
 8000d00:	1e51      	subs	r1, r2, #1
 8000d02:	2a01      	cmp	r2, #1
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fsub+0x118>
 8000d06:	e0df      	b.n	8000ec8 <__aeabi_fsub+0x2d8>
 8000d08:	2aff      	cmp	r2, #255	; 0xff
 8000d0a:	d063      	beq.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	e792      	b.n	8000c36 <__aeabi_fsub+0x46>
 8000d10:	2201      	movs	r2, #1
 8000d12:	4051      	eors	r1, r2
 8000d14:	42a1      	cmp	r1, r4
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fsub+0x12a>
 8000d18:	e782      	b.n	8000c20 <__aeabi_fsub+0x30>
 8000d1a:	002a      	movs	r2, r5
 8000d1c:	3aff      	subs	r2, #255	; 0xff
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	d036      	beq.n	8000d90 <__aeabi_fsub+0x1a0>
 8000d22:	1b7a      	subs	r2, r7, r5
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_fsub+0x13a>
 8000d28:	e0aa      	b.n	8000e80 <__aeabi_fsub+0x290>
 8000d2a:	2fff      	cmp	r7, #255	; 0xff
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_fsub+0x140>
 8000d2e:	e0da      	b.n	8000ee6 <__aeabi_fsub+0x2f6>
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	4661      	mov	r1, ip
 8000d34:	04db      	lsls	r3, r3, #19
 8000d36:	4319      	orrs	r1, r3
 8000d38:	468c      	mov	ip, r1
 8000d3a:	2a1b      	cmp	r2, #27
 8000d3c:	dc00      	bgt.n	8000d40 <__aeabi_fsub+0x150>
 8000d3e:	e0d4      	b.n	8000eea <__aeabi_fsub+0x2fa>
 8000d40:	2301      	movs	r3, #1
 8000d42:	003d      	movs	r5, r7
 8000d44:	181b      	adds	r3, r3, r0
 8000d46:	e7b5      	b.n	8000cb4 <__aeabi_fsub+0xc4>
 8000d48:	27fe      	movs	r7, #254	; 0xfe
 8000d4a:	1c6a      	adds	r2, r5, #1
 8000d4c:	4217      	tst	r7, r2
 8000d4e:	d171      	bne.n	8000e34 <__aeabi_fsub+0x244>
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0x166>
 8000d54:	e09e      	b.n	8000e94 <__aeabi_fsub+0x2a4>
 8000d56:	4663      	mov	r3, ip
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_fsub+0x16e>
 8000d5c:	e0d5      	b.n	8000f0a <__aeabi_fsub+0x31a>
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x176>
 8000d64:	e78f      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000d66:	1a1b      	subs	r3, r3, r0
 8000d68:	015e      	lsls	r6, r3, #5
 8000d6a:	d400      	bmi.n	8000d6e <__aeabi_fsub+0x17e>
 8000d6c:	e0d6      	b.n	8000f1c <__aeabi_fsub+0x32c>
 8000d6e:	4663      	mov	r3, ip
 8000d70:	000c      	movs	r4, r1
 8000d72:	1ac3      	subs	r3, r0, r3
 8000d74:	e776      	b.n	8000c64 <__aeabi_fsub+0x74>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d036      	beq.n	8000de8 <__aeabi_fsub+0x1f8>
 8000d7a:	1e51      	subs	r1, r2, #1
 8000d7c:	2a01      	cmp	r2, #1
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fsub+0x192>
 8000d80:	e09a      	b.n	8000eb8 <__aeabi_fsub+0x2c8>
 8000d82:	2aff      	cmp	r2, #255	; 0xff
 8000d84:	d026      	beq.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000d86:	000a      	movs	r2, r1
 8000d88:	e78f      	b.n	8000caa <__aeabi_fsub+0xba>
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e77a      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000d90:	27fe      	movs	r7, #254	; 0xfe
 8000d92:	1c6a      	adds	r2, r5, #1
 8000d94:	4217      	tst	r7, r2
 8000d96:	d062      	beq.n	8000e5e <__aeabi_fsub+0x26e>
 8000d98:	2aff      	cmp	r2, #255	; 0xff
 8000d9a:	d0f6      	beq.n	8000d8a <__aeabi_fsub+0x19a>
 8000d9c:	0015      	movs	r5, r2
 8000d9e:	4460      	add	r0, ip
 8000da0:	0843      	lsrs	r3, r0, #1
 8000da2:	075a      	lsls	r2, r3, #29
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x1b8>
 8000da6:	e75f      	b.n	8000c68 <__aeabi_fsub+0x78>
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	2dff      	cmp	r5, #255	; 0xff
 8000dac:	d012      	beq.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000dae:	025b      	lsls	r3, r3, #9
 8000db0:	0a5e      	lsrs	r6, r3, #9
 8000db2:	b2ea      	uxtb	r2, r5
 8000db4:	e767      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000db6:	4662      	mov	r2, ip
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x1ce>
 8000dbc:	e093      	b.n	8000ee6 <__aeabi_fsub+0x2f6>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d008      	beq.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4213      	tst	r3, r2
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000dca:	4640      	mov	r0, r8
 8000dcc:	4210      	tst	r0, r2
 8000dce:	d101      	bne.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000dd0:	000c      	movs	r4, r1
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0d8      	beq.n	8000d8a <__aeabi_fsub+0x19a>
 8000dd8:	2680      	movs	r6, #128	; 0x80
 8000dda:	03f6      	lsls	r6, r6, #15
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	0276      	lsls	r6, r6, #9
 8000de0:	22ff      	movs	r2, #255	; 0xff
 8000de2:	0a76      	lsrs	r6, r6, #9
 8000de4:	e74f      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000de6:	4643      	mov	r3, r8
 8000de8:	0015      	movs	r5, r2
 8000dea:	e7de      	b.n	8000daa <__aeabi_fsub+0x1ba>
 8000dec:	2220      	movs	r2, #32
 8000dee:	1b40      	subs	r0, r0, r5
 8000df0:	3001      	adds	r0, #1
 8000df2:	1a12      	subs	r2, r2, r0
 8000df4:	0019      	movs	r1, r3
 8000df6:	4093      	lsls	r3, r2
 8000df8:	40c1      	lsrs	r1, r0
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	4193      	sbcs	r3, r2
 8000dfe:	2500      	movs	r5, #0
 8000e00:	430b      	orrs	r3, r1
 8000e02:	e72f      	b.n	8000c64 <__aeabi_fsub+0x74>
 8000e04:	2320      	movs	r3, #32
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	0001      	movs	r1, r0
 8000e0a:	4098      	lsls	r0, r3
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	40d1      	lsrs	r1, r2
 8000e10:	1e5a      	subs	r2, r3, #1
 8000e12:	4193      	sbcs	r3, r2
 8000e14:	430b      	orrs	r3, r1
 8000e16:	e712      	b.n	8000c3e <__aeabi_fsub+0x4e>
 8000e18:	2fff      	cmp	r7, #255	; 0xff
 8000e1a:	d0d9      	beq.n	8000dd0 <__aeabi_fsub+0x1e0>
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	4664      	mov	r4, ip
 8000e20:	04db      	lsls	r3, r3, #19
 8000e22:	431c      	orrs	r4, r3
 8000e24:	46a4      	mov	ip, r4
 8000e26:	2a1b      	cmp	r2, #27
 8000e28:	dd52      	ble.n	8000ed0 <__aeabi_fsub+0x2e0>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	000c      	movs	r4, r1
 8000e2e:	003d      	movs	r5, r7
 8000e30:	1ac3      	subs	r3, r0, r3
 8000e32:	e706      	b.n	8000c42 <__aeabi_fsub+0x52>
 8000e34:	4663      	mov	r3, ip
 8000e36:	1a1e      	subs	r6, r3, r0
 8000e38:	0173      	lsls	r3, r6, #5
 8000e3a:	d439      	bmi.n	8000eb0 <__aeabi_fsub+0x2c0>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_fsub+0x252>
 8000e40:	e704      	b.n	8000c4c <__aeabi_fsub+0x5c>
 8000e42:	2400      	movs	r4, #0
 8000e44:	2200      	movs	r2, #0
 8000e46:	2600      	movs	r6, #0
 8000e48:	e71d      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	0001      	movs	r1, r0
 8000e50:	4098      	lsls	r0, r3
 8000e52:	0003      	movs	r3, r0
 8000e54:	40d1      	lsrs	r1, r2
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	4193      	sbcs	r3, r2
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	e729      	b.n	8000cb2 <__aeabi_fsub+0xc2>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d1a9      	bne.n	8000db6 <__aeabi_fsub+0x1c6>
 8000e62:	4663      	mov	r3, ip
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d056      	beq.n	8000f16 <__aeabi_fsub+0x326>
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x280>
 8000e6e:	e70a      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000e70:	0003      	movs	r3, r0
 8000e72:	4463      	add	r3, ip
 8000e74:	015a      	lsls	r2, r3, #5
 8000e76:	d594      	bpl.n	8000da2 <__aeabi_fsub+0x1b2>
 8000e78:	4a2b      	ldr	r2, [pc, #172]	; (8000f28 <__aeabi_fsub+0x338>)
 8000e7a:	3501      	adds	r5, #1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	e790      	b.n	8000da2 <__aeabi_fsub+0x1b2>
 8000e80:	4663      	mov	r3, ip
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0af      	beq.n	8000de6 <__aeabi_fsub+0x1f6>
 8000e86:	1e53      	subs	r3, r2, #1
 8000e88:	2a01      	cmp	r2, #1
 8000e8a:	d015      	beq.n	8000eb8 <__aeabi_fsub+0x2c8>
 8000e8c:	2aff      	cmp	r2, #255	; 0xff
 8000e8e:	d02a      	beq.n	8000ee6 <__aeabi_fsub+0x2f6>
 8000e90:	001a      	movs	r2, r3
 8000e92:	e752      	b.n	8000d3a <__aeabi_fsub+0x14a>
 8000e94:	4662      	mov	r2, ip
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d191      	bne.n	8000dbe <__aeabi_fsub+0x1ce>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d198      	bne.n	8000dd0 <__aeabi_fsub+0x1e0>
 8000e9e:	2680      	movs	r6, #128	; 0x80
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	22ff      	movs	r2, #255	; 0xff
 8000ea4:	03f6      	lsls	r6, r6, #15
 8000ea6:	e6ee      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000ea8:	000c      	movs	r4, r1
 8000eaa:	4643      	mov	r3, r8
 8000eac:	0015      	movs	r5, r2
 8000eae:	e77c      	b.n	8000daa <__aeabi_fsub+0x1ba>
 8000eb0:	4663      	mov	r3, ip
 8000eb2:	000c      	movs	r4, r1
 8000eb4:	1ac6      	subs	r6, r0, r3
 8000eb6:	e6c9      	b.n	8000c4c <__aeabi_fsub+0x5c>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	4463      	add	r3, ip
 8000ebc:	2501      	movs	r5, #1
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fsub+0x2d4>
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fsub+0x1b2>
 8000ec4:	2502      	movs	r5, #2
 8000ec6:	e6fa      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000ec8:	4663      	mov	r3, ip
 8000eca:	2501      	movs	r5, #1
 8000ecc:	1a1b      	subs	r3, r3, r0
 8000ece:	e6b8      	b.n	8000c42 <__aeabi_fsub+0x52>
 8000ed0:	4664      	mov	r4, ip
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	40d4      	lsrs	r4, r2
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	4662      	mov	r2, ip
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	4193      	sbcs	r3, r2
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	e7a2      	b.n	8000e2c <__aeabi_fsub+0x23c>
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	e774      	b.n	8000dd4 <__aeabi_fsub+0x1e4>
 8000eea:	4661      	mov	r1, ip
 8000eec:	2320      	movs	r3, #32
 8000eee:	40d1      	lsrs	r1, r2
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	4662      	mov	r2, ip
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	4193      	sbcs	r3, r2
 8000efc:	430b      	orrs	r3, r1
 8000efe:	e720      	b.n	8000d42 <__aeabi_fsub+0x152>
 8000f00:	4663      	mov	r3, ip
 8000f02:	000c      	movs	r4, r1
 8000f04:	2501      	movs	r5, #1
 8000f06:	1ac3      	subs	r3, r0, r3
 8000f08:	e69b      	b.n	8000c42 <__aeabi_fsub+0x52>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d099      	beq.n	8000e42 <__aeabi_fsub+0x252>
 8000f0e:	000c      	movs	r4, r1
 8000f10:	4646      	mov	r6, r8
 8000f12:	2200      	movs	r2, #0
 8000f14:	e6b7      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000f16:	4646      	mov	r6, r8
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e6b4      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x332>
 8000f20:	e73f      	b.n	8000da2 <__aeabi_fsub+0x1b2>
 8000f22:	2400      	movs	r4, #0
 8000f24:	2600      	movs	r6, #0
 8000f26:	e6ae      	b.n	8000c86 <__aeabi_fsub+0x96>
 8000f28:	fbffffff 	.word	0xfbffffff
 8000f2c:	7dffffff 	.word	0x7dffffff

08000f30 <__aeabi_f2iz>:
 8000f30:	0241      	lsls	r1, r0, #9
 8000f32:	0042      	lsls	r2, r0, #1
 8000f34:	0fc3      	lsrs	r3, r0, #31
 8000f36:	0a49      	lsrs	r1, r1, #9
 8000f38:	2000      	movs	r0, #0
 8000f3a:	0e12      	lsrs	r2, r2, #24
 8000f3c:	2a7e      	cmp	r2, #126	; 0x7e
 8000f3e:	dd03      	ble.n	8000f48 <__aeabi_f2iz+0x18>
 8000f40:	2a9d      	cmp	r2, #157	; 0x9d
 8000f42:	dd02      	ble.n	8000f4a <__aeabi_f2iz+0x1a>
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <__aeabi_f2iz+0x3c>)
 8000f46:	1898      	adds	r0, r3, r2
 8000f48:	4770      	bx	lr
 8000f4a:	2080      	movs	r0, #128	; 0x80
 8000f4c:	0400      	lsls	r0, r0, #16
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	2a95      	cmp	r2, #149	; 0x95
 8000f52:	dc07      	bgt.n	8000f64 <__aeabi_f2iz+0x34>
 8000f54:	2096      	movs	r0, #150	; 0x96
 8000f56:	1a82      	subs	r2, r0, r2
 8000f58:	40d1      	lsrs	r1, r2
 8000f5a:	4248      	negs	r0, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__aeabi_f2iz+0x18>
 8000f60:	0008      	movs	r0, r1
 8000f62:	e7f1      	b.n	8000f48 <__aeabi_f2iz+0x18>
 8000f64:	3a96      	subs	r2, #150	; 0x96
 8000f66:	4091      	lsls	r1, r2
 8000f68:	e7f7      	b.n	8000f5a <__aeabi_f2iz+0x2a>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	7fffffff 	.word	0x7fffffff

08000f70 <__aeabi_i2f>:
 8000f70:	b570      	push	{r4, r5, r6, lr}
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d013      	beq.n	8000f9e <__aeabi_i2f+0x2e>
 8000f76:	17c3      	asrs	r3, r0, #31
 8000f78:	18c5      	adds	r5, r0, r3
 8000f7a:	405d      	eors	r5, r3
 8000f7c:	0fc4      	lsrs	r4, r0, #31
 8000f7e:	0028      	movs	r0, r5
 8000f80:	f001 ff5e 	bl	8002e40 <__clzsi2>
 8000f84:	239e      	movs	r3, #158	; 0x9e
 8000f86:	0001      	movs	r1, r0
 8000f88:	1a1b      	subs	r3, r3, r0
 8000f8a:	2b96      	cmp	r3, #150	; 0x96
 8000f8c:	dc0f      	bgt.n	8000fae <__aeabi_i2f+0x3e>
 8000f8e:	2808      	cmp	r0, #8
 8000f90:	d031      	beq.n	8000ff6 <__aeabi_i2f+0x86>
 8000f92:	3908      	subs	r1, #8
 8000f94:	408d      	lsls	r5, r1
 8000f96:	026d      	lsls	r5, r5, #9
 8000f98:	0a6d      	lsrs	r5, r5, #9
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	e002      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	05c0      	lsls	r0, r0, #23
 8000fa6:	4328      	orrs	r0, r5
 8000fa8:	07e4      	lsls	r4, r4, #31
 8000faa:	4320      	orrs	r0, r4
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	2b99      	cmp	r3, #153	; 0x99
 8000fb0:	dd0c      	ble.n	8000fcc <__aeabi_i2f+0x5c>
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	1a12      	subs	r2, r2, r0
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	40d0      	lsrs	r0, r2
 8000fba:	0002      	movs	r2, r0
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	301b      	adds	r0, #27
 8000fc0:	4085      	lsls	r5, r0
 8000fc2:	0028      	movs	r0, r5
 8000fc4:	1e45      	subs	r5, r0, #1
 8000fc6:	41a8      	sbcs	r0, r5
 8000fc8:	4302      	orrs	r2, r0
 8000fca:	0015      	movs	r5, r2
 8000fcc:	2905      	cmp	r1, #5
 8000fce:	dc16      	bgt.n	8000ffe <__aeabi_i2f+0x8e>
 8000fd0:	002a      	movs	r2, r5
 8000fd2:	480f      	ldr	r0, [pc, #60]	; (8001010 <__aeabi_i2f+0xa0>)
 8000fd4:	4002      	ands	r2, r0
 8000fd6:	076e      	lsls	r6, r5, #29
 8000fd8:	d009      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8000fda:	260f      	movs	r6, #15
 8000fdc:	4035      	ands	r5, r6
 8000fde:	2d04      	cmp	r5, #4
 8000fe0:	d005      	beq.n	8000fee <__aeabi_i2f+0x7e>
 8000fe2:	3204      	adds	r2, #4
 8000fe4:	0155      	lsls	r5, r2, #5
 8000fe6:	d502      	bpl.n	8000fee <__aeabi_i2f+0x7e>
 8000fe8:	239f      	movs	r3, #159	; 0x9f
 8000fea:	4002      	ands	r2, r0
 8000fec:	1a5b      	subs	r3, r3, r1
 8000fee:	0192      	lsls	r2, r2, #6
 8000ff0:	0a55      	lsrs	r5, r2, #9
 8000ff2:	b2d8      	uxtb	r0, r3
 8000ff4:	e7d6      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000ff6:	026d      	lsls	r5, r5, #9
 8000ff8:	2096      	movs	r0, #150	; 0x96
 8000ffa:	0a6d      	lsrs	r5, r5, #9
 8000ffc:	e7d2      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000ffe:	1f4a      	subs	r2, r1, #5
 8001000:	4095      	lsls	r5, r2
 8001002:	002a      	movs	r2, r5
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <__aeabi_i2f+0xa0>)
 8001006:	4002      	ands	r2, r0
 8001008:	076e      	lsls	r6, r5, #29
 800100a:	d0f0      	beq.n	8000fee <__aeabi_i2f+0x7e>
 800100c:	e7e5      	b.n	8000fda <__aeabi_i2f+0x6a>
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	fbffffff 	.word	0xfbffffff

08001014 <__aeabi_dadd>:
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	464f      	mov	r7, r9
 8001018:	4646      	mov	r6, r8
 800101a:	46d6      	mov	lr, sl
 800101c:	0004      	movs	r4, r0
 800101e:	b5c0      	push	{r6, r7, lr}
 8001020:	001f      	movs	r7, r3
 8001022:	030b      	lsls	r3, r1, #12
 8001024:	0010      	movs	r0, r2
 8001026:	004e      	lsls	r6, r1, #1
 8001028:	0a5b      	lsrs	r3, r3, #9
 800102a:	0fcd      	lsrs	r5, r1, #31
 800102c:	0f61      	lsrs	r1, r4, #29
 800102e:	007a      	lsls	r2, r7, #1
 8001030:	4319      	orrs	r1, r3
 8001032:	00e3      	lsls	r3, r4, #3
 8001034:	033c      	lsls	r4, r7, #12
 8001036:	0fff      	lsrs	r7, r7, #31
 8001038:	46bc      	mov	ip, r7
 800103a:	0a64      	lsrs	r4, r4, #9
 800103c:	0f47      	lsrs	r7, r0, #29
 800103e:	4327      	orrs	r7, r4
 8001040:	0d76      	lsrs	r6, r6, #21
 8001042:	0d52      	lsrs	r2, r2, #21
 8001044:	00c0      	lsls	r0, r0, #3
 8001046:	46b9      	mov	r9, r7
 8001048:	4680      	mov	r8, r0
 800104a:	1ab7      	subs	r7, r6, r2
 800104c:	4565      	cmp	r5, ip
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x3e>
 8001050:	e09b      	b.n	800118a <__aeabi_dadd+0x176>
 8001052:	2f00      	cmp	r7, #0
 8001054:	dc00      	bgt.n	8001058 <__aeabi_dadd+0x44>
 8001056:	e084      	b.n	8001162 <__aeabi_dadd+0x14e>
 8001058:	2a00      	cmp	r2, #0
 800105a:	d100      	bne.n	800105e <__aeabi_dadd+0x4a>
 800105c:	e0be      	b.n	80011dc <__aeabi_dadd+0x1c8>
 800105e:	4ac8      	ldr	r2, [pc, #800]	; (8001380 <__aeabi_dadd+0x36c>)
 8001060:	4296      	cmp	r6, r2
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x52>
 8001064:	e124      	b.n	80012b0 <__aeabi_dadd+0x29c>
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	464c      	mov	r4, r9
 800106a:	0412      	lsls	r2, r2, #16
 800106c:	4314      	orrs	r4, r2
 800106e:	46a1      	mov	r9, r4
 8001070:	2f38      	cmp	r7, #56	; 0x38
 8001072:	dd00      	ble.n	8001076 <__aeabi_dadd+0x62>
 8001074:	e167      	b.n	8001346 <__aeabi_dadd+0x332>
 8001076:	2f1f      	cmp	r7, #31
 8001078:	dd00      	ble.n	800107c <__aeabi_dadd+0x68>
 800107a:	e1d6      	b.n	800142a <__aeabi_dadd+0x416>
 800107c:	2220      	movs	r2, #32
 800107e:	464c      	mov	r4, r9
 8001080:	1bd2      	subs	r2, r2, r7
 8001082:	4094      	lsls	r4, r2
 8001084:	46a2      	mov	sl, r4
 8001086:	4644      	mov	r4, r8
 8001088:	40fc      	lsrs	r4, r7
 800108a:	0020      	movs	r0, r4
 800108c:	4654      	mov	r4, sl
 800108e:	4304      	orrs	r4, r0
 8001090:	4640      	mov	r0, r8
 8001092:	4090      	lsls	r0, r2
 8001094:	1e42      	subs	r2, r0, #1
 8001096:	4190      	sbcs	r0, r2
 8001098:	464a      	mov	r2, r9
 800109a:	40fa      	lsrs	r2, r7
 800109c:	4304      	orrs	r4, r0
 800109e:	1a89      	subs	r1, r1, r2
 80010a0:	1b1c      	subs	r4, r3, r4
 80010a2:	42a3      	cmp	r3, r4
 80010a4:	4192      	sbcs	r2, r2
 80010a6:	4252      	negs	r2, r2
 80010a8:	1a8b      	subs	r3, r1, r2
 80010aa:	469a      	mov	sl, r3
 80010ac:	4653      	mov	r3, sl
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	d400      	bmi.n	80010b4 <__aeabi_dadd+0xa0>
 80010b2:	e0d4      	b.n	800125e <__aeabi_dadd+0x24a>
 80010b4:	4653      	mov	r3, sl
 80010b6:	025a      	lsls	r2, r3, #9
 80010b8:	0a53      	lsrs	r3, r2, #9
 80010ba:	469a      	mov	sl, r3
 80010bc:	4653      	mov	r3, sl
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0xb0>
 80010c2:	e104      	b.n	80012ce <__aeabi_dadd+0x2ba>
 80010c4:	4650      	mov	r0, sl
 80010c6:	f001 febb 	bl	8002e40 <__clzsi2>
 80010ca:	0003      	movs	r3, r0
 80010cc:	3b08      	subs	r3, #8
 80010ce:	2220      	movs	r2, #32
 80010d0:	0020      	movs	r0, r4
 80010d2:	1ad2      	subs	r2, r2, r3
 80010d4:	4651      	mov	r1, sl
 80010d6:	40d0      	lsrs	r0, r2
 80010d8:	4099      	lsls	r1, r3
 80010da:	0002      	movs	r2, r0
 80010dc:	409c      	lsls	r4, r3
 80010de:	430a      	orrs	r2, r1
 80010e0:	42b3      	cmp	r3, r6
 80010e2:	da00      	bge.n	80010e6 <__aeabi_dadd+0xd2>
 80010e4:	e102      	b.n	80012ec <__aeabi_dadd+0x2d8>
 80010e6:	1b9b      	subs	r3, r3, r6
 80010e8:	1c59      	adds	r1, r3, #1
 80010ea:	291f      	cmp	r1, #31
 80010ec:	dd00      	ble.n	80010f0 <__aeabi_dadd+0xdc>
 80010ee:	e0a7      	b.n	8001240 <__aeabi_dadd+0x22c>
 80010f0:	2320      	movs	r3, #32
 80010f2:	0010      	movs	r0, r2
 80010f4:	0026      	movs	r6, r4
 80010f6:	1a5b      	subs	r3, r3, r1
 80010f8:	409c      	lsls	r4, r3
 80010fa:	4098      	lsls	r0, r3
 80010fc:	40ce      	lsrs	r6, r1
 80010fe:	40ca      	lsrs	r2, r1
 8001100:	1e63      	subs	r3, r4, #1
 8001102:	419c      	sbcs	r4, r3
 8001104:	4330      	orrs	r0, r6
 8001106:	4692      	mov	sl, r2
 8001108:	2600      	movs	r6, #0
 800110a:	4304      	orrs	r4, r0
 800110c:	0763      	lsls	r3, r4, #29
 800110e:	d009      	beq.n	8001124 <__aeabi_dadd+0x110>
 8001110:	230f      	movs	r3, #15
 8001112:	4023      	ands	r3, r4
 8001114:	2b04      	cmp	r3, #4
 8001116:	d005      	beq.n	8001124 <__aeabi_dadd+0x110>
 8001118:	1d23      	adds	r3, r4, #4
 800111a:	42a3      	cmp	r3, r4
 800111c:	41a4      	sbcs	r4, r4
 800111e:	4264      	negs	r4, r4
 8001120:	44a2      	add	sl, r4
 8001122:	001c      	movs	r4, r3
 8001124:	4653      	mov	r3, sl
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	d400      	bmi.n	800112c <__aeabi_dadd+0x118>
 800112a:	e09b      	b.n	8001264 <__aeabi_dadd+0x250>
 800112c:	4b94      	ldr	r3, [pc, #592]	; (8001380 <__aeabi_dadd+0x36c>)
 800112e:	3601      	adds	r6, #1
 8001130:	429e      	cmp	r6, r3
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x122>
 8001134:	e0b8      	b.n	80012a8 <__aeabi_dadd+0x294>
 8001136:	4653      	mov	r3, sl
 8001138:	4992      	ldr	r1, [pc, #584]	; (8001384 <__aeabi_dadd+0x370>)
 800113a:	08e4      	lsrs	r4, r4, #3
 800113c:	400b      	ands	r3, r1
 800113e:	0019      	movs	r1, r3
 8001140:	075b      	lsls	r3, r3, #29
 8001142:	4323      	orrs	r3, r4
 8001144:	0572      	lsls	r2, r6, #21
 8001146:	024c      	lsls	r4, r1, #9
 8001148:	0b24      	lsrs	r4, r4, #12
 800114a:	0d52      	lsrs	r2, r2, #21
 800114c:	0512      	lsls	r2, r2, #20
 800114e:	07ed      	lsls	r5, r5, #31
 8001150:	4322      	orrs	r2, r4
 8001152:	432a      	orrs	r2, r5
 8001154:	0018      	movs	r0, r3
 8001156:	0011      	movs	r1, r2
 8001158:	bce0      	pop	{r5, r6, r7}
 800115a:	46ba      	mov	sl, r7
 800115c:	46b1      	mov	r9, r6
 800115e:	46a8      	mov	r8, r5
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001162:	2f00      	cmp	r7, #0
 8001164:	d048      	beq.n	80011f8 <__aeabi_dadd+0x1e4>
 8001166:	1b97      	subs	r7, r2, r6
 8001168:	2e00      	cmp	r6, #0
 800116a:	d000      	beq.n	800116e <__aeabi_dadd+0x15a>
 800116c:	e10e      	b.n	800138c <__aeabi_dadd+0x378>
 800116e:	000c      	movs	r4, r1
 8001170:	431c      	orrs	r4, r3
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x162>
 8001174:	e1b7      	b.n	80014e6 <__aeabi_dadd+0x4d2>
 8001176:	1e7c      	subs	r4, r7, #1
 8001178:	2f01      	cmp	r7, #1
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x16a>
 800117c:	e226      	b.n	80015cc <__aeabi_dadd+0x5b8>
 800117e:	4d80      	ldr	r5, [pc, #512]	; (8001380 <__aeabi_dadd+0x36c>)
 8001180:	42af      	cmp	r7, r5
 8001182:	d100      	bne.n	8001186 <__aeabi_dadd+0x172>
 8001184:	e1d5      	b.n	8001532 <__aeabi_dadd+0x51e>
 8001186:	0027      	movs	r7, r4
 8001188:	e107      	b.n	800139a <__aeabi_dadd+0x386>
 800118a:	2f00      	cmp	r7, #0
 800118c:	dc00      	bgt.n	8001190 <__aeabi_dadd+0x17c>
 800118e:	e0b2      	b.n	80012f6 <__aeabi_dadd+0x2e2>
 8001190:	2a00      	cmp	r2, #0
 8001192:	d047      	beq.n	8001224 <__aeabi_dadd+0x210>
 8001194:	4a7a      	ldr	r2, [pc, #488]	; (8001380 <__aeabi_dadd+0x36c>)
 8001196:	4296      	cmp	r6, r2
 8001198:	d100      	bne.n	800119c <__aeabi_dadd+0x188>
 800119a:	e089      	b.n	80012b0 <__aeabi_dadd+0x29c>
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	464c      	mov	r4, r9
 80011a0:	0412      	lsls	r2, r2, #16
 80011a2:	4314      	orrs	r4, r2
 80011a4:	46a1      	mov	r9, r4
 80011a6:	2f38      	cmp	r7, #56	; 0x38
 80011a8:	dc6b      	bgt.n	8001282 <__aeabi_dadd+0x26e>
 80011aa:	2f1f      	cmp	r7, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_dadd+0x19c>
 80011ae:	e16e      	b.n	800148e <__aeabi_dadd+0x47a>
 80011b0:	003a      	movs	r2, r7
 80011b2:	4648      	mov	r0, r9
 80011b4:	3a20      	subs	r2, #32
 80011b6:	40d0      	lsrs	r0, r2
 80011b8:	4684      	mov	ip, r0
 80011ba:	2f20      	cmp	r7, #32
 80011bc:	d007      	beq.n	80011ce <__aeabi_dadd+0x1ba>
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	4648      	mov	r0, r9
 80011c2:	1bd2      	subs	r2, r2, r7
 80011c4:	4090      	lsls	r0, r2
 80011c6:	0002      	movs	r2, r0
 80011c8:	4640      	mov	r0, r8
 80011ca:	4310      	orrs	r0, r2
 80011cc:	4680      	mov	r8, r0
 80011ce:	4640      	mov	r0, r8
 80011d0:	1e42      	subs	r2, r0, #1
 80011d2:	4190      	sbcs	r0, r2
 80011d4:	4662      	mov	r2, ip
 80011d6:	0004      	movs	r4, r0
 80011d8:	4314      	orrs	r4, r2
 80011da:	e057      	b.n	800128c <__aeabi_dadd+0x278>
 80011dc:	464a      	mov	r2, r9
 80011de:	4302      	orrs	r2, r0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x1d0>
 80011e2:	e103      	b.n	80013ec <__aeabi_dadd+0x3d8>
 80011e4:	1e7a      	subs	r2, r7, #1
 80011e6:	2f01      	cmp	r7, #1
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x1d8>
 80011ea:	e193      	b.n	8001514 <__aeabi_dadd+0x500>
 80011ec:	4c64      	ldr	r4, [pc, #400]	; (8001380 <__aeabi_dadd+0x36c>)
 80011ee:	42a7      	cmp	r7, r4
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dadd+0x1e0>
 80011f2:	e18a      	b.n	800150a <__aeabi_dadd+0x4f6>
 80011f4:	0017      	movs	r7, r2
 80011f6:	e73b      	b.n	8001070 <__aeabi_dadd+0x5c>
 80011f8:	4c63      	ldr	r4, [pc, #396]	; (8001388 <__aeabi_dadd+0x374>)
 80011fa:	1c72      	adds	r2, r6, #1
 80011fc:	4222      	tst	r2, r4
 80011fe:	d000      	beq.n	8001202 <__aeabi_dadd+0x1ee>
 8001200:	e0e0      	b.n	80013c4 <__aeabi_dadd+0x3b0>
 8001202:	000a      	movs	r2, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	2e00      	cmp	r6, #0
 8001208:	d000      	beq.n	800120c <__aeabi_dadd+0x1f8>
 800120a:	e174      	b.n	80014f6 <__aeabi_dadd+0x4e2>
 800120c:	2a00      	cmp	r2, #0
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0x1fe>
 8001210:	e1d0      	b.n	80015b4 <__aeabi_dadd+0x5a0>
 8001212:	464a      	mov	r2, r9
 8001214:	4302      	orrs	r2, r0
 8001216:	d000      	beq.n	800121a <__aeabi_dadd+0x206>
 8001218:	e1e3      	b.n	80015e2 <__aeabi_dadd+0x5ce>
 800121a:	074a      	lsls	r2, r1, #29
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	4313      	orrs	r3, r2
 8001220:	08c9      	lsrs	r1, r1, #3
 8001222:	e029      	b.n	8001278 <__aeabi_dadd+0x264>
 8001224:	464a      	mov	r2, r9
 8001226:	4302      	orrs	r2, r0
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x218>
 800122a:	e17d      	b.n	8001528 <__aeabi_dadd+0x514>
 800122c:	1e7a      	subs	r2, r7, #1
 800122e:	2f01      	cmp	r7, #1
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x220>
 8001232:	e0e0      	b.n	80013f6 <__aeabi_dadd+0x3e2>
 8001234:	4c52      	ldr	r4, [pc, #328]	; (8001380 <__aeabi_dadd+0x36c>)
 8001236:	42a7      	cmp	r7, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x228>
 800123a:	e166      	b.n	800150a <__aeabi_dadd+0x4f6>
 800123c:	0017      	movs	r7, r2
 800123e:	e7b2      	b.n	80011a6 <__aeabi_dadd+0x192>
 8001240:	0010      	movs	r0, r2
 8001242:	3b1f      	subs	r3, #31
 8001244:	40d8      	lsrs	r0, r3
 8001246:	2920      	cmp	r1, #32
 8001248:	d003      	beq.n	8001252 <__aeabi_dadd+0x23e>
 800124a:	2340      	movs	r3, #64	; 0x40
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	409a      	lsls	r2, r3
 8001250:	4314      	orrs	r4, r2
 8001252:	1e63      	subs	r3, r4, #1
 8001254:	419c      	sbcs	r4, r3
 8001256:	2300      	movs	r3, #0
 8001258:	2600      	movs	r6, #0
 800125a:	469a      	mov	sl, r3
 800125c:	4304      	orrs	r4, r0
 800125e:	0763      	lsls	r3, r4, #29
 8001260:	d000      	beq.n	8001264 <__aeabi_dadd+0x250>
 8001262:	e755      	b.n	8001110 <__aeabi_dadd+0xfc>
 8001264:	4652      	mov	r2, sl
 8001266:	08e3      	lsrs	r3, r4, #3
 8001268:	0752      	lsls	r2, r2, #29
 800126a:	4313      	orrs	r3, r2
 800126c:	4652      	mov	r2, sl
 800126e:	0037      	movs	r7, r6
 8001270:	08d1      	lsrs	r1, r2, #3
 8001272:	4a43      	ldr	r2, [pc, #268]	; (8001380 <__aeabi_dadd+0x36c>)
 8001274:	4297      	cmp	r7, r2
 8001276:	d01f      	beq.n	80012b8 <__aeabi_dadd+0x2a4>
 8001278:	0309      	lsls	r1, r1, #12
 800127a:	057a      	lsls	r2, r7, #21
 800127c:	0b0c      	lsrs	r4, r1, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	e764      	b.n	800114c <__aeabi_dadd+0x138>
 8001282:	4642      	mov	r2, r8
 8001284:	464c      	mov	r4, r9
 8001286:	4314      	orrs	r4, r2
 8001288:	1e62      	subs	r2, r4, #1
 800128a:	4194      	sbcs	r4, r2
 800128c:	18e4      	adds	r4, r4, r3
 800128e:	429c      	cmp	r4, r3
 8001290:	4192      	sbcs	r2, r2
 8001292:	4252      	negs	r2, r2
 8001294:	4692      	mov	sl, r2
 8001296:	448a      	add	sl, r1
 8001298:	4653      	mov	r3, sl
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	d5df      	bpl.n	800125e <__aeabi_dadd+0x24a>
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <__aeabi_dadd+0x36c>)
 80012a0:	3601      	adds	r6, #1
 80012a2:	429e      	cmp	r6, r3
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x294>
 80012a6:	e0b3      	b.n	8001410 <__aeabi_dadd+0x3fc>
 80012a8:	0032      	movs	r2, r6
 80012aa:	2400      	movs	r4, #0
 80012ac:	2300      	movs	r3, #0
 80012ae:	e74d      	b.n	800114c <__aeabi_dadd+0x138>
 80012b0:	074a      	lsls	r2, r1, #29
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	08c9      	lsrs	r1, r1, #3
 80012b8:	001a      	movs	r2, r3
 80012ba:	430a      	orrs	r2, r1
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x2ac>
 80012be:	e200      	b.n	80016c2 <__aeabi_dadd+0x6ae>
 80012c0:	2480      	movs	r4, #128	; 0x80
 80012c2:	0324      	lsls	r4, r4, #12
 80012c4:	430c      	orrs	r4, r1
 80012c6:	0324      	lsls	r4, r4, #12
 80012c8:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <__aeabi_dadd+0x36c>)
 80012ca:	0b24      	lsrs	r4, r4, #12
 80012cc:	e73e      	b.n	800114c <__aeabi_dadd+0x138>
 80012ce:	0020      	movs	r0, r4
 80012d0:	f001 fdb6 	bl	8002e40 <__clzsi2>
 80012d4:	0003      	movs	r3, r0
 80012d6:	3318      	adds	r3, #24
 80012d8:	2b1f      	cmp	r3, #31
 80012da:	dc00      	bgt.n	80012de <__aeabi_dadd+0x2ca>
 80012dc:	e6f7      	b.n	80010ce <__aeabi_dadd+0xba>
 80012de:	0022      	movs	r2, r4
 80012e0:	3808      	subs	r0, #8
 80012e2:	4082      	lsls	r2, r0
 80012e4:	2400      	movs	r4, #0
 80012e6:	42b3      	cmp	r3, r6
 80012e8:	db00      	blt.n	80012ec <__aeabi_dadd+0x2d8>
 80012ea:	e6fc      	b.n	80010e6 <__aeabi_dadd+0xd2>
 80012ec:	1af6      	subs	r6, r6, r3
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <__aeabi_dadd+0x370>)
 80012f0:	401a      	ands	r2, r3
 80012f2:	4692      	mov	sl, r2
 80012f4:	e70a      	b.n	800110c <__aeabi_dadd+0xf8>
 80012f6:	2f00      	cmp	r7, #0
 80012f8:	d02b      	beq.n	8001352 <__aeabi_dadd+0x33e>
 80012fa:	1b97      	subs	r7, r2, r6
 80012fc:	2e00      	cmp	r6, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x2ee>
 8001300:	e0b8      	b.n	8001474 <__aeabi_dadd+0x460>
 8001302:	4c1f      	ldr	r4, [pc, #124]	; (8001380 <__aeabi_dadd+0x36c>)
 8001304:	42a2      	cmp	r2, r4
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x2f6>
 8001308:	e11c      	b.n	8001544 <__aeabi_dadd+0x530>
 800130a:	2480      	movs	r4, #128	; 0x80
 800130c:	0424      	lsls	r4, r4, #16
 800130e:	4321      	orrs	r1, r4
 8001310:	2f38      	cmp	r7, #56	; 0x38
 8001312:	dd00      	ble.n	8001316 <__aeabi_dadd+0x302>
 8001314:	e11e      	b.n	8001554 <__aeabi_dadd+0x540>
 8001316:	2f1f      	cmp	r7, #31
 8001318:	dd00      	ble.n	800131c <__aeabi_dadd+0x308>
 800131a:	e19e      	b.n	800165a <__aeabi_dadd+0x646>
 800131c:	2620      	movs	r6, #32
 800131e:	000c      	movs	r4, r1
 8001320:	1bf6      	subs	r6, r6, r7
 8001322:	0018      	movs	r0, r3
 8001324:	40b3      	lsls	r3, r6
 8001326:	40b4      	lsls	r4, r6
 8001328:	40f8      	lsrs	r0, r7
 800132a:	1e5e      	subs	r6, r3, #1
 800132c:	41b3      	sbcs	r3, r6
 800132e:	40f9      	lsrs	r1, r7
 8001330:	4304      	orrs	r4, r0
 8001332:	431c      	orrs	r4, r3
 8001334:	4489      	add	r9, r1
 8001336:	4444      	add	r4, r8
 8001338:	4544      	cmp	r4, r8
 800133a:	419b      	sbcs	r3, r3
 800133c:	425b      	negs	r3, r3
 800133e:	444b      	add	r3, r9
 8001340:	469a      	mov	sl, r3
 8001342:	0016      	movs	r6, r2
 8001344:	e7a8      	b.n	8001298 <__aeabi_dadd+0x284>
 8001346:	4642      	mov	r2, r8
 8001348:	464c      	mov	r4, r9
 800134a:	4314      	orrs	r4, r2
 800134c:	1e62      	subs	r2, r4, #1
 800134e:	4194      	sbcs	r4, r2
 8001350:	e6a6      	b.n	80010a0 <__aeabi_dadd+0x8c>
 8001352:	4c0d      	ldr	r4, [pc, #52]	; (8001388 <__aeabi_dadd+0x374>)
 8001354:	1c72      	adds	r2, r6, #1
 8001356:	4222      	tst	r2, r4
 8001358:	d000      	beq.n	800135c <__aeabi_dadd+0x348>
 800135a:	e0a8      	b.n	80014ae <__aeabi_dadd+0x49a>
 800135c:	000a      	movs	r2, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	2e00      	cmp	r6, #0
 8001362:	d000      	beq.n	8001366 <__aeabi_dadd+0x352>
 8001364:	e10a      	b.n	800157c <__aeabi_dadd+0x568>
 8001366:	2a00      	cmp	r2, #0
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x358>
 800136a:	e15e      	b.n	800162a <__aeabi_dadd+0x616>
 800136c:	464a      	mov	r2, r9
 800136e:	4302      	orrs	r2, r0
 8001370:	d000      	beq.n	8001374 <__aeabi_dadd+0x360>
 8001372:	e161      	b.n	8001638 <__aeabi_dadd+0x624>
 8001374:	074a      	lsls	r2, r1, #29
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	4313      	orrs	r3, r2
 800137a:	08c9      	lsrs	r1, r1, #3
 800137c:	e77c      	b.n	8001278 <__aeabi_dadd+0x264>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	000007ff 	.word	0x000007ff
 8001384:	ff7fffff 	.word	0xff7fffff
 8001388:	000007fe 	.word	0x000007fe
 800138c:	4ccf      	ldr	r4, [pc, #828]	; (80016cc <__aeabi_dadd+0x6b8>)
 800138e:	42a2      	cmp	r2, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x380>
 8001392:	e0ce      	b.n	8001532 <__aeabi_dadd+0x51e>
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	0424      	lsls	r4, r4, #16
 8001398:	4321      	orrs	r1, r4
 800139a:	2f38      	cmp	r7, #56	; 0x38
 800139c:	dc5b      	bgt.n	8001456 <__aeabi_dadd+0x442>
 800139e:	2f1f      	cmp	r7, #31
 80013a0:	dd00      	ble.n	80013a4 <__aeabi_dadd+0x390>
 80013a2:	e0dc      	b.n	800155e <__aeabi_dadd+0x54a>
 80013a4:	2520      	movs	r5, #32
 80013a6:	000c      	movs	r4, r1
 80013a8:	1bed      	subs	r5, r5, r7
 80013aa:	001e      	movs	r6, r3
 80013ac:	40ab      	lsls	r3, r5
 80013ae:	40ac      	lsls	r4, r5
 80013b0:	40fe      	lsrs	r6, r7
 80013b2:	1e5d      	subs	r5, r3, #1
 80013b4:	41ab      	sbcs	r3, r5
 80013b6:	4334      	orrs	r4, r6
 80013b8:	40f9      	lsrs	r1, r7
 80013ba:	431c      	orrs	r4, r3
 80013bc:	464b      	mov	r3, r9
 80013be:	1a5b      	subs	r3, r3, r1
 80013c0:	4699      	mov	r9, r3
 80013c2:	e04c      	b.n	800145e <__aeabi_dadd+0x44a>
 80013c4:	464a      	mov	r2, r9
 80013c6:	1a1c      	subs	r4, r3, r0
 80013c8:	1a88      	subs	r0, r1, r2
 80013ca:	42a3      	cmp	r3, r4
 80013cc:	4192      	sbcs	r2, r2
 80013ce:	4252      	negs	r2, r2
 80013d0:	4692      	mov	sl, r2
 80013d2:	0002      	movs	r2, r0
 80013d4:	4650      	mov	r0, sl
 80013d6:	1a12      	subs	r2, r2, r0
 80013d8:	4692      	mov	sl, r2
 80013da:	0212      	lsls	r2, r2, #8
 80013dc:	d478      	bmi.n	80014d0 <__aeabi_dadd+0x4bc>
 80013de:	4653      	mov	r3, sl
 80013e0:	4323      	orrs	r3, r4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_dadd+0x3d2>
 80013e4:	e66a      	b.n	80010bc <__aeabi_dadd+0xa8>
 80013e6:	2100      	movs	r1, #0
 80013e8:	2500      	movs	r5, #0
 80013ea:	e745      	b.n	8001278 <__aeabi_dadd+0x264>
 80013ec:	074a      	lsls	r2, r1, #29
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	08c9      	lsrs	r1, r1, #3
 80013f4:	e73d      	b.n	8001272 <__aeabi_dadd+0x25e>
 80013f6:	181c      	adds	r4, r3, r0
 80013f8:	429c      	cmp	r4, r3
 80013fa:	419b      	sbcs	r3, r3
 80013fc:	4449      	add	r1, r9
 80013fe:	468a      	mov	sl, r1
 8001400:	425b      	negs	r3, r3
 8001402:	449a      	add	sl, r3
 8001404:	4653      	mov	r3, sl
 8001406:	2601      	movs	r6, #1
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	d400      	bmi.n	800140e <__aeabi_dadd+0x3fa>
 800140c:	e727      	b.n	800125e <__aeabi_dadd+0x24a>
 800140e:	2602      	movs	r6, #2
 8001410:	4652      	mov	r2, sl
 8001412:	4baf      	ldr	r3, [pc, #700]	; (80016d0 <__aeabi_dadd+0x6bc>)
 8001414:	2101      	movs	r1, #1
 8001416:	401a      	ands	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	4021      	ands	r1, r4
 800141c:	0862      	lsrs	r2, r4, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	07dc      	lsls	r4, r3, #31
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	469a      	mov	sl, r3
 8001426:	4314      	orrs	r4, r2
 8001428:	e670      	b.n	800110c <__aeabi_dadd+0xf8>
 800142a:	003a      	movs	r2, r7
 800142c:	464c      	mov	r4, r9
 800142e:	3a20      	subs	r2, #32
 8001430:	40d4      	lsrs	r4, r2
 8001432:	46a4      	mov	ip, r4
 8001434:	2f20      	cmp	r7, #32
 8001436:	d007      	beq.n	8001448 <__aeabi_dadd+0x434>
 8001438:	2240      	movs	r2, #64	; 0x40
 800143a:	4648      	mov	r0, r9
 800143c:	1bd2      	subs	r2, r2, r7
 800143e:	4090      	lsls	r0, r2
 8001440:	0002      	movs	r2, r0
 8001442:	4640      	mov	r0, r8
 8001444:	4310      	orrs	r0, r2
 8001446:	4680      	mov	r8, r0
 8001448:	4640      	mov	r0, r8
 800144a:	1e42      	subs	r2, r0, #1
 800144c:	4190      	sbcs	r0, r2
 800144e:	4662      	mov	r2, ip
 8001450:	0004      	movs	r4, r0
 8001452:	4314      	orrs	r4, r2
 8001454:	e624      	b.n	80010a0 <__aeabi_dadd+0x8c>
 8001456:	4319      	orrs	r1, r3
 8001458:	000c      	movs	r4, r1
 800145a:	1e63      	subs	r3, r4, #1
 800145c:	419c      	sbcs	r4, r3
 800145e:	4643      	mov	r3, r8
 8001460:	1b1c      	subs	r4, r3, r4
 8001462:	45a0      	cmp	r8, r4
 8001464:	419b      	sbcs	r3, r3
 8001466:	4649      	mov	r1, r9
 8001468:	425b      	negs	r3, r3
 800146a:	1acb      	subs	r3, r1, r3
 800146c:	469a      	mov	sl, r3
 800146e:	4665      	mov	r5, ip
 8001470:	0016      	movs	r6, r2
 8001472:	e61b      	b.n	80010ac <__aeabi_dadd+0x98>
 8001474:	000c      	movs	r4, r1
 8001476:	431c      	orrs	r4, r3
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x468>
 800147a:	e0c7      	b.n	800160c <__aeabi_dadd+0x5f8>
 800147c:	1e7c      	subs	r4, r7, #1
 800147e:	2f01      	cmp	r7, #1
 8001480:	d100      	bne.n	8001484 <__aeabi_dadd+0x470>
 8001482:	e0f9      	b.n	8001678 <__aeabi_dadd+0x664>
 8001484:	4e91      	ldr	r6, [pc, #580]	; (80016cc <__aeabi_dadd+0x6b8>)
 8001486:	42b7      	cmp	r7, r6
 8001488:	d05c      	beq.n	8001544 <__aeabi_dadd+0x530>
 800148a:	0027      	movs	r7, r4
 800148c:	e740      	b.n	8001310 <__aeabi_dadd+0x2fc>
 800148e:	2220      	movs	r2, #32
 8001490:	464c      	mov	r4, r9
 8001492:	4640      	mov	r0, r8
 8001494:	1bd2      	subs	r2, r2, r7
 8001496:	4094      	lsls	r4, r2
 8001498:	40f8      	lsrs	r0, r7
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1889      	adds	r1, r1, r2
 80014ac:	e6ee      	b.n	800128c <__aeabi_dadd+0x278>
 80014ae:	4c87      	ldr	r4, [pc, #540]	; (80016cc <__aeabi_dadd+0x6b8>)
 80014b0:	42a2      	cmp	r2, r4
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dadd+0x4a2>
 80014b4:	e6f9      	b.n	80012aa <__aeabi_dadd+0x296>
 80014b6:	1818      	adds	r0, r3, r0
 80014b8:	4298      	cmp	r0, r3
 80014ba:	419b      	sbcs	r3, r3
 80014bc:	4449      	add	r1, r9
 80014be:	425b      	negs	r3, r3
 80014c0:	18cb      	adds	r3, r1, r3
 80014c2:	07dc      	lsls	r4, r3, #31
 80014c4:	0840      	lsrs	r0, r0, #1
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	469a      	mov	sl, r3
 80014ca:	0016      	movs	r6, r2
 80014cc:	4304      	orrs	r4, r0
 80014ce:	e6c6      	b.n	800125e <__aeabi_dadd+0x24a>
 80014d0:	4642      	mov	r2, r8
 80014d2:	1ad4      	subs	r4, r2, r3
 80014d4:	45a0      	cmp	r8, r4
 80014d6:	4180      	sbcs	r0, r0
 80014d8:	464b      	mov	r3, r9
 80014da:	4240      	negs	r0, r0
 80014dc:	1a59      	subs	r1, r3, r1
 80014de:	1a0b      	subs	r3, r1, r0
 80014e0:	469a      	mov	sl, r3
 80014e2:	4665      	mov	r5, ip
 80014e4:	e5ea      	b.n	80010bc <__aeabi_dadd+0xa8>
 80014e6:	464b      	mov	r3, r9
 80014e8:	464a      	mov	r2, r9
 80014ea:	08c0      	lsrs	r0, r0, #3
 80014ec:	075b      	lsls	r3, r3, #29
 80014ee:	4665      	mov	r5, ip
 80014f0:	4303      	orrs	r3, r0
 80014f2:	08d1      	lsrs	r1, r2, #3
 80014f4:	e6bd      	b.n	8001272 <__aeabi_dadd+0x25e>
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d000      	beq.n	80014fc <__aeabi_dadd+0x4e8>
 80014fa:	e08e      	b.n	800161a <__aeabi_dadd+0x606>
 80014fc:	464b      	mov	r3, r9
 80014fe:	4303      	orrs	r3, r0
 8001500:	d117      	bne.n	8001532 <__aeabi_dadd+0x51e>
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	2500      	movs	r5, #0
 8001506:	0309      	lsls	r1, r1, #12
 8001508:	e6da      	b.n	80012c0 <__aeabi_dadd+0x2ac>
 800150a:	074a      	lsls	r2, r1, #29
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	4313      	orrs	r3, r2
 8001510:	08c9      	lsrs	r1, r1, #3
 8001512:	e6d1      	b.n	80012b8 <__aeabi_dadd+0x2a4>
 8001514:	1a1c      	subs	r4, r3, r0
 8001516:	464a      	mov	r2, r9
 8001518:	42a3      	cmp	r3, r4
 800151a:	419b      	sbcs	r3, r3
 800151c:	1a89      	subs	r1, r1, r2
 800151e:	425b      	negs	r3, r3
 8001520:	1acb      	subs	r3, r1, r3
 8001522:	469a      	mov	sl, r3
 8001524:	2601      	movs	r6, #1
 8001526:	e5c1      	b.n	80010ac <__aeabi_dadd+0x98>
 8001528:	074a      	lsls	r2, r1, #29
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	4313      	orrs	r3, r2
 800152e:	08c9      	lsrs	r1, r1, #3
 8001530:	e69f      	b.n	8001272 <__aeabi_dadd+0x25e>
 8001532:	4643      	mov	r3, r8
 8001534:	08d8      	lsrs	r0, r3, #3
 8001536:	464b      	mov	r3, r9
 8001538:	464a      	mov	r2, r9
 800153a:	075b      	lsls	r3, r3, #29
 800153c:	4665      	mov	r5, ip
 800153e:	4303      	orrs	r3, r0
 8001540:	08d1      	lsrs	r1, r2, #3
 8001542:	e6b9      	b.n	80012b8 <__aeabi_dadd+0x2a4>
 8001544:	4643      	mov	r3, r8
 8001546:	08d8      	lsrs	r0, r3, #3
 8001548:	464b      	mov	r3, r9
 800154a:	464a      	mov	r2, r9
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4303      	orrs	r3, r0
 8001550:	08d1      	lsrs	r1, r2, #3
 8001552:	e6b1      	b.n	80012b8 <__aeabi_dadd+0x2a4>
 8001554:	4319      	orrs	r1, r3
 8001556:	000c      	movs	r4, r1
 8001558:	1e63      	subs	r3, r4, #1
 800155a:	419c      	sbcs	r4, r3
 800155c:	e6eb      	b.n	8001336 <__aeabi_dadd+0x322>
 800155e:	003c      	movs	r4, r7
 8001560:	000d      	movs	r5, r1
 8001562:	3c20      	subs	r4, #32
 8001564:	40e5      	lsrs	r5, r4
 8001566:	2f20      	cmp	r7, #32
 8001568:	d003      	beq.n	8001572 <__aeabi_dadd+0x55e>
 800156a:	2440      	movs	r4, #64	; 0x40
 800156c:	1be4      	subs	r4, r4, r7
 800156e:	40a1      	lsls	r1, r4
 8001570:	430b      	orrs	r3, r1
 8001572:	001c      	movs	r4, r3
 8001574:	1e63      	subs	r3, r4, #1
 8001576:	419c      	sbcs	r4, r3
 8001578:	432c      	orrs	r4, r5
 800157a:	e770      	b.n	800145e <__aeabi_dadd+0x44a>
 800157c:	2a00      	cmp	r2, #0
 800157e:	d0e1      	beq.n	8001544 <__aeabi_dadd+0x530>
 8001580:	464a      	mov	r2, r9
 8001582:	4302      	orrs	r2, r0
 8001584:	d0c1      	beq.n	800150a <__aeabi_dadd+0x4f6>
 8001586:	074a      	lsls	r2, r1, #29
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	4313      	orrs	r3, r2
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	08c9      	lsrs	r1, r1, #3
 8001590:	0312      	lsls	r2, r2, #12
 8001592:	4211      	tst	r1, r2
 8001594:	d008      	beq.n	80015a8 <__aeabi_dadd+0x594>
 8001596:	4648      	mov	r0, r9
 8001598:	08c4      	lsrs	r4, r0, #3
 800159a:	4214      	tst	r4, r2
 800159c:	d104      	bne.n	80015a8 <__aeabi_dadd+0x594>
 800159e:	4643      	mov	r3, r8
 80015a0:	0021      	movs	r1, r4
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	0742      	lsls	r2, r0, #29
 80015a6:	4313      	orrs	r3, r2
 80015a8:	0f5a      	lsrs	r2, r3, #29
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	0752      	lsls	r2, r2, #29
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	e681      	b.n	80012b8 <__aeabi_dadd+0x2a4>
 80015b4:	464b      	mov	r3, r9
 80015b6:	4303      	orrs	r3, r0
 80015b8:	d100      	bne.n	80015bc <__aeabi_dadd+0x5a8>
 80015ba:	e714      	b.n	80013e6 <__aeabi_dadd+0x3d2>
 80015bc:	464b      	mov	r3, r9
 80015be:	464a      	mov	r2, r9
 80015c0:	08c0      	lsrs	r0, r0, #3
 80015c2:	075b      	lsls	r3, r3, #29
 80015c4:	4665      	mov	r5, ip
 80015c6:	4303      	orrs	r3, r0
 80015c8:	08d1      	lsrs	r1, r2, #3
 80015ca:	e655      	b.n	8001278 <__aeabi_dadd+0x264>
 80015cc:	1ac4      	subs	r4, r0, r3
 80015ce:	45a0      	cmp	r8, r4
 80015d0:	4180      	sbcs	r0, r0
 80015d2:	464b      	mov	r3, r9
 80015d4:	4240      	negs	r0, r0
 80015d6:	1a59      	subs	r1, r3, r1
 80015d8:	1a0b      	subs	r3, r1, r0
 80015da:	469a      	mov	sl, r3
 80015dc:	4665      	mov	r5, ip
 80015de:	2601      	movs	r6, #1
 80015e0:	e564      	b.n	80010ac <__aeabi_dadd+0x98>
 80015e2:	1a1c      	subs	r4, r3, r0
 80015e4:	464a      	mov	r2, r9
 80015e6:	42a3      	cmp	r3, r4
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	1a8a      	subs	r2, r1, r2
 80015ec:	4240      	negs	r0, r0
 80015ee:	1a12      	subs	r2, r2, r0
 80015f0:	4692      	mov	sl, r2
 80015f2:	0212      	lsls	r2, r2, #8
 80015f4:	d549      	bpl.n	800168a <__aeabi_dadd+0x676>
 80015f6:	4642      	mov	r2, r8
 80015f8:	1ad4      	subs	r4, r2, r3
 80015fa:	45a0      	cmp	r8, r4
 80015fc:	4180      	sbcs	r0, r0
 80015fe:	464b      	mov	r3, r9
 8001600:	4240      	negs	r0, r0
 8001602:	1a59      	subs	r1, r3, r1
 8001604:	1a0b      	subs	r3, r1, r0
 8001606:	469a      	mov	sl, r3
 8001608:	4665      	mov	r5, ip
 800160a:	e57f      	b.n	800110c <__aeabi_dadd+0xf8>
 800160c:	464b      	mov	r3, r9
 800160e:	464a      	mov	r2, r9
 8001610:	08c0      	lsrs	r0, r0, #3
 8001612:	075b      	lsls	r3, r3, #29
 8001614:	4303      	orrs	r3, r0
 8001616:	08d1      	lsrs	r1, r2, #3
 8001618:	e62b      	b.n	8001272 <__aeabi_dadd+0x25e>
 800161a:	464a      	mov	r2, r9
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	4302      	orrs	r2, r0
 8001620:	d138      	bne.n	8001694 <__aeabi_dadd+0x680>
 8001622:	074a      	lsls	r2, r1, #29
 8001624:	4313      	orrs	r3, r2
 8001626:	08c9      	lsrs	r1, r1, #3
 8001628:	e646      	b.n	80012b8 <__aeabi_dadd+0x2a4>
 800162a:	464b      	mov	r3, r9
 800162c:	464a      	mov	r2, r9
 800162e:	08c0      	lsrs	r0, r0, #3
 8001630:	075b      	lsls	r3, r3, #29
 8001632:	4303      	orrs	r3, r0
 8001634:	08d1      	lsrs	r1, r2, #3
 8001636:	e61f      	b.n	8001278 <__aeabi_dadd+0x264>
 8001638:	181c      	adds	r4, r3, r0
 800163a:	429c      	cmp	r4, r3
 800163c:	419b      	sbcs	r3, r3
 800163e:	4449      	add	r1, r9
 8001640:	468a      	mov	sl, r1
 8001642:	425b      	negs	r3, r3
 8001644:	449a      	add	sl, r3
 8001646:	4653      	mov	r3, sl
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	d400      	bmi.n	800164e <__aeabi_dadd+0x63a>
 800164c:	e607      	b.n	800125e <__aeabi_dadd+0x24a>
 800164e:	4652      	mov	r2, sl
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <__aeabi_dadd+0x6bc>)
 8001652:	2601      	movs	r6, #1
 8001654:	401a      	ands	r2, r3
 8001656:	4692      	mov	sl, r2
 8001658:	e601      	b.n	800125e <__aeabi_dadd+0x24a>
 800165a:	003c      	movs	r4, r7
 800165c:	000e      	movs	r6, r1
 800165e:	3c20      	subs	r4, #32
 8001660:	40e6      	lsrs	r6, r4
 8001662:	2f20      	cmp	r7, #32
 8001664:	d003      	beq.n	800166e <__aeabi_dadd+0x65a>
 8001666:	2440      	movs	r4, #64	; 0x40
 8001668:	1be4      	subs	r4, r4, r7
 800166a:	40a1      	lsls	r1, r4
 800166c:	430b      	orrs	r3, r1
 800166e:	001c      	movs	r4, r3
 8001670:	1e63      	subs	r3, r4, #1
 8001672:	419c      	sbcs	r4, r3
 8001674:	4334      	orrs	r4, r6
 8001676:	e65e      	b.n	8001336 <__aeabi_dadd+0x322>
 8001678:	4443      	add	r3, r8
 800167a:	4283      	cmp	r3, r0
 800167c:	4180      	sbcs	r0, r0
 800167e:	4449      	add	r1, r9
 8001680:	468a      	mov	sl, r1
 8001682:	4240      	negs	r0, r0
 8001684:	001c      	movs	r4, r3
 8001686:	4482      	add	sl, r0
 8001688:	e6bc      	b.n	8001404 <__aeabi_dadd+0x3f0>
 800168a:	4653      	mov	r3, sl
 800168c:	4323      	orrs	r3, r4
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x67e>
 8001690:	e6a9      	b.n	80013e6 <__aeabi_dadd+0x3d2>
 8001692:	e5e4      	b.n	800125e <__aeabi_dadd+0x24a>
 8001694:	074a      	lsls	r2, r1, #29
 8001696:	4313      	orrs	r3, r2
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	08c9      	lsrs	r1, r1, #3
 800169c:	0312      	lsls	r2, r2, #12
 800169e:	4211      	tst	r1, r2
 80016a0:	d009      	beq.n	80016b6 <__aeabi_dadd+0x6a2>
 80016a2:	4648      	mov	r0, r9
 80016a4:	08c4      	lsrs	r4, r0, #3
 80016a6:	4214      	tst	r4, r2
 80016a8:	d105      	bne.n	80016b6 <__aeabi_dadd+0x6a2>
 80016aa:	4643      	mov	r3, r8
 80016ac:	4665      	mov	r5, ip
 80016ae:	0021      	movs	r1, r4
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	0742      	lsls	r2, r0, #29
 80016b4:	4313      	orrs	r3, r2
 80016b6:	0f5a      	lsrs	r2, r3, #29
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	0752      	lsls	r2, r2, #29
 80016be:	4313      	orrs	r3, r2
 80016c0:	e5fa      	b.n	80012b8 <__aeabi_dadd+0x2a4>
 80016c2:	2300      	movs	r3, #0
 80016c4:	4a01      	ldr	r2, [pc, #4]	; (80016cc <__aeabi_dadd+0x6b8>)
 80016c6:	001c      	movs	r4, r3
 80016c8:	e540      	b.n	800114c <__aeabi_dadd+0x138>
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	000007ff 	.word	0x000007ff
 80016d0:	ff7fffff 	.word	0xff7fffff

080016d4 <__aeabi_ddiv>:
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	4657      	mov	r7, sl
 80016d8:	464e      	mov	r6, r9
 80016da:	4645      	mov	r5, r8
 80016dc:	46de      	mov	lr, fp
 80016de:	b5e0      	push	{r5, r6, r7, lr}
 80016e0:	030c      	lsls	r4, r1, #12
 80016e2:	001f      	movs	r7, r3
 80016e4:	004b      	lsls	r3, r1, #1
 80016e6:	4681      	mov	r9, r0
 80016e8:	4692      	mov	sl, r2
 80016ea:	0005      	movs	r5, r0
 80016ec:	b085      	sub	sp, #20
 80016ee:	0b24      	lsrs	r4, r4, #12
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	0fce      	lsrs	r6, r1, #31
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d100      	bne.n	80016fa <__aeabi_ddiv+0x26>
 80016f8:	e152      	b.n	80019a0 <__aeabi_ddiv+0x2cc>
 80016fa:	4ad2      	ldr	r2, [pc, #840]	; (8001a44 <__aeabi_ddiv+0x370>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d100      	bne.n	8001702 <__aeabi_ddiv+0x2e>
 8001700:	e16e      	b.n	80019e0 <__aeabi_ddiv+0x30c>
 8001702:	0f42      	lsrs	r2, r0, #29
 8001704:	00e4      	lsls	r4, r4, #3
 8001706:	4314      	orrs	r4, r2
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	0412      	lsls	r2, r2, #16
 800170c:	4322      	orrs	r2, r4
 800170e:	4690      	mov	r8, r2
 8001710:	4acd      	ldr	r2, [pc, #820]	; (8001a48 <__aeabi_ddiv+0x374>)
 8001712:	00c5      	lsls	r5, r0, #3
 8001714:	4693      	mov	fp, r2
 8001716:	449b      	add	fp, r3
 8001718:	2300      	movs	r3, #0
 800171a:	4699      	mov	r9, r3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	033c      	lsls	r4, r7, #12
 8001720:	007b      	lsls	r3, r7, #1
 8001722:	4650      	mov	r0, sl
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	0fff      	lsrs	r7, r7, #31
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x5c>
 800172e:	e11a      	b.n	8001966 <__aeabi_ddiv+0x292>
 8001730:	4ac4      	ldr	r2, [pc, #784]	; (8001a44 <__aeabi_ddiv+0x370>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d100      	bne.n	8001738 <__aeabi_ddiv+0x64>
 8001736:	e15e      	b.n	80019f6 <__aeabi_ddiv+0x322>
 8001738:	0f42      	lsrs	r2, r0, #29
 800173a:	00e4      	lsls	r4, r4, #3
 800173c:	4322      	orrs	r2, r4
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	0424      	lsls	r4, r4, #16
 8001742:	4314      	orrs	r4, r2
 8001744:	4ac0      	ldr	r2, [pc, #768]	; (8001a48 <__aeabi_ddiv+0x374>)
 8001746:	00c1      	lsls	r1, r0, #3
 8001748:	4694      	mov	ip, r2
 800174a:	465a      	mov	r2, fp
 800174c:	4463      	add	r3, ip
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	469b      	mov	fp, r3
 8001752:	2000      	movs	r0, #0
 8001754:	0033      	movs	r3, r6
 8001756:	407b      	eors	r3, r7
 8001758:	469a      	mov	sl, r3
 800175a:	464b      	mov	r3, r9
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d827      	bhi.n	80017b0 <__aeabi_ddiv+0xdc>
 8001760:	4aba      	ldr	r2, [pc, #744]	; (8001a4c <__aeabi_ddiv+0x378>)
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	58d3      	ldr	r3, [r2, r3]
 8001766:	469f      	mov	pc, r3
 8001768:	46b2      	mov	sl, r6
 800176a:	9b00      	ldr	r3, [sp, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d016      	beq.n	800179e <__aeabi_ddiv+0xca>
 8001770:	2b03      	cmp	r3, #3
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0xa2>
 8001774:	e287      	b.n	8001c86 <__aeabi_ddiv+0x5b2>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d000      	beq.n	800177c <__aeabi_ddiv+0xa8>
 800177a:	e0d5      	b.n	8001928 <__aeabi_ddiv+0x254>
 800177c:	2300      	movs	r3, #0
 800177e:	2200      	movs	r2, #0
 8001780:	2500      	movs	r5, #0
 8001782:	051b      	lsls	r3, r3, #20
 8001784:	4313      	orrs	r3, r2
 8001786:	4652      	mov	r2, sl
 8001788:	07d2      	lsls	r2, r2, #31
 800178a:	4313      	orrs	r3, r2
 800178c:	0028      	movs	r0, r5
 800178e:	0019      	movs	r1, r3
 8001790:	b005      	add	sp, #20
 8001792:	bcf0      	pop	{r4, r5, r6, r7}
 8001794:	46bb      	mov	fp, r7
 8001796:	46b2      	mov	sl, r6
 8001798:	46a9      	mov	r9, r5
 800179a:	46a0      	mov	r8, r4
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179e:	2200      	movs	r2, #0
 80017a0:	2500      	movs	r5, #0
 80017a2:	4ba8      	ldr	r3, [pc, #672]	; (8001a44 <__aeabi_ddiv+0x370>)
 80017a4:	e7ed      	b.n	8001782 <__aeabi_ddiv+0xae>
 80017a6:	46ba      	mov	sl, r7
 80017a8:	46a0      	mov	r8, r4
 80017aa:	000d      	movs	r5, r1
 80017ac:	9000      	str	r0, [sp, #0]
 80017ae:	e7dc      	b.n	800176a <__aeabi_ddiv+0x96>
 80017b0:	4544      	cmp	r4, r8
 80017b2:	d200      	bcs.n	80017b6 <__aeabi_ddiv+0xe2>
 80017b4:	e1c4      	b.n	8001b40 <__aeabi_ddiv+0x46c>
 80017b6:	d100      	bne.n	80017ba <__aeabi_ddiv+0xe6>
 80017b8:	e1bf      	b.n	8001b3a <__aeabi_ddiv+0x466>
 80017ba:	2301      	movs	r3, #1
 80017bc:	425b      	negs	r3, r3
 80017be:	469c      	mov	ip, r3
 80017c0:	002e      	movs	r6, r5
 80017c2:	4640      	mov	r0, r8
 80017c4:	2500      	movs	r5, #0
 80017c6:	44e3      	add	fp, ip
 80017c8:	0223      	lsls	r3, r4, #8
 80017ca:	0e0c      	lsrs	r4, r1, #24
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	4699      	mov	r9, r3
 80017d2:	0423      	lsls	r3, r4, #16
 80017d4:	020a      	lsls	r2, r1, #8
 80017d6:	0c1f      	lsrs	r7, r3, #16
 80017d8:	4649      	mov	r1, r9
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	9701      	str	r7, [sp, #4]
 80017de:	f7fe fd35 	bl	800024c <__aeabi_uidivmod>
 80017e2:	0002      	movs	r2, r0
 80017e4:	437a      	muls	r2, r7
 80017e6:	040b      	lsls	r3, r1, #16
 80017e8:	0c31      	lsrs	r1, r6, #16
 80017ea:	4680      	mov	r8, r0
 80017ec:	4319      	orrs	r1, r3
 80017ee:	428a      	cmp	r2, r1
 80017f0:	d907      	bls.n	8001802 <__aeabi_ddiv+0x12e>
 80017f2:	2301      	movs	r3, #1
 80017f4:	425b      	negs	r3, r3
 80017f6:	469c      	mov	ip, r3
 80017f8:	1909      	adds	r1, r1, r4
 80017fa:	44e0      	add	r8, ip
 80017fc:	428c      	cmp	r4, r1
 80017fe:	d800      	bhi.n	8001802 <__aeabi_ddiv+0x12e>
 8001800:	e201      	b.n	8001c06 <__aeabi_ddiv+0x532>
 8001802:	1a88      	subs	r0, r1, r2
 8001804:	4649      	mov	r1, r9
 8001806:	f7fe fd21 	bl	800024c <__aeabi_uidivmod>
 800180a:	9a01      	ldr	r2, [sp, #4]
 800180c:	0436      	lsls	r6, r6, #16
 800180e:	4342      	muls	r2, r0
 8001810:	0409      	lsls	r1, r1, #16
 8001812:	0c36      	lsrs	r6, r6, #16
 8001814:	0003      	movs	r3, r0
 8001816:	430e      	orrs	r6, r1
 8001818:	42b2      	cmp	r2, r6
 800181a:	d904      	bls.n	8001826 <__aeabi_ddiv+0x152>
 800181c:	1936      	adds	r6, r6, r4
 800181e:	3b01      	subs	r3, #1
 8001820:	42b4      	cmp	r4, r6
 8001822:	d800      	bhi.n	8001826 <__aeabi_ddiv+0x152>
 8001824:	e1e9      	b.n	8001bfa <__aeabi_ddiv+0x526>
 8001826:	1ab0      	subs	r0, r6, r2
 8001828:	4642      	mov	r2, r8
 800182a:	9e00      	ldr	r6, [sp, #0]
 800182c:	0412      	lsls	r2, r2, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	0c33      	lsrs	r3, r6, #16
 8001832:	001f      	movs	r7, r3
 8001834:	0c11      	lsrs	r1, r2, #16
 8001836:	4690      	mov	r8, r2
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	0413      	lsls	r3, r2, #16
 800183c:	0432      	lsls	r2, r6, #16
 800183e:	0c16      	lsrs	r6, r2, #16
 8001840:	0032      	movs	r2, r6
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	435a      	muls	r2, r3
 8001846:	9603      	str	r6, [sp, #12]
 8001848:	437b      	muls	r3, r7
 800184a:	434e      	muls	r6, r1
 800184c:	4379      	muls	r1, r7
 800184e:	0c17      	lsrs	r7, r2, #16
 8001850:	46bc      	mov	ip, r7
 8001852:	199b      	adds	r3, r3, r6
 8001854:	4463      	add	r3, ip
 8001856:	429e      	cmp	r6, r3
 8001858:	d903      	bls.n	8001862 <__aeabi_ddiv+0x18e>
 800185a:	2680      	movs	r6, #128	; 0x80
 800185c:	0276      	lsls	r6, r6, #9
 800185e:	46b4      	mov	ip, r6
 8001860:	4461      	add	r1, ip
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	1871      	adds	r1, r6, r1
 8001866:	0416      	lsls	r6, r2, #16
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	0c36      	lsrs	r6, r6, #16
 800186c:	199e      	adds	r6, r3, r6
 800186e:	4288      	cmp	r0, r1
 8001870:	d302      	bcc.n	8001878 <__aeabi_ddiv+0x1a4>
 8001872:	d112      	bne.n	800189a <__aeabi_ddiv+0x1c6>
 8001874:	42b5      	cmp	r5, r6
 8001876:	d210      	bcs.n	800189a <__aeabi_ddiv+0x1c6>
 8001878:	4643      	mov	r3, r8
 800187a:	1e5a      	subs	r2, r3, #1
 800187c:	9b00      	ldr	r3, [sp, #0]
 800187e:	469c      	mov	ip, r3
 8001880:	4465      	add	r5, ip
 8001882:	001f      	movs	r7, r3
 8001884:	429d      	cmp	r5, r3
 8001886:	419b      	sbcs	r3, r3
 8001888:	425b      	negs	r3, r3
 800188a:	191b      	adds	r3, r3, r4
 800188c:	18c0      	adds	r0, r0, r3
 800188e:	4284      	cmp	r4, r0
 8001890:	d200      	bcs.n	8001894 <__aeabi_ddiv+0x1c0>
 8001892:	e19e      	b.n	8001bd2 <__aeabi_ddiv+0x4fe>
 8001894:	d100      	bne.n	8001898 <__aeabi_ddiv+0x1c4>
 8001896:	e199      	b.n	8001bcc <__aeabi_ddiv+0x4f8>
 8001898:	4690      	mov	r8, r2
 800189a:	1bae      	subs	r6, r5, r6
 800189c:	42b5      	cmp	r5, r6
 800189e:	41ad      	sbcs	r5, r5
 80018a0:	1a40      	subs	r0, r0, r1
 80018a2:	426d      	negs	r5, r5
 80018a4:	1b40      	subs	r0, r0, r5
 80018a6:	4284      	cmp	r4, r0
 80018a8:	d100      	bne.n	80018ac <__aeabi_ddiv+0x1d8>
 80018aa:	e1d2      	b.n	8001c52 <__aeabi_ddiv+0x57e>
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe fccd 	bl	800024c <__aeabi_uidivmod>
 80018b2:	9a01      	ldr	r2, [sp, #4]
 80018b4:	040b      	lsls	r3, r1, #16
 80018b6:	4342      	muls	r2, r0
 80018b8:	0c31      	lsrs	r1, r6, #16
 80018ba:	0005      	movs	r5, r0
 80018bc:	4319      	orrs	r1, r3
 80018be:	428a      	cmp	r2, r1
 80018c0:	d900      	bls.n	80018c4 <__aeabi_ddiv+0x1f0>
 80018c2:	e16c      	b.n	8001b9e <__aeabi_ddiv+0x4ca>
 80018c4:	1a88      	subs	r0, r1, r2
 80018c6:	4649      	mov	r1, r9
 80018c8:	f7fe fcc0 	bl	800024c <__aeabi_uidivmod>
 80018cc:	9a01      	ldr	r2, [sp, #4]
 80018ce:	0436      	lsls	r6, r6, #16
 80018d0:	4342      	muls	r2, r0
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	0c36      	lsrs	r6, r6, #16
 80018d6:	0003      	movs	r3, r0
 80018d8:	430e      	orrs	r6, r1
 80018da:	42b2      	cmp	r2, r6
 80018dc:	d900      	bls.n	80018e0 <__aeabi_ddiv+0x20c>
 80018de:	e153      	b.n	8001b88 <__aeabi_ddiv+0x4b4>
 80018e0:	9803      	ldr	r0, [sp, #12]
 80018e2:	1ab6      	subs	r6, r6, r2
 80018e4:	0002      	movs	r2, r0
 80018e6:	042d      	lsls	r5, r5, #16
 80018e8:	431d      	orrs	r5, r3
 80018ea:	9f02      	ldr	r7, [sp, #8]
 80018ec:	042b      	lsls	r3, r5, #16
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	435a      	muls	r2, r3
 80018f2:	437b      	muls	r3, r7
 80018f4:	469c      	mov	ip, r3
 80018f6:	0c29      	lsrs	r1, r5, #16
 80018f8:	4348      	muls	r0, r1
 80018fa:	0c13      	lsrs	r3, r2, #16
 80018fc:	4484      	add	ip, r0
 80018fe:	4463      	add	r3, ip
 8001900:	4379      	muls	r1, r7
 8001902:	4298      	cmp	r0, r3
 8001904:	d903      	bls.n	800190e <__aeabi_ddiv+0x23a>
 8001906:	2080      	movs	r0, #128	; 0x80
 8001908:	0240      	lsls	r0, r0, #9
 800190a:	4684      	mov	ip, r0
 800190c:	4461      	add	r1, ip
 800190e:	0c18      	lsrs	r0, r3, #16
 8001910:	0412      	lsls	r2, r2, #16
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	0c12      	lsrs	r2, r2, #16
 8001916:	1840      	adds	r0, r0, r1
 8001918:	189b      	adds	r3, r3, r2
 800191a:	4286      	cmp	r6, r0
 800191c:	d200      	bcs.n	8001920 <__aeabi_ddiv+0x24c>
 800191e:	e100      	b.n	8001b22 <__aeabi_ddiv+0x44e>
 8001920:	d100      	bne.n	8001924 <__aeabi_ddiv+0x250>
 8001922:	e0fb      	b.n	8001b1c <__aeabi_ddiv+0x448>
 8001924:	2301      	movs	r3, #1
 8001926:	431d      	orrs	r5, r3
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <__aeabi_ddiv+0x37c>)
 800192a:	445b      	add	r3, fp
 800192c:	2b00      	cmp	r3, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_ddiv+0x25e>
 8001930:	e0aa      	b.n	8001a88 <__aeabi_ddiv+0x3b4>
 8001932:	076a      	lsls	r2, r5, #29
 8001934:	d000      	beq.n	8001938 <__aeabi_ddiv+0x264>
 8001936:	e13d      	b.n	8001bb4 <__aeabi_ddiv+0x4e0>
 8001938:	08e9      	lsrs	r1, r5, #3
 800193a:	4642      	mov	r2, r8
 800193c:	01d2      	lsls	r2, r2, #7
 800193e:	d506      	bpl.n	800194e <__aeabi_ddiv+0x27a>
 8001940:	4642      	mov	r2, r8
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <__aeabi_ddiv+0x380>)
 8001944:	401a      	ands	r2, r3
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	4690      	mov	r8, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	445b      	add	r3, fp
 800194e:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <__aeabi_ddiv+0x384>)
 8001950:	4293      	cmp	r3, r2
 8001952:	dd00      	ble.n	8001956 <__aeabi_ddiv+0x282>
 8001954:	e723      	b.n	800179e <__aeabi_ddiv+0xca>
 8001956:	4642      	mov	r2, r8
 8001958:	055b      	lsls	r3, r3, #21
 800195a:	0755      	lsls	r5, r2, #29
 800195c:	0252      	lsls	r2, r2, #9
 800195e:	430d      	orrs	r5, r1
 8001960:	0b12      	lsrs	r2, r2, #12
 8001962:	0d5b      	lsrs	r3, r3, #21
 8001964:	e70d      	b.n	8001782 <__aeabi_ddiv+0xae>
 8001966:	4651      	mov	r1, sl
 8001968:	4321      	orrs	r1, r4
 800196a:	d100      	bne.n	800196e <__aeabi_ddiv+0x29a>
 800196c:	e07c      	b.n	8001a68 <__aeabi_ddiv+0x394>
 800196e:	2c00      	cmp	r4, #0
 8001970:	d100      	bne.n	8001974 <__aeabi_ddiv+0x2a0>
 8001972:	e0fb      	b.n	8001b6c <__aeabi_ddiv+0x498>
 8001974:	0020      	movs	r0, r4
 8001976:	f001 fa63 	bl	8002e40 <__clzsi2>
 800197a:	0002      	movs	r2, r0
 800197c:	3a0b      	subs	r2, #11
 800197e:	231d      	movs	r3, #29
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	4652      	mov	r2, sl
 8001984:	0001      	movs	r1, r0
 8001986:	40da      	lsrs	r2, r3
 8001988:	4653      	mov	r3, sl
 800198a:	3908      	subs	r1, #8
 800198c:	408b      	lsls	r3, r1
 800198e:	408c      	lsls	r4, r1
 8001990:	0019      	movs	r1, r3
 8001992:	4314      	orrs	r4, r2
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <__aeabi_ddiv+0x388>)
 8001996:	4458      	add	r0, fp
 8001998:	469b      	mov	fp, r3
 800199a:	4483      	add	fp, r0
 800199c:	2000      	movs	r0, #0
 800199e:	e6d9      	b.n	8001754 <__aeabi_ddiv+0x80>
 80019a0:	0003      	movs	r3, r0
 80019a2:	4323      	orrs	r3, r4
 80019a4:	4698      	mov	r8, r3
 80019a6:	d044      	beq.n	8001a32 <__aeabi_ddiv+0x35e>
 80019a8:	2c00      	cmp	r4, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_ddiv+0x2da>
 80019ac:	e0cf      	b.n	8001b4e <__aeabi_ddiv+0x47a>
 80019ae:	0020      	movs	r0, r4
 80019b0:	f001 fa46 	bl	8002e40 <__clzsi2>
 80019b4:	0001      	movs	r1, r0
 80019b6:	0002      	movs	r2, r0
 80019b8:	390b      	subs	r1, #11
 80019ba:	231d      	movs	r3, #29
 80019bc:	1a5b      	subs	r3, r3, r1
 80019be:	4649      	mov	r1, r9
 80019c0:	0010      	movs	r0, r2
 80019c2:	40d9      	lsrs	r1, r3
 80019c4:	3808      	subs	r0, #8
 80019c6:	4084      	lsls	r4, r0
 80019c8:	000b      	movs	r3, r1
 80019ca:	464d      	mov	r5, r9
 80019cc:	4323      	orrs	r3, r4
 80019ce:	4698      	mov	r8, r3
 80019d0:	4085      	lsls	r5, r0
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <__aeabi_ddiv+0x38c>)
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	469b      	mov	fp, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	4699      	mov	r9, r3
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	e69e      	b.n	800171e <__aeabi_ddiv+0x4a>
 80019e0:	0002      	movs	r2, r0
 80019e2:	4322      	orrs	r2, r4
 80019e4:	4690      	mov	r8, r2
 80019e6:	d11d      	bne.n	8001a24 <__aeabi_ddiv+0x350>
 80019e8:	2208      	movs	r2, #8
 80019ea:	469b      	mov	fp, r3
 80019ec:	2302      	movs	r3, #2
 80019ee:	2500      	movs	r5, #0
 80019f0:	4691      	mov	r9, r2
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	e693      	b.n	800171e <__aeabi_ddiv+0x4a>
 80019f6:	4651      	mov	r1, sl
 80019f8:	4321      	orrs	r1, r4
 80019fa:	d109      	bne.n	8001a10 <__aeabi_ddiv+0x33c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	464a      	mov	r2, r9
 8001a00:	431a      	orrs	r2, r3
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <__aeabi_ddiv+0x390>)
 8001a04:	4691      	mov	r9, r2
 8001a06:	469c      	mov	ip, r3
 8001a08:	2400      	movs	r4, #0
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	44e3      	add	fp, ip
 8001a0e:	e6a1      	b.n	8001754 <__aeabi_ddiv+0x80>
 8001a10:	2303      	movs	r3, #3
 8001a12:	464a      	mov	r2, r9
 8001a14:	431a      	orrs	r2, r3
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <__aeabi_ddiv+0x390>)
 8001a18:	4691      	mov	r9, r2
 8001a1a:	469c      	mov	ip, r3
 8001a1c:	4651      	mov	r1, sl
 8001a1e:	2003      	movs	r0, #3
 8001a20:	44e3      	add	fp, ip
 8001a22:	e697      	b.n	8001754 <__aeabi_ddiv+0x80>
 8001a24:	220c      	movs	r2, #12
 8001a26:	469b      	mov	fp, r3
 8001a28:	2303      	movs	r3, #3
 8001a2a:	46a0      	mov	r8, r4
 8001a2c:	4691      	mov	r9, r2
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	e675      	b.n	800171e <__aeabi_ddiv+0x4a>
 8001a32:	2304      	movs	r3, #4
 8001a34:	4699      	mov	r9, r3
 8001a36:	2300      	movs	r3, #0
 8001a38:	469b      	mov	fp, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	2500      	movs	r5, #0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	e66d      	b.n	800171e <__aeabi_ddiv+0x4a>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	000007ff 	.word	0x000007ff
 8001a48:	fffffc01 	.word	0xfffffc01
 8001a4c:	08008c90 	.word	0x08008c90
 8001a50:	000003ff 	.word	0x000003ff
 8001a54:	feffffff 	.word	0xfeffffff
 8001a58:	000007fe 	.word	0x000007fe
 8001a5c:	000003f3 	.word	0x000003f3
 8001a60:	fffffc0d 	.word	0xfffffc0d
 8001a64:	fffff801 	.word	0xfffff801
 8001a68:	464a      	mov	r2, r9
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	4691      	mov	r9, r2
 8001a70:	2400      	movs	r4, #0
 8001a72:	2001      	movs	r0, #1
 8001a74:	e66e      	b.n	8001754 <__aeabi_ddiv+0x80>
 8001a76:	2300      	movs	r3, #0
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	469a      	mov	sl, r3
 8001a7c:	2500      	movs	r5, #0
 8001a7e:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <__aeabi_ddiv+0x5cc>)
 8001a80:	0312      	lsls	r2, r2, #12
 8001a82:	e67e      	b.n	8001782 <__aeabi_ddiv+0xae>
 8001a84:	2501      	movs	r5, #1
 8001a86:	426d      	negs	r5, r5
 8001a88:	2201      	movs	r2, #1
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	2a38      	cmp	r2, #56	; 0x38
 8001a8e:	dd00      	ble.n	8001a92 <__aeabi_ddiv+0x3be>
 8001a90:	e674      	b.n	800177c <__aeabi_ddiv+0xa8>
 8001a92:	2a1f      	cmp	r2, #31
 8001a94:	dc00      	bgt.n	8001a98 <__aeabi_ddiv+0x3c4>
 8001a96:	e0bd      	b.n	8001c14 <__aeabi_ddiv+0x540>
 8001a98:	211f      	movs	r1, #31
 8001a9a:	4249      	negs	r1, r1
 8001a9c:	1acb      	subs	r3, r1, r3
 8001a9e:	4641      	mov	r1, r8
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	000b      	movs	r3, r1
 8001aa4:	2a20      	cmp	r2, #32
 8001aa6:	d004      	beq.n	8001ab2 <__aeabi_ddiv+0x3de>
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	4a7e      	ldr	r2, [pc, #504]	; (8001ca4 <__aeabi_ddiv+0x5d0>)
 8001aac:	445a      	add	r2, fp
 8001aae:	4091      	lsls	r1, r2
 8001ab0:	430d      	orrs	r5, r1
 8001ab2:	0029      	movs	r1, r5
 8001ab4:	1e4a      	subs	r2, r1, #1
 8001ab6:	4191      	sbcs	r1, r2
 8001ab8:	4319      	orrs	r1, r3
 8001aba:	2307      	movs	r3, #7
 8001abc:	001d      	movs	r5, r3
 8001abe:	2200      	movs	r2, #0
 8001ac0:	400d      	ands	r5, r1
 8001ac2:	420b      	tst	r3, r1
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_ddiv+0x3f4>
 8001ac6:	e0d0      	b.n	8001c6a <__aeabi_ddiv+0x596>
 8001ac8:	220f      	movs	r2, #15
 8001aca:	2300      	movs	r3, #0
 8001acc:	400a      	ands	r2, r1
 8001ace:	2a04      	cmp	r2, #4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_ddiv+0x400>
 8001ad2:	e0c7      	b.n	8001c64 <__aeabi_ddiv+0x590>
 8001ad4:	1d0a      	adds	r2, r1, #4
 8001ad6:	428a      	cmp	r2, r1
 8001ad8:	4189      	sbcs	r1, r1
 8001ada:	4249      	negs	r1, r1
 8001adc:	185b      	adds	r3, r3, r1
 8001ade:	0011      	movs	r1, r2
 8001ae0:	021a      	lsls	r2, r3, #8
 8001ae2:	d400      	bmi.n	8001ae6 <__aeabi_ddiv+0x412>
 8001ae4:	e0be      	b.n	8001c64 <__aeabi_ddiv+0x590>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2500      	movs	r5, #0
 8001aec:	e649      	b.n	8001782 <__aeabi_ddiv+0xae>
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	4643      	mov	r3, r8
 8001af2:	0312      	lsls	r2, r2, #12
 8001af4:	4213      	tst	r3, r2
 8001af6:	d008      	beq.n	8001b0a <__aeabi_ddiv+0x436>
 8001af8:	4214      	tst	r4, r2
 8001afa:	d106      	bne.n	8001b0a <__aeabi_ddiv+0x436>
 8001afc:	4322      	orrs	r2, r4
 8001afe:	0312      	lsls	r2, r2, #12
 8001b00:	46ba      	mov	sl, r7
 8001b02:	000d      	movs	r5, r1
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <__aeabi_ddiv+0x5cc>)
 8001b06:	0b12      	lsrs	r2, r2, #12
 8001b08:	e63b      	b.n	8001782 <__aeabi_ddiv+0xae>
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	0312      	lsls	r2, r2, #12
 8001b10:	431a      	orrs	r2, r3
 8001b12:	0312      	lsls	r2, r2, #12
 8001b14:	46b2      	mov	sl, r6
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <__aeabi_ddiv+0x5cc>)
 8001b18:	0b12      	lsrs	r2, r2, #12
 8001b1a:	e632      	b.n	8001782 <__aeabi_ddiv+0xae>
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_ddiv+0x44e>
 8001b20:	e702      	b.n	8001928 <__aeabi_ddiv+0x254>
 8001b22:	19a6      	adds	r6, r4, r6
 8001b24:	1e6a      	subs	r2, r5, #1
 8001b26:	42a6      	cmp	r6, r4
 8001b28:	d200      	bcs.n	8001b2c <__aeabi_ddiv+0x458>
 8001b2a:	e089      	b.n	8001c40 <__aeabi_ddiv+0x56c>
 8001b2c:	4286      	cmp	r6, r0
 8001b2e:	d200      	bcs.n	8001b32 <__aeabi_ddiv+0x45e>
 8001b30:	e09f      	b.n	8001c72 <__aeabi_ddiv+0x59e>
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x462>
 8001b34:	e0af      	b.n	8001c96 <__aeabi_ddiv+0x5c2>
 8001b36:	0015      	movs	r5, r2
 8001b38:	e6f4      	b.n	8001924 <__aeabi_ddiv+0x250>
 8001b3a:	42a9      	cmp	r1, r5
 8001b3c:	d900      	bls.n	8001b40 <__aeabi_ddiv+0x46c>
 8001b3e:	e63c      	b.n	80017ba <__aeabi_ddiv+0xe6>
 8001b40:	4643      	mov	r3, r8
 8001b42:	07de      	lsls	r6, r3, #31
 8001b44:	0858      	lsrs	r0, r3, #1
 8001b46:	086b      	lsrs	r3, r5, #1
 8001b48:	431e      	orrs	r6, r3
 8001b4a:	07ed      	lsls	r5, r5, #31
 8001b4c:	e63c      	b.n	80017c8 <__aeabi_ddiv+0xf4>
 8001b4e:	f001 f977 	bl	8002e40 <__clzsi2>
 8001b52:	0001      	movs	r1, r0
 8001b54:	0002      	movs	r2, r0
 8001b56:	3115      	adds	r1, #21
 8001b58:	3220      	adds	r2, #32
 8001b5a:	291c      	cmp	r1, #28
 8001b5c:	dc00      	bgt.n	8001b60 <__aeabi_ddiv+0x48c>
 8001b5e:	e72c      	b.n	80019ba <__aeabi_ddiv+0x2e6>
 8001b60:	464b      	mov	r3, r9
 8001b62:	3808      	subs	r0, #8
 8001b64:	4083      	lsls	r3, r0
 8001b66:	2500      	movs	r5, #0
 8001b68:	4698      	mov	r8, r3
 8001b6a:	e732      	b.n	80019d2 <__aeabi_ddiv+0x2fe>
 8001b6c:	f001 f968 	bl	8002e40 <__clzsi2>
 8001b70:	0003      	movs	r3, r0
 8001b72:	001a      	movs	r2, r3
 8001b74:	3215      	adds	r2, #21
 8001b76:	3020      	adds	r0, #32
 8001b78:	2a1c      	cmp	r2, #28
 8001b7a:	dc00      	bgt.n	8001b7e <__aeabi_ddiv+0x4aa>
 8001b7c:	e6ff      	b.n	800197e <__aeabi_ddiv+0x2aa>
 8001b7e:	4654      	mov	r4, sl
 8001b80:	3b08      	subs	r3, #8
 8001b82:	2100      	movs	r1, #0
 8001b84:	409c      	lsls	r4, r3
 8001b86:	e705      	b.n	8001994 <__aeabi_ddiv+0x2c0>
 8001b88:	1936      	adds	r6, r6, r4
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	42b4      	cmp	r4, r6
 8001b8e:	d900      	bls.n	8001b92 <__aeabi_ddiv+0x4be>
 8001b90:	e6a6      	b.n	80018e0 <__aeabi_ddiv+0x20c>
 8001b92:	42b2      	cmp	r2, r6
 8001b94:	d800      	bhi.n	8001b98 <__aeabi_ddiv+0x4c4>
 8001b96:	e6a3      	b.n	80018e0 <__aeabi_ddiv+0x20c>
 8001b98:	1e83      	subs	r3, r0, #2
 8001b9a:	1936      	adds	r6, r6, r4
 8001b9c:	e6a0      	b.n	80018e0 <__aeabi_ddiv+0x20c>
 8001b9e:	1909      	adds	r1, r1, r4
 8001ba0:	3d01      	subs	r5, #1
 8001ba2:	428c      	cmp	r4, r1
 8001ba4:	d900      	bls.n	8001ba8 <__aeabi_ddiv+0x4d4>
 8001ba6:	e68d      	b.n	80018c4 <__aeabi_ddiv+0x1f0>
 8001ba8:	428a      	cmp	r2, r1
 8001baa:	d800      	bhi.n	8001bae <__aeabi_ddiv+0x4da>
 8001bac:	e68a      	b.n	80018c4 <__aeabi_ddiv+0x1f0>
 8001bae:	1e85      	subs	r5, r0, #2
 8001bb0:	1909      	adds	r1, r1, r4
 8001bb2:	e687      	b.n	80018c4 <__aeabi_ddiv+0x1f0>
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	402a      	ands	r2, r5
 8001bb8:	2a04      	cmp	r2, #4
 8001bba:	d100      	bne.n	8001bbe <__aeabi_ddiv+0x4ea>
 8001bbc:	e6bc      	b.n	8001938 <__aeabi_ddiv+0x264>
 8001bbe:	1d29      	adds	r1, r5, #4
 8001bc0:	42a9      	cmp	r1, r5
 8001bc2:	41ad      	sbcs	r5, r5
 8001bc4:	426d      	negs	r5, r5
 8001bc6:	08c9      	lsrs	r1, r1, #3
 8001bc8:	44a8      	add	r8, r5
 8001bca:	e6b6      	b.n	800193a <__aeabi_ddiv+0x266>
 8001bcc:	42af      	cmp	r7, r5
 8001bce:	d900      	bls.n	8001bd2 <__aeabi_ddiv+0x4fe>
 8001bd0:	e662      	b.n	8001898 <__aeabi_ddiv+0x1c4>
 8001bd2:	4281      	cmp	r1, r0
 8001bd4:	d804      	bhi.n	8001be0 <__aeabi_ddiv+0x50c>
 8001bd6:	d000      	beq.n	8001bda <__aeabi_ddiv+0x506>
 8001bd8:	e65e      	b.n	8001898 <__aeabi_ddiv+0x1c4>
 8001bda:	42ae      	cmp	r6, r5
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x50c>
 8001bde:	e65b      	b.n	8001898 <__aeabi_ddiv+0x1c4>
 8001be0:	2302      	movs	r3, #2
 8001be2:	425b      	negs	r3, r3
 8001be4:	469c      	mov	ip, r3
 8001be6:	9b00      	ldr	r3, [sp, #0]
 8001be8:	44e0      	add	r8, ip
 8001bea:	469c      	mov	ip, r3
 8001bec:	4465      	add	r5, ip
 8001bee:	429d      	cmp	r5, r3
 8001bf0:	419b      	sbcs	r3, r3
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	191b      	adds	r3, r3, r4
 8001bf6:	18c0      	adds	r0, r0, r3
 8001bf8:	e64f      	b.n	800189a <__aeabi_ddiv+0x1c6>
 8001bfa:	42b2      	cmp	r2, r6
 8001bfc:	d800      	bhi.n	8001c00 <__aeabi_ddiv+0x52c>
 8001bfe:	e612      	b.n	8001826 <__aeabi_ddiv+0x152>
 8001c00:	1e83      	subs	r3, r0, #2
 8001c02:	1936      	adds	r6, r6, r4
 8001c04:	e60f      	b.n	8001826 <__aeabi_ddiv+0x152>
 8001c06:	428a      	cmp	r2, r1
 8001c08:	d800      	bhi.n	8001c0c <__aeabi_ddiv+0x538>
 8001c0a:	e5fa      	b.n	8001802 <__aeabi_ddiv+0x12e>
 8001c0c:	1e83      	subs	r3, r0, #2
 8001c0e:	4698      	mov	r8, r3
 8001c10:	1909      	adds	r1, r1, r4
 8001c12:	e5f6      	b.n	8001802 <__aeabi_ddiv+0x12e>
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <__aeabi_ddiv+0x5d4>)
 8001c16:	0028      	movs	r0, r5
 8001c18:	445b      	add	r3, fp
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	409d      	lsls	r5, r3
 8001c1e:	4099      	lsls	r1, r3
 8001c20:	40d0      	lsrs	r0, r2
 8001c22:	1e6b      	subs	r3, r5, #1
 8001c24:	419d      	sbcs	r5, r3
 8001c26:	4643      	mov	r3, r8
 8001c28:	4301      	orrs	r1, r0
 8001c2a:	4329      	orrs	r1, r5
 8001c2c:	40d3      	lsrs	r3, r2
 8001c2e:	074a      	lsls	r2, r1, #29
 8001c30:	d100      	bne.n	8001c34 <__aeabi_ddiv+0x560>
 8001c32:	e755      	b.n	8001ae0 <__aeabi_ddiv+0x40c>
 8001c34:	220f      	movs	r2, #15
 8001c36:	400a      	ands	r2, r1
 8001c38:	2a04      	cmp	r2, #4
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_ddiv+0x56a>
 8001c3c:	e74a      	b.n	8001ad4 <__aeabi_ddiv+0x400>
 8001c3e:	e74f      	b.n	8001ae0 <__aeabi_ddiv+0x40c>
 8001c40:	0015      	movs	r5, r2
 8001c42:	4286      	cmp	r6, r0
 8001c44:	d000      	beq.n	8001c48 <__aeabi_ddiv+0x574>
 8001c46:	e66d      	b.n	8001924 <__aeabi_ddiv+0x250>
 8001c48:	9a00      	ldr	r2, [sp, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_ddiv+0x57c>
 8001c4e:	e669      	b.n	8001924 <__aeabi_ddiv+0x250>
 8001c50:	e66a      	b.n	8001928 <__aeabi_ddiv+0x254>
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <__aeabi_ddiv+0x5d8>)
 8001c54:	445b      	add	r3, fp
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dc00      	bgt.n	8001c5c <__aeabi_ddiv+0x588>
 8001c5a:	e713      	b.n	8001a84 <__aeabi_ddiv+0x3b0>
 8001c5c:	2501      	movs	r5, #1
 8001c5e:	2100      	movs	r1, #0
 8001c60:	44a8      	add	r8, r5
 8001c62:	e66a      	b.n	800193a <__aeabi_ddiv+0x266>
 8001c64:	075d      	lsls	r5, r3, #29
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	0b1a      	lsrs	r2, r3, #12
 8001c6a:	08c9      	lsrs	r1, r1, #3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	430d      	orrs	r5, r1
 8001c70:	e587      	b.n	8001782 <__aeabi_ddiv+0xae>
 8001c72:	9900      	ldr	r1, [sp, #0]
 8001c74:	3d02      	subs	r5, #2
 8001c76:	004a      	lsls	r2, r1, #1
 8001c78:	428a      	cmp	r2, r1
 8001c7a:	41bf      	sbcs	r7, r7
 8001c7c:	427f      	negs	r7, r7
 8001c7e:	193f      	adds	r7, r7, r4
 8001c80:	19f6      	adds	r6, r6, r7
 8001c82:	9200      	str	r2, [sp, #0]
 8001c84:	e7dd      	b.n	8001c42 <__aeabi_ddiv+0x56e>
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	4643      	mov	r3, r8
 8001c8a:	0312      	lsls	r2, r2, #12
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	0312      	lsls	r2, r2, #12
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <__aeabi_ddiv+0x5cc>)
 8001c92:	0b12      	lsrs	r2, r2, #12
 8001c94:	e575      	b.n	8001782 <__aeabi_ddiv+0xae>
 8001c96:	9900      	ldr	r1, [sp, #0]
 8001c98:	4299      	cmp	r1, r3
 8001c9a:	d3ea      	bcc.n	8001c72 <__aeabi_ddiv+0x59e>
 8001c9c:	0015      	movs	r5, r2
 8001c9e:	e7d3      	b.n	8001c48 <__aeabi_ddiv+0x574>
 8001ca0:	000007ff 	.word	0x000007ff
 8001ca4:	0000043e 	.word	0x0000043e
 8001ca8:	0000041e 	.word	0x0000041e
 8001cac:	000003ff 	.word	0x000003ff

08001cb0 <__eqdf2>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	464e      	mov	r6, r9
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	46de      	mov	lr, fp
 8001cb8:	4657      	mov	r7, sl
 8001cba:	4690      	mov	r8, r2
 8001cbc:	b5e0      	push	{r5, r6, r7, lr}
 8001cbe:	0017      	movs	r7, r2
 8001cc0:	031a      	lsls	r2, r3, #12
 8001cc2:	0b12      	lsrs	r2, r2, #12
 8001cc4:	0005      	movs	r5, r0
 8001cc6:	4684      	mov	ip, r0
 8001cc8:	4819      	ldr	r0, [pc, #100]	; (8001d30 <__eqdf2+0x80>)
 8001cca:	030e      	lsls	r6, r1, #12
 8001ccc:	004c      	lsls	r4, r1, #1
 8001cce:	4691      	mov	r9, r2
 8001cd0:	005a      	lsls	r2, r3, #1
 8001cd2:	0fdb      	lsrs	r3, r3, #31
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	0b36      	lsrs	r6, r6, #12
 8001cd8:	0d64      	lsrs	r4, r4, #21
 8001cda:	0fc9      	lsrs	r1, r1, #31
 8001cdc:	0d52      	lsrs	r2, r2, #21
 8001cde:	4284      	cmp	r4, r0
 8001ce0:	d019      	beq.n	8001d16 <__eqdf2+0x66>
 8001ce2:	4282      	cmp	r2, r0
 8001ce4:	d010      	beq.n	8001d08 <__eqdf2+0x58>
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	4294      	cmp	r4, r2
 8001cea:	d10e      	bne.n	8001d0a <__eqdf2+0x5a>
 8001cec:	454e      	cmp	r6, r9
 8001cee:	d10c      	bne.n	8001d0a <__eqdf2+0x5a>
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	45c4      	cmp	ip, r8
 8001cf4:	d109      	bne.n	8001d0a <__eqdf2+0x5a>
 8001cf6:	4559      	cmp	r1, fp
 8001cf8:	d017      	beq.n	8001d2a <__eqdf2+0x7a>
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	d105      	bne.n	8001d0a <__eqdf2+0x5a>
 8001cfe:	0030      	movs	r0, r6
 8001d00:	4328      	orrs	r0, r5
 8001d02:	1e43      	subs	r3, r0, #1
 8001d04:	4198      	sbcs	r0, r3
 8001d06:	e000      	b.n	8001d0a <__eqdf2+0x5a>
 8001d08:	2001      	movs	r0, #1
 8001d0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d0c:	46bb      	mov	fp, r7
 8001d0e:	46b2      	mov	sl, r6
 8001d10:	46a9      	mov	r9, r5
 8001d12:	46a0      	mov	r8, r4
 8001d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d16:	0033      	movs	r3, r6
 8001d18:	2001      	movs	r0, #1
 8001d1a:	432b      	orrs	r3, r5
 8001d1c:	d1f5      	bne.n	8001d0a <__eqdf2+0x5a>
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	d1f3      	bne.n	8001d0a <__eqdf2+0x5a>
 8001d22:	464b      	mov	r3, r9
 8001d24:	433b      	orrs	r3, r7
 8001d26:	d1f0      	bne.n	8001d0a <__eqdf2+0x5a>
 8001d28:	e7e2      	b.n	8001cf0 <__eqdf2+0x40>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	e7ed      	b.n	8001d0a <__eqdf2+0x5a>
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff

08001d34 <__gedf2>:
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	4647      	mov	r7, r8
 8001d38:	46ce      	mov	lr, r9
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	0016      	movs	r6, r2
 8001d40:	031b      	lsls	r3, r3, #12
 8001d42:	0b1b      	lsrs	r3, r3, #12
 8001d44:	4d2d      	ldr	r5, [pc, #180]	; (8001dfc <__gedf2+0xc8>)
 8001d46:	004a      	lsls	r2, r1, #1
 8001d48:	4699      	mov	r9, r3
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	0043      	lsls	r3, r0, #1
 8001d4e:	030f      	lsls	r7, r1, #12
 8001d50:	46a4      	mov	ip, r4
 8001d52:	46b0      	mov	r8, r6
 8001d54:	0b3f      	lsrs	r7, r7, #12
 8001d56:	0d52      	lsrs	r2, r2, #21
 8001d58:	0fc9      	lsrs	r1, r1, #31
 8001d5a:	0d5b      	lsrs	r3, r3, #21
 8001d5c:	0fc0      	lsrs	r0, r0, #31
 8001d5e:	42aa      	cmp	r2, r5
 8001d60:	d021      	beq.n	8001da6 <__gedf2+0x72>
 8001d62:	42ab      	cmp	r3, r5
 8001d64:	d013      	beq.n	8001d8e <__gedf2+0x5a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d122      	bne.n	8001db0 <__gedf2+0x7c>
 8001d6a:	433c      	orrs	r4, r7
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <__gedf2+0x42>
 8001d70:	464d      	mov	r5, r9
 8001d72:	432e      	orrs	r6, r5
 8001d74:	d022      	beq.n	8001dbc <__gedf2+0x88>
 8001d76:	2c00      	cmp	r4, #0
 8001d78:	d010      	beq.n	8001d9c <__gedf2+0x68>
 8001d7a:	4281      	cmp	r1, r0
 8001d7c:	d022      	beq.n	8001dc4 <__gedf2+0x90>
 8001d7e:	2002      	movs	r0, #2
 8001d80:	3901      	subs	r1, #1
 8001d82:	4008      	ands	r0, r1
 8001d84:	3801      	subs	r0, #1
 8001d86:	bcc0      	pop	{r6, r7}
 8001d88:	46b9      	mov	r9, r7
 8001d8a:	46b0      	mov	r8, r6
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8e:	464d      	mov	r5, r9
 8001d90:	432e      	orrs	r6, r5
 8001d92:	d129      	bne.n	8001de8 <__gedf2+0xb4>
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d1f0      	bne.n	8001d7a <__gedf2+0x46>
 8001d98:	433c      	orrs	r4, r7
 8001d9a:	d1ee      	bne.n	8001d7a <__gedf2+0x46>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d1f2      	bne.n	8001d86 <__gedf2+0x52>
 8001da0:	2001      	movs	r0, #1
 8001da2:	4240      	negs	r0, r0
 8001da4:	e7ef      	b.n	8001d86 <__gedf2+0x52>
 8001da6:	003d      	movs	r5, r7
 8001da8:	4325      	orrs	r5, r4
 8001daa:	d11d      	bne.n	8001de8 <__gedf2+0xb4>
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d0ee      	beq.n	8001d8e <__gedf2+0x5a>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e2      	bne.n	8001d7a <__gedf2+0x46>
 8001db4:	464c      	mov	r4, r9
 8001db6:	4326      	orrs	r6, r4
 8001db8:	d1df      	bne.n	8001d7a <__gedf2+0x46>
 8001dba:	e7e0      	b.n	8001d7e <__gedf2+0x4a>
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d0e1      	beq.n	8001d86 <__gedf2+0x52>
 8001dc2:	e7dc      	b.n	8001d7e <__gedf2+0x4a>
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dc0a      	bgt.n	8001dde <__gedf2+0xaa>
 8001dc8:	dbe8      	blt.n	8001d9c <__gedf2+0x68>
 8001dca:	454f      	cmp	r7, r9
 8001dcc:	d8d7      	bhi.n	8001d7e <__gedf2+0x4a>
 8001dce:	d00e      	beq.n	8001dee <__gedf2+0xba>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	454f      	cmp	r7, r9
 8001dd4:	d2d7      	bcs.n	8001d86 <__gedf2+0x52>
 8001dd6:	2900      	cmp	r1, #0
 8001dd8:	d0e2      	beq.n	8001da0 <__gedf2+0x6c>
 8001dda:	0008      	movs	r0, r1
 8001ddc:	e7d3      	b.n	8001d86 <__gedf2+0x52>
 8001dde:	4243      	negs	r3, r0
 8001de0:	4158      	adcs	r0, r3
 8001de2:	0040      	lsls	r0, r0, #1
 8001de4:	3801      	subs	r0, #1
 8001de6:	e7ce      	b.n	8001d86 <__gedf2+0x52>
 8001de8:	2002      	movs	r0, #2
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7cb      	b.n	8001d86 <__gedf2+0x52>
 8001dee:	45c4      	cmp	ip, r8
 8001df0:	d8c5      	bhi.n	8001d7e <__gedf2+0x4a>
 8001df2:	2000      	movs	r0, #0
 8001df4:	45c4      	cmp	ip, r8
 8001df6:	d2c6      	bcs.n	8001d86 <__gedf2+0x52>
 8001df8:	e7ed      	b.n	8001dd6 <__gedf2+0xa2>
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	000007ff 	.word	0x000007ff

08001e00 <__ledf2>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	4647      	mov	r7, r8
 8001e04:	46ce      	mov	lr, r9
 8001e06:	0004      	movs	r4, r0
 8001e08:	0018      	movs	r0, r3
 8001e0a:	0016      	movs	r6, r2
 8001e0c:	031b      	lsls	r3, r3, #12
 8001e0e:	0b1b      	lsrs	r3, r3, #12
 8001e10:	4d2c      	ldr	r5, [pc, #176]	; (8001ec4 <__ledf2+0xc4>)
 8001e12:	004a      	lsls	r2, r1, #1
 8001e14:	4699      	mov	r9, r3
 8001e16:	b580      	push	{r7, lr}
 8001e18:	0043      	lsls	r3, r0, #1
 8001e1a:	030f      	lsls	r7, r1, #12
 8001e1c:	46a4      	mov	ip, r4
 8001e1e:	46b0      	mov	r8, r6
 8001e20:	0b3f      	lsrs	r7, r7, #12
 8001e22:	0d52      	lsrs	r2, r2, #21
 8001e24:	0fc9      	lsrs	r1, r1, #31
 8001e26:	0d5b      	lsrs	r3, r3, #21
 8001e28:	0fc0      	lsrs	r0, r0, #31
 8001e2a:	42aa      	cmp	r2, r5
 8001e2c:	d00d      	beq.n	8001e4a <__ledf2+0x4a>
 8001e2e:	42ab      	cmp	r3, r5
 8001e30:	d010      	beq.n	8001e54 <__ledf2+0x54>
 8001e32:	2a00      	cmp	r2, #0
 8001e34:	d127      	bne.n	8001e86 <__ledf2+0x86>
 8001e36:	433c      	orrs	r4, r7
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d111      	bne.n	8001e60 <__ledf2+0x60>
 8001e3c:	464d      	mov	r5, r9
 8001e3e:	432e      	orrs	r6, r5
 8001e40:	d10e      	bne.n	8001e60 <__ledf2+0x60>
 8001e42:	2000      	movs	r0, #0
 8001e44:	2c00      	cmp	r4, #0
 8001e46:	d015      	beq.n	8001e74 <__ledf2+0x74>
 8001e48:	e00e      	b.n	8001e68 <__ledf2+0x68>
 8001e4a:	003d      	movs	r5, r7
 8001e4c:	4325      	orrs	r5, r4
 8001e4e:	d110      	bne.n	8001e72 <__ledf2+0x72>
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d118      	bne.n	8001e86 <__ledf2+0x86>
 8001e54:	464d      	mov	r5, r9
 8001e56:	432e      	orrs	r6, r5
 8001e58:	d10b      	bne.n	8001e72 <__ledf2+0x72>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d102      	bne.n	8001e64 <__ledf2+0x64>
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	2c00      	cmp	r4, #0
 8001e62:	d00b      	beq.n	8001e7c <__ledf2+0x7c>
 8001e64:	4281      	cmp	r1, r0
 8001e66:	d014      	beq.n	8001e92 <__ledf2+0x92>
 8001e68:	2002      	movs	r0, #2
 8001e6a:	3901      	subs	r1, #1
 8001e6c:	4008      	ands	r0, r1
 8001e6e:	3801      	subs	r0, #1
 8001e70:	e000      	b.n	8001e74 <__ledf2+0x74>
 8001e72:	2002      	movs	r0, #2
 8001e74:	bcc0      	pop	{r6, r7}
 8001e76:	46b9      	mov	r9, r7
 8001e78:	46b0      	mov	r8, r6
 8001e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d1f9      	bne.n	8001e74 <__ledf2+0x74>
 8001e80:	2001      	movs	r0, #1
 8001e82:	4240      	negs	r0, r0
 8001e84:	e7f6      	b.n	8001e74 <__ledf2+0x74>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ec      	bne.n	8001e64 <__ledf2+0x64>
 8001e8a:	464c      	mov	r4, r9
 8001e8c:	4326      	orrs	r6, r4
 8001e8e:	d1e9      	bne.n	8001e64 <__ledf2+0x64>
 8001e90:	e7ea      	b.n	8001e68 <__ledf2+0x68>
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dd04      	ble.n	8001ea0 <__ledf2+0xa0>
 8001e96:	4243      	negs	r3, r0
 8001e98:	4158      	adcs	r0, r3
 8001e9a:	0040      	lsls	r0, r0, #1
 8001e9c:	3801      	subs	r0, #1
 8001e9e:	e7e9      	b.n	8001e74 <__ledf2+0x74>
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dbeb      	blt.n	8001e7c <__ledf2+0x7c>
 8001ea4:	454f      	cmp	r7, r9
 8001ea6:	d8df      	bhi.n	8001e68 <__ledf2+0x68>
 8001ea8:	d006      	beq.n	8001eb8 <__ledf2+0xb8>
 8001eaa:	2000      	movs	r0, #0
 8001eac:	454f      	cmp	r7, r9
 8001eae:	d2e1      	bcs.n	8001e74 <__ledf2+0x74>
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	d0e5      	beq.n	8001e80 <__ledf2+0x80>
 8001eb4:	0008      	movs	r0, r1
 8001eb6:	e7dd      	b.n	8001e74 <__ledf2+0x74>
 8001eb8:	45c4      	cmp	ip, r8
 8001eba:	d8d5      	bhi.n	8001e68 <__ledf2+0x68>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	45c4      	cmp	ip, r8
 8001ec0:	d2d8      	bcs.n	8001e74 <__ledf2+0x74>
 8001ec2:	e7f5      	b.n	8001eb0 <__ledf2+0xb0>
 8001ec4:	000007ff 	.word	0x000007ff

08001ec8 <__aeabi_dmul>:
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	4645      	mov	r5, r8
 8001ecc:	46de      	mov	lr, fp
 8001ece:	4657      	mov	r7, sl
 8001ed0:	464e      	mov	r6, r9
 8001ed2:	b5e0      	push	{r5, r6, r7, lr}
 8001ed4:	001f      	movs	r7, r3
 8001ed6:	030b      	lsls	r3, r1, #12
 8001ed8:	0b1b      	lsrs	r3, r3, #12
 8001eda:	469b      	mov	fp, r3
 8001edc:	004d      	lsls	r5, r1, #1
 8001ede:	0fcb      	lsrs	r3, r1, #31
 8001ee0:	0004      	movs	r4, r0
 8001ee2:	4691      	mov	r9, r2
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	0d6d      	lsrs	r5, r5, #21
 8001eea:	d100      	bne.n	8001eee <__aeabi_dmul+0x26>
 8001eec:	e1cd      	b.n	800228a <__aeabi_dmul+0x3c2>
 8001eee:	4bce      	ldr	r3, [pc, #824]	; (8002228 <__aeabi_dmul+0x360>)
 8001ef0:	429d      	cmp	r5, r3
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dmul+0x2e>
 8001ef4:	e1e9      	b.n	80022ca <__aeabi_dmul+0x402>
 8001ef6:	465a      	mov	r2, fp
 8001ef8:	0f43      	lsrs	r3, r0, #29
 8001efa:	00d2      	lsls	r2, r2, #3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0412      	lsls	r2, r2, #16
 8001f02:	431a      	orrs	r2, r3
 8001f04:	00c3      	lsls	r3, r0, #3
 8001f06:	469a      	mov	sl, r3
 8001f08:	4bc8      	ldr	r3, [pc, #800]	; (800222c <__aeabi_dmul+0x364>)
 8001f0a:	4693      	mov	fp, r2
 8001f0c:	469c      	mov	ip, r3
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2600      	movs	r6, #0
 8001f12:	4465      	add	r5, ip
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	033c      	lsls	r4, r7, #12
 8001f18:	007b      	lsls	r3, r7, #1
 8001f1a:	4648      	mov	r0, r9
 8001f1c:	0b24      	lsrs	r4, r4, #12
 8001f1e:	0d5b      	lsrs	r3, r3, #21
 8001f20:	0fff      	lsrs	r7, r7, #31
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dmul+0x60>
 8001f26:	e189      	b.n	800223c <__aeabi_dmul+0x374>
 8001f28:	4abf      	ldr	r2, [pc, #764]	; (8002228 <__aeabi_dmul+0x360>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <__aeabi_dmul+0x9a>
 8001f2e:	0f42      	lsrs	r2, r0, #29
 8001f30:	00e4      	lsls	r4, r4, #3
 8001f32:	4322      	orrs	r2, r4
 8001f34:	2480      	movs	r4, #128	; 0x80
 8001f36:	0424      	lsls	r4, r4, #16
 8001f38:	4314      	orrs	r4, r2
 8001f3a:	4abc      	ldr	r2, [pc, #752]	; (800222c <__aeabi_dmul+0x364>)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4694      	mov	ip, r2
 8001f40:	4642      	mov	r2, r8
 8001f42:	4463      	add	r3, ip
 8001f44:	195b      	adds	r3, r3, r5
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	9b01      	ldr	r3, [sp, #4]
 8001f4a:	407a      	eors	r2, r7
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	00c0      	lsls	r0, r0, #3
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2e0a      	cmp	r6, #10
 8001f56:	dd1c      	ble.n	8001f92 <__aeabi_dmul+0xca>
 8001f58:	003a      	movs	r2, r7
 8001f5a:	2e0b      	cmp	r6, #11
 8001f5c:	d05e      	beq.n	800201c <__aeabi_dmul+0x154>
 8001f5e:	4647      	mov	r7, r8
 8001f60:	e056      	b.n	8002010 <__aeabi_dmul+0x148>
 8001f62:	4649      	mov	r1, r9
 8001f64:	4bb0      	ldr	r3, [pc, #704]	; (8002228 <__aeabi_dmul+0x360>)
 8001f66:	4321      	orrs	r1, r4
 8001f68:	18eb      	adds	r3, r5, r3
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	d12a      	bne.n	8001fc6 <__aeabi_dmul+0xfe>
 8001f70:	2080      	movs	r0, #128	; 0x80
 8001f72:	2202      	movs	r2, #2
 8001f74:	0100      	lsls	r0, r0, #4
 8001f76:	002b      	movs	r3, r5
 8001f78:	4684      	mov	ip, r0
 8001f7a:	4316      	orrs	r6, r2
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	4463      	add	r3, ip
 8001f80:	407a      	eors	r2, r7
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	2e0a      	cmp	r6, #10
 8001f88:	dd00      	ble.n	8001f8c <__aeabi_dmul+0xc4>
 8001f8a:	e231      	b.n	80023f0 <__aeabi_dmul+0x528>
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	2400      	movs	r4, #0
 8001f90:	2102      	movs	r1, #2
 8001f92:	2e02      	cmp	r6, #2
 8001f94:	dc26      	bgt.n	8001fe4 <__aeabi_dmul+0x11c>
 8001f96:	3e01      	subs	r6, #1
 8001f98:	2e01      	cmp	r6, #1
 8001f9a:	d852      	bhi.n	8002042 <__aeabi_dmul+0x17a>
 8001f9c:	2902      	cmp	r1, #2
 8001f9e:	d04c      	beq.n	800203a <__aeabi_dmul+0x172>
 8001fa0:	2901      	cmp	r1, #1
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dmul+0xde>
 8001fa4:	e118      	b.n	80021d8 <__aeabi_dmul+0x310>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2400      	movs	r4, #0
 8001faa:	2500      	movs	r5, #0
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	4323      	orrs	r3, r4
 8001fb0:	07d2      	lsls	r2, r2, #31
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	0028      	movs	r0, r5
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	b007      	add	sp, #28
 8001fba:	bcf0      	pop	{r4, r5, r6, r7}
 8001fbc:	46bb      	mov	fp, r7
 8001fbe:	46b2      	mov	sl, r6
 8001fc0:	46a9      	mov	r9, r5
 8001fc2:	46a0      	mov	r8, r4
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	2203      	movs	r2, #3
 8001fca:	0109      	lsls	r1, r1, #4
 8001fcc:	002b      	movs	r3, r5
 8001fce:	468c      	mov	ip, r1
 8001fd0:	4316      	orrs	r6, r2
 8001fd2:	4642      	mov	r2, r8
 8001fd4:	4463      	add	r3, ip
 8001fd6:	407a      	eors	r2, r7
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	2e0a      	cmp	r6, #10
 8001fde:	dd00      	ble.n	8001fe2 <__aeabi_dmul+0x11a>
 8001fe0:	e228      	b.n	8002434 <__aeabi_dmul+0x56c>
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	2501      	movs	r5, #1
 8001fe6:	40b5      	lsls	r5, r6
 8001fe8:	46ac      	mov	ip, r5
 8001fea:	26a6      	movs	r6, #166	; 0xa6
 8001fec:	4663      	mov	r3, ip
 8001fee:	00f6      	lsls	r6, r6, #3
 8001ff0:	4035      	ands	r5, r6
 8001ff2:	4233      	tst	r3, r6
 8001ff4:	d10b      	bne.n	800200e <__aeabi_dmul+0x146>
 8001ff6:	2690      	movs	r6, #144	; 0x90
 8001ff8:	00b6      	lsls	r6, r6, #2
 8001ffa:	4233      	tst	r3, r6
 8001ffc:	d118      	bne.n	8002030 <__aeabi_dmul+0x168>
 8001ffe:	3eb9      	subs	r6, #185	; 0xb9
 8002000:	3eff      	subs	r6, #255	; 0xff
 8002002:	421e      	tst	r6, r3
 8002004:	d01d      	beq.n	8002042 <__aeabi_dmul+0x17a>
 8002006:	46a3      	mov	fp, r4
 8002008:	4682      	mov	sl, r0
 800200a:	9100      	str	r1, [sp, #0]
 800200c:	e000      	b.n	8002010 <__aeabi_dmul+0x148>
 800200e:	0017      	movs	r7, r2
 8002010:	9900      	ldr	r1, [sp, #0]
 8002012:	003a      	movs	r2, r7
 8002014:	2902      	cmp	r1, #2
 8002016:	d010      	beq.n	800203a <__aeabi_dmul+0x172>
 8002018:	465c      	mov	r4, fp
 800201a:	4650      	mov	r0, sl
 800201c:	2903      	cmp	r1, #3
 800201e:	d1bf      	bne.n	8001fa0 <__aeabi_dmul+0xd8>
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	031b      	lsls	r3, r3, #12
 8002024:	431c      	orrs	r4, r3
 8002026:	0324      	lsls	r4, r4, #12
 8002028:	0005      	movs	r5, r0
 800202a:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <__aeabi_dmul+0x360>)
 800202c:	0b24      	lsrs	r4, r4, #12
 800202e:	e7bd      	b.n	8001fac <__aeabi_dmul+0xe4>
 8002030:	2480      	movs	r4, #128	; 0x80
 8002032:	2200      	movs	r2, #0
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <__aeabi_dmul+0x360>)
 8002036:	0324      	lsls	r4, r4, #12
 8002038:	e7b8      	b.n	8001fac <__aeabi_dmul+0xe4>
 800203a:	2400      	movs	r4, #0
 800203c:	2500      	movs	r5, #0
 800203e:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <__aeabi_dmul+0x360>)
 8002040:	e7b4      	b.n	8001fac <__aeabi_dmul+0xe4>
 8002042:	4653      	mov	r3, sl
 8002044:	041e      	lsls	r6, r3, #16
 8002046:	0c36      	lsrs	r6, r6, #16
 8002048:	0c1f      	lsrs	r7, r3, #16
 800204a:	0033      	movs	r3, r6
 800204c:	0c01      	lsrs	r1, r0, #16
 800204e:	0400      	lsls	r0, r0, #16
 8002050:	0c00      	lsrs	r0, r0, #16
 8002052:	4343      	muls	r3, r0
 8002054:	4698      	mov	r8, r3
 8002056:	0003      	movs	r3, r0
 8002058:	437b      	muls	r3, r7
 800205a:	4699      	mov	r9, r3
 800205c:	0033      	movs	r3, r6
 800205e:	434b      	muls	r3, r1
 8002060:	469c      	mov	ip, r3
 8002062:	4643      	mov	r3, r8
 8002064:	000d      	movs	r5, r1
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	469a      	mov	sl, r3
 800206a:	437d      	muls	r5, r7
 800206c:	44cc      	add	ip, r9
 800206e:	44d4      	add	ip, sl
 8002070:	9500      	str	r5, [sp, #0]
 8002072:	45e1      	cmp	r9, ip
 8002074:	d904      	bls.n	8002080 <__aeabi_dmul+0x1b8>
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	025b      	lsls	r3, r3, #9
 800207a:	4699      	mov	r9, r3
 800207c:	444d      	add	r5, r9
 800207e:	9500      	str	r5, [sp, #0]
 8002080:	4663      	mov	r3, ip
 8002082:	0c1b      	lsrs	r3, r3, #16
 8002084:	001d      	movs	r5, r3
 8002086:	4663      	mov	r3, ip
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	469c      	mov	ip, r3
 800208c:	4643      	mov	r3, r8
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	4698      	mov	r8, r3
 8002094:	4663      	mov	r3, ip
 8002096:	4443      	add	r3, r8
 8002098:	9303      	str	r3, [sp, #12]
 800209a:	0c23      	lsrs	r3, r4, #16
 800209c:	4698      	mov	r8, r3
 800209e:	0033      	movs	r3, r6
 80020a0:	0424      	lsls	r4, r4, #16
 80020a2:	0c24      	lsrs	r4, r4, #16
 80020a4:	4363      	muls	r3, r4
 80020a6:	469c      	mov	ip, r3
 80020a8:	0023      	movs	r3, r4
 80020aa:	437b      	muls	r3, r7
 80020ac:	4699      	mov	r9, r3
 80020ae:	4643      	mov	r3, r8
 80020b0:	435e      	muls	r6, r3
 80020b2:	435f      	muls	r7, r3
 80020b4:	444e      	add	r6, r9
 80020b6:	4663      	mov	r3, ip
 80020b8:	46b2      	mov	sl, r6
 80020ba:	0c1e      	lsrs	r6, r3, #16
 80020bc:	4456      	add	r6, sl
 80020be:	45b1      	cmp	r9, r6
 80020c0:	d903      	bls.n	80020ca <__aeabi_dmul+0x202>
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	025b      	lsls	r3, r3, #9
 80020c6:	4699      	mov	r9, r3
 80020c8:	444f      	add	r7, r9
 80020ca:	0c33      	lsrs	r3, r6, #16
 80020cc:	4699      	mov	r9, r3
 80020ce:	003b      	movs	r3, r7
 80020d0:	444b      	add	r3, r9
 80020d2:	9305      	str	r3, [sp, #20]
 80020d4:	4663      	mov	r3, ip
 80020d6:	46ac      	mov	ip, r5
 80020d8:	041f      	lsls	r7, r3, #16
 80020da:	0c3f      	lsrs	r7, r7, #16
 80020dc:	0436      	lsls	r6, r6, #16
 80020de:	19f6      	adds	r6, r6, r7
 80020e0:	44b4      	add	ip, r6
 80020e2:	4663      	mov	r3, ip
 80020e4:	9304      	str	r3, [sp, #16]
 80020e6:	465b      	mov	r3, fp
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	469c      	mov	ip, r3
 80020ec:	465b      	mov	r3, fp
 80020ee:	041f      	lsls	r7, r3, #16
 80020f0:	0c3f      	lsrs	r7, r7, #16
 80020f2:	003b      	movs	r3, r7
 80020f4:	4343      	muls	r3, r0
 80020f6:	4699      	mov	r9, r3
 80020f8:	4663      	mov	r3, ip
 80020fa:	4343      	muls	r3, r0
 80020fc:	469a      	mov	sl, r3
 80020fe:	464b      	mov	r3, r9
 8002100:	4660      	mov	r0, ip
 8002102:	0c1b      	lsrs	r3, r3, #16
 8002104:	469b      	mov	fp, r3
 8002106:	4348      	muls	r0, r1
 8002108:	4379      	muls	r1, r7
 800210a:	4451      	add	r1, sl
 800210c:	4459      	add	r1, fp
 800210e:	458a      	cmp	sl, r1
 8002110:	d903      	bls.n	800211a <__aeabi_dmul+0x252>
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	025b      	lsls	r3, r3, #9
 8002116:	469a      	mov	sl, r3
 8002118:	4450      	add	r0, sl
 800211a:	0c0b      	lsrs	r3, r1, #16
 800211c:	469a      	mov	sl, r3
 800211e:	464b      	mov	r3, r9
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	4699      	mov	r9, r3
 8002126:	003b      	movs	r3, r7
 8002128:	4363      	muls	r3, r4
 800212a:	0409      	lsls	r1, r1, #16
 800212c:	4645      	mov	r5, r8
 800212e:	4449      	add	r1, r9
 8002130:	4699      	mov	r9, r3
 8002132:	4663      	mov	r3, ip
 8002134:	435c      	muls	r4, r3
 8002136:	436b      	muls	r3, r5
 8002138:	469c      	mov	ip, r3
 800213a:	464b      	mov	r3, r9
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	4698      	mov	r8, r3
 8002140:	436f      	muls	r7, r5
 8002142:	193f      	adds	r7, r7, r4
 8002144:	4447      	add	r7, r8
 8002146:	4450      	add	r0, sl
 8002148:	42bc      	cmp	r4, r7
 800214a:	d903      	bls.n	8002154 <__aeabi_dmul+0x28c>
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	4698      	mov	r8, r3
 8002152:	44c4      	add	ip, r8
 8002154:	9b04      	ldr	r3, [sp, #16]
 8002156:	9d00      	ldr	r5, [sp, #0]
 8002158:	4698      	mov	r8, r3
 800215a:	4445      	add	r5, r8
 800215c:	42b5      	cmp	r5, r6
 800215e:	41b6      	sbcs	r6, r6
 8002160:	4273      	negs	r3, r6
 8002162:	4698      	mov	r8, r3
 8002164:	464b      	mov	r3, r9
 8002166:	041e      	lsls	r6, r3, #16
 8002168:	9b05      	ldr	r3, [sp, #20]
 800216a:	043c      	lsls	r4, r7, #16
 800216c:	4699      	mov	r9, r3
 800216e:	0c36      	lsrs	r6, r6, #16
 8002170:	19a4      	adds	r4, r4, r6
 8002172:	444c      	add	r4, r9
 8002174:	46a1      	mov	r9, r4
 8002176:	4683      	mov	fp, r0
 8002178:	186e      	adds	r6, r5, r1
 800217a:	44c1      	add	r9, r8
 800217c:	428e      	cmp	r6, r1
 800217e:	4189      	sbcs	r1, r1
 8002180:	44cb      	add	fp, r9
 8002182:	465d      	mov	r5, fp
 8002184:	4249      	negs	r1, r1
 8002186:	186d      	adds	r5, r5, r1
 8002188:	429c      	cmp	r4, r3
 800218a:	41a4      	sbcs	r4, r4
 800218c:	45c1      	cmp	r9, r8
 800218e:	419b      	sbcs	r3, r3
 8002190:	4583      	cmp	fp, r0
 8002192:	4180      	sbcs	r0, r0
 8002194:	428d      	cmp	r5, r1
 8002196:	4189      	sbcs	r1, r1
 8002198:	425b      	negs	r3, r3
 800219a:	4264      	negs	r4, r4
 800219c:	431c      	orrs	r4, r3
 800219e:	4240      	negs	r0, r0
 80021a0:	9b03      	ldr	r3, [sp, #12]
 80021a2:	4249      	negs	r1, r1
 80021a4:	4301      	orrs	r1, r0
 80021a6:	0270      	lsls	r0, r6, #9
 80021a8:	0c3f      	lsrs	r7, r7, #16
 80021aa:	4318      	orrs	r0, r3
 80021ac:	19e4      	adds	r4, r4, r7
 80021ae:	1e47      	subs	r7, r0, #1
 80021b0:	41b8      	sbcs	r0, r7
 80021b2:	1864      	adds	r4, r4, r1
 80021b4:	4464      	add	r4, ip
 80021b6:	0df6      	lsrs	r6, r6, #23
 80021b8:	0261      	lsls	r1, r4, #9
 80021ba:	4330      	orrs	r0, r6
 80021bc:	0dec      	lsrs	r4, r5, #23
 80021be:	026e      	lsls	r6, r5, #9
 80021c0:	430c      	orrs	r4, r1
 80021c2:	4330      	orrs	r0, r6
 80021c4:	01c9      	lsls	r1, r1, #7
 80021c6:	d400      	bmi.n	80021ca <__aeabi_dmul+0x302>
 80021c8:	e0f1      	b.n	80023ae <__aeabi_dmul+0x4e6>
 80021ca:	2101      	movs	r1, #1
 80021cc:	0843      	lsrs	r3, r0, #1
 80021ce:	4001      	ands	r1, r0
 80021d0:	430b      	orrs	r3, r1
 80021d2:	07e0      	lsls	r0, r4, #31
 80021d4:	4318      	orrs	r0, r3
 80021d6:	0864      	lsrs	r4, r4, #1
 80021d8:	4915      	ldr	r1, [pc, #84]	; (8002230 <__aeabi_dmul+0x368>)
 80021da:	9b02      	ldr	r3, [sp, #8]
 80021dc:	468c      	mov	ip, r1
 80021de:	4463      	add	r3, ip
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dc00      	bgt.n	80021e6 <__aeabi_dmul+0x31e>
 80021e4:	e097      	b.n	8002316 <__aeabi_dmul+0x44e>
 80021e6:	0741      	lsls	r1, r0, #29
 80021e8:	d009      	beq.n	80021fe <__aeabi_dmul+0x336>
 80021ea:	210f      	movs	r1, #15
 80021ec:	4001      	ands	r1, r0
 80021ee:	2904      	cmp	r1, #4
 80021f0:	d005      	beq.n	80021fe <__aeabi_dmul+0x336>
 80021f2:	1d01      	adds	r1, r0, #4
 80021f4:	4281      	cmp	r1, r0
 80021f6:	4180      	sbcs	r0, r0
 80021f8:	4240      	negs	r0, r0
 80021fa:	1824      	adds	r4, r4, r0
 80021fc:	0008      	movs	r0, r1
 80021fe:	01e1      	lsls	r1, r4, #7
 8002200:	d506      	bpl.n	8002210 <__aeabi_dmul+0x348>
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	00c9      	lsls	r1, r1, #3
 8002206:	468c      	mov	ip, r1
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <__aeabi_dmul+0x36c>)
 800220a:	401c      	ands	r4, r3
 800220c:	9b02      	ldr	r3, [sp, #8]
 800220e:	4463      	add	r3, ip
 8002210:	4909      	ldr	r1, [pc, #36]	; (8002238 <__aeabi_dmul+0x370>)
 8002212:	428b      	cmp	r3, r1
 8002214:	dd00      	ble.n	8002218 <__aeabi_dmul+0x350>
 8002216:	e710      	b.n	800203a <__aeabi_dmul+0x172>
 8002218:	0761      	lsls	r1, r4, #29
 800221a:	08c5      	lsrs	r5, r0, #3
 800221c:	0264      	lsls	r4, r4, #9
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	430d      	orrs	r5, r1
 8002222:	0b24      	lsrs	r4, r4, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e6c1      	b.n	8001fac <__aeabi_dmul+0xe4>
 8002228:	000007ff 	.word	0x000007ff
 800222c:	fffffc01 	.word	0xfffffc01
 8002230:	000003ff 	.word	0x000003ff
 8002234:	feffffff 	.word	0xfeffffff
 8002238:	000007fe 	.word	0x000007fe
 800223c:	464b      	mov	r3, r9
 800223e:	4323      	orrs	r3, r4
 8002240:	d059      	beq.n	80022f6 <__aeabi_dmul+0x42e>
 8002242:	2c00      	cmp	r4, #0
 8002244:	d100      	bne.n	8002248 <__aeabi_dmul+0x380>
 8002246:	e0a3      	b.n	8002390 <__aeabi_dmul+0x4c8>
 8002248:	0020      	movs	r0, r4
 800224a:	f000 fdf9 	bl	8002e40 <__clzsi2>
 800224e:	0001      	movs	r1, r0
 8002250:	0003      	movs	r3, r0
 8002252:	390b      	subs	r1, #11
 8002254:	221d      	movs	r2, #29
 8002256:	1a52      	subs	r2, r2, r1
 8002258:	4649      	mov	r1, r9
 800225a:	0018      	movs	r0, r3
 800225c:	40d1      	lsrs	r1, r2
 800225e:	464a      	mov	r2, r9
 8002260:	3808      	subs	r0, #8
 8002262:	4082      	lsls	r2, r0
 8002264:	4084      	lsls	r4, r0
 8002266:	0010      	movs	r0, r2
 8002268:	430c      	orrs	r4, r1
 800226a:	4a74      	ldr	r2, [pc, #464]	; (800243c <__aeabi_dmul+0x574>)
 800226c:	1aeb      	subs	r3, r5, r3
 800226e:	4694      	mov	ip, r2
 8002270:	4642      	mov	r2, r8
 8002272:	4463      	add	r3, ip
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	407a      	eors	r2, r7
 800227a:	3301      	adds	r3, #1
 800227c:	2100      	movs	r1, #0
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2e0a      	cmp	r6, #10
 8002284:	dd00      	ble.n	8002288 <__aeabi_dmul+0x3c0>
 8002286:	e667      	b.n	8001f58 <__aeabi_dmul+0x90>
 8002288:	e683      	b.n	8001f92 <__aeabi_dmul+0xca>
 800228a:	465b      	mov	r3, fp
 800228c:	4303      	orrs	r3, r0
 800228e:	469a      	mov	sl, r3
 8002290:	d02a      	beq.n	80022e8 <__aeabi_dmul+0x420>
 8002292:	465b      	mov	r3, fp
 8002294:	2b00      	cmp	r3, #0
 8002296:	d06d      	beq.n	8002374 <__aeabi_dmul+0x4ac>
 8002298:	4658      	mov	r0, fp
 800229a:	f000 fdd1 	bl	8002e40 <__clzsi2>
 800229e:	0001      	movs	r1, r0
 80022a0:	0003      	movs	r3, r0
 80022a2:	390b      	subs	r1, #11
 80022a4:	221d      	movs	r2, #29
 80022a6:	1a52      	subs	r2, r2, r1
 80022a8:	0021      	movs	r1, r4
 80022aa:	0018      	movs	r0, r3
 80022ac:	465d      	mov	r5, fp
 80022ae:	40d1      	lsrs	r1, r2
 80022b0:	3808      	subs	r0, #8
 80022b2:	4085      	lsls	r5, r0
 80022b4:	000a      	movs	r2, r1
 80022b6:	4084      	lsls	r4, r0
 80022b8:	432a      	orrs	r2, r5
 80022ba:	4693      	mov	fp, r2
 80022bc:	46a2      	mov	sl, r4
 80022be:	4d5f      	ldr	r5, [pc, #380]	; (800243c <__aeabi_dmul+0x574>)
 80022c0:	2600      	movs	r6, #0
 80022c2:	1aed      	subs	r5, r5, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	e625      	b.n	8001f16 <__aeabi_dmul+0x4e>
 80022ca:	465b      	mov	r3, fp
 80022cc:	4303      	orrs	r3, r0
 80022ce:	469a      	mov	sl, r3
 80022d0:	d105      	bne.n	80022de <__aeabi_dmul+0x416>
 80022d2:	2300      	movs	r3, #0
 80022d4:	469b      	mov	fp, r3
 80022d6:	3302      	adds	r3, #2
 80022d8:	2608      	movs	r6, #8
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	e61b      	b.n	8001f16 <__aeabi_dmul+0x4e>
 80022de:	2303      	movs	r3, #3
 80022e0:	4682      	mov	sl, r0
 80022e2:	260c      	movs	r6, #12
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	e616      	b.n	8001f16 <__aeabi_dmul+0x4e>
 80022e8:	2300      	movs	r3, #0
 80022ea:	469b      	mov	fp, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	2604      	movs	r6, #4
 80022f0:	2500      	movs	r5, #0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	e60f      	b.n	8001f16 <__aeabi_dmul+0x4e>
 80022f6:	4642      	mov	r2, r8
 80022f8:	3301      	adds	r3, #1
 80022fa:	9501      	str	r5, [sp, #4]
 80022fc:	431e      	orrs	r6, r3
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	407a      	eors	r2, r7
 8002302:	3301      	adds	r3, #1
 8002304:	2400      	movs	r4, #0
 8002306:	2000      	movs	r0, #0
 8002308:	2101      	movs	r1, #1
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	2e0a      	cmp	r6, #10
 8002310:	dd00      	ble.n	8002314 <__aeabi_dmul+0x44c>
 8002312:	e621      	b.n	8001f58 <__aeabi_dmul+0x90>
 8002314:	e63d      	b.n	8001f92 <__aeabi_dmul+0xca>
 8002316:	2101      	movs	r1, #1
 8002318:	1ac9      	subs	r1, r1, r3
 800231a:	2938      	cmp	r1, #56	; 0x38
 800231c:	dd00      	ble.n	8002320 <__aeabi_dmul+0x458>
 800231e:	e642      	b.n	8001fa6 <__aeabi_dmul+0xde>
 8002320:	291f      	cmp	r1, #31
 8002322:	dd47      	ble.n	80023b4 <__aeabi_dmul+0x4ec>
 8002324:	261f      	movs	r6, #31
 8002326:	0025      	movs	r5, r4
 8002328:	4276      	negs	r6, r6
 800232a:	1af3      	subs	r3, r6, r3
 800232c:	40dd      	lsrs	r5, r3
 800232e:	002b      	movs	r3, r5
 8002330:	2920      	cmp	r1, #32
 8002332:	d005      	beq.n	8002340 <__aeabi_dmul+0x478>
 8002334:	4942      	ldr	r1, [pc, #264]	; (8002440 <__aeabi_dmul+0x578>)
 8002336:	9d02      	ldr	r5, [sp, #8]
 8002338:	468c      	mov	ip, r1
 800233a:	4465      	add	r5, ip
 800233c:	40ac      	lsls	r4, r5
 800233e:	4320      	orrs	r0, r4
 8002340:	1e41      	subs	r1, r0, #1
 8002342:	4188      	sbcs	r0, r1
 8002344:	4318      	orrs	r0, r3
 8002346:	2307      	movs	r3, #7
 8002348:	001d      	movs	r5, r3
 800234a:	2400      	movs	r4, #0
 800234c:	4005      	ands	r5, r0
 800234e:	4203      	tst	r3, r0
 8002350:	d04a      	beq.n	80023e8 <__aeabi_dmul+0x520>
 8002352:	230f      	movs	r3, #15
 8002354:	2400      	movs	r4, #0
 8002356:	4003      	ands	r3, r0
 8002358:	2b04      	cmp	r3, #4
 800235a:	d042      	beq.n	80023e2 <__aeabi_dmul+0x51a>
 800235c:	1d03      	adds	r3, r0, #4
 800235e:	4283      	cmp	r3, r0
 8002360:	4180      	sbcs	r0, r0
 8002362:	4240      	negs	r0, r0
 8002364:	1824      	adds	r4, r4, r0
 8002366:	0018      	movs	r0, r3
 8002368:	0223      	lsls	r3, r4, #8
 800236a:	d53a      	bpl.n	80023e2 <__aeabi_dmul+0x51a>
 800236c:	2301      	movs	r3, #1
 800236e:	2400      	movs	r4, #0
 8002370:	2500      	movs	r5, #0
 8002372:	e61b      	b.n	8001fac <__aeabi_dmul+0xe4>
 8002374:	f000 fd64 	bl	8002e40 <__clzsi2>
 8002378:	0001      	movs	r1, r0
 800237a:	0003      	movs	r3, r0
 800237c:	3115      	adds	r1, #21
 800237e:	3320      	adds	r3, #32
 8002380:	291c      	cmp	r1, #28
 8002382:	dd8f      	ble.n	80022a4 <__aeabi_dmul+0x3dc>
 8002384:	3808      	subs	r0, #8
 8002386:	2200      	movs	r2, #0
 8002388:	4084      	lsls	r4, r0
 800238a:	4692      	mov	sl, r2
 800238c:	46a3      	mov	fp, r4
 800238e:	e796      	b.n	80022be <__aeabi_dmul+0x3f6>
 8002390:	f000 fd56 	bl	8002e40 <__clzsi2>
 8002394:	0001      	movs	r1, r0
 8002396:	0003      	movs	r3, r0
 8002398:	3115      	adds	r1, #21
 800239a:	3320      	adds	r3, #32
 800239c:	291c      	cmp	r1, #28
 800239e:	dc00      	bgt.n	80023a2 <__aeabi_dmul+0x4da>
 80023a0:	e758      	b.n	8002254 <__aeabi_dmul+0x38c>
 80023a2:	0002      	movs	r2, r0
 80023a4:	464c      	mov	r4, r9
 80023a6:	3a08      	subs	r2, #8
 80023a8:	2000      	movs	r0, #0
 80023aa:	4094      	lsls	r4, r2
 80023ac:	e75d      	b.n	800226a <__aeabi_dmul+0x3a2>
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	e711      	b.n	80021d8 <__aeabi_dmul+0x310>
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <__aeabi_dmul+0x57c>)
 80023b6:	0026      	movs	r6, r4
 80023b8:	469c      	mov	ip, r3
 80023ba:	0003      	movs	r3, r0
 80023bc:	9d02      	ldr	r5, [sp, #8]
 80023be:	40cb      	lsrs	r3, r1
 80023c0:	4465      	add	r5, ip
 80023c2:	40ae      	lsls	r6, r5
 80023c4:	431e      	orrs	r6, r3
 80023c6:	0003      	movs	r3, r0
 80023c8:	40ab      	lsls	r3, r5
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	4183      	sbcs	r3, r0
 80023ce:	0030      	movs	r0, r6
 80023d0:	4318      	orrs	r0, r3
 80023d2:	40cc      	lsrs	r4, r1
 80023d4:	0743      	lsls	r3, r0, #29
 80023d6:	d0c7      	beq.n	8002368 <__aeabi_dmul+0x4a0>
 80023d8:	230f      	movs	r3, #15
 80023da:	4003      	ands	r3, r0
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d1bd      	bne.n	800235c <__aeabi_dmul+0x494>
 80023e0:	e7c2      	b.n	8002368 <__aeabi_dmul+0x4a0>
 80023e2:	0765      	lsls	r5, r4, #29
 80023e4:	0264      	lsls	r4, r4, #9
 80023e6:	0b24      	lsrs	r4, r4, #12
 80023e8:	08c0      	lsrs	r0, r0, #3
 80023ea:	2300      	movs	r3, #0
 80023ec:	4305      	orrs	r5, r0
 80023ee:	e5dd      	b.n	8001fac <__aeabi_dmul+0xe4>
 80023f0:	2500      	movs	r5, #0
 80023f2:	2302      	movs	r3, #2
 80023f4:	2e0f      	cmp	r6, #15
 80023f6:	d10c      	bne.n	8002412 <__aeabi_dmul+0x54a>
 80023f8:	2480      	movs	r4, #128	; 0x80
 80023fa:	465b      	mov	r3, fp
 80023fc:	0324      	lsls	r4, r4, #12
 80023fe:	4223      	tst	r3, r4
 8002400:	d00e      	beq.n	8002420 <__aeabi_dmul+0x558>
 8002402:	4221      	tst	r1, r4
 8002404:	d10c      	bne.n	8002420 <__aeabi_dmul+0x558>
 8002406:	430c      	orrs	r4, r1
 8002408:	0324      	lsls	r4, r4, #12
 800240a:	003a      	movs	r2, r7
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <__aeabi_dmul+0x580>)
 800240e:	0b24      	lsrs	r4, r4, #12
 8002410:	e5cc      	b.n	8001fac <__aeabi_dmul+0xe4>
 8002412:	2e0b      	cmp	r6, #11
 8002414:	d000      	beq.n	8002418 <__aeabi_dmul+0x550>
 8002416:	e5a2      	b.n	8001f5e <__aeabi_dmul+0x96>
 8002418:	468b      	mov	fp, r1
 800241a:	46aa      	mov	sl, r5
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	e5f7      	b.n	8002010 <__aeabi_dmul+0x148>
 8002420:	2480      	movs	r4, #128	; 0x80
 8002422:	465b      	mov	r3, fp
 8002424:	0324      	lsls	r4, r4, #12
 8002426:	431c      	orrs	r4, r3
 8002428:	0324      	lsls	r4, r4, #12
 800242a:	4642      	mov	r2, r8
 800242c:	4655      	mov	r5, sl
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <__aeabi_dmul+0x580>)
 8002430:	0b24      	lsrs	r4, r4, #12
 8002432:	e5bb      	b.n	8001fac <__aeabi_dmul+0xe4>
 8002434:	464d      	mov	r5, r9
 8002436:	0021      	movs	r1, r4
 8002438:	2303      	movs	r3, #3
 800243a:	e7db      	b.n	80023f4 <__aeabi_dmul+0x52c>
 800243c:	fffffc0d 	.word	0xfffffc0d
 8002440:	0000043e 	.word	0x0000043e
 8002444:	0000041e 	.word	0x0000041e
 8002448:	000007ff 	.word	0x000007ff

0800244c <__aeabi_dsub>:
 800244c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244e:	4657      	mov	r7, sl
 8002450:	464e      	mov	r6, r9
 8002452:	4645      	mov	r5, r8
 8002454:	46de      	mov	lr, fp
 8002456:	b5e0      	push	{r5, r6, r7, lr}
 8002458:	000d      	movs	r5, r1
 800245a:	0004      	movs	r4, r0
 800245c:	0019      	movs	r1, r3
 800245e:	0010      	movs	r0, r2
 8002460:	032b      	lsls	r3, r5, #12
 8002462:	0a5b      	lsrs	r3, r3, #9
 8002464:	0f62      	lsrs	r2, r4, #29
 8002466:	431a      	orrs	r2, r3
 8002468:	00e3      	lsls	r3, r4, #3
 800246a:	030c      	lsls	r4, r1, #12
 800246c:	0a64      	lsrs	r4, r4, #9
 800246e:	0f47      	lsrs	r7, r0, #29
 8002470:	4327      	orrs	r7, r4
 8002472:	4cd0      	ldr	r4, [pc, #832]	; (80027b4 <__aeabi_dsub+0x368>)
 8002474:	006e      	lsls	r6, r5, #1
 8002476:	4691      	mov	r9, r2
 8002478:	b083      	sub	sp, #12
 800247a:	004a      	lsls	r2, r1, #1
 800247c:	00c0      	lsls	r0, r0, #3
 800247e:	4698      	mov	r8, r3
 8002480:	46a2      	mov	sl, r4
 8002482:	0d76      	lsrs	r6, r6, #21
 8002484:	0fed      	lsrs	r5, r5, #31
 8002486:	0d52      	lsrs	r2, r2, #21
 8002488:	0fc9      	lsrs	r1, r1, #31
 800248a:	9001      	str	r0, [sp, #4]
 800248c:	42a2      	cmp	r2, r4
 800248e:	d100      	bne.n	8002492 <__aeabi_dsub+0x46>
 8002490:	e0b9      	b.n	8002606 <__aeabi_dsub+0x1ba>
 8002492:	2401      	movs	r4, #1
 8002494:	4061      	eors	r1, r4
 8002496:	468b      	mov	fp, r1
 8002498:	428d      	cmp	r5, r1
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0x52>
 800249c:	e08d      	b.n	80025ba <__aeabi_dsub+0x16e>
 800249e:	1ab4      	subs	r4, r6, r2
 80024a0:	46a4      	mov	ip, r4
 80024a2:	2c00      	cmp	r4, #0
 80024a4:	dc00      	bgt.n	80024a8 <__aeabi_dsub+0x5c>
 80024a6:	e0b7      	b.n	8002618 <__aeabi_dsub+0x1cc>
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x62>
 80024ac:	e0cb      	b.n	8002646 <__aeabi_dsub+0x1fa>
 80024ae:	4ac1      	ldr	r2, [pc, #772]	; (80027b4 <__aeabi_dsub+0x368>)
 80024b0:	4296      	cmp	r6, r2
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dsub+0x6a>
 80024b4:	e186      	b.n	80027c4 <__aeabi_dsub+0x378>
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	0412      	lsls	r2, r2, #16
 80024ba:	4317      	orrs	r7, r2
 80024bc:	4662      	mov	r2, ip
 80024be:	2a38      	cmp	r2, #56	; 0x38
 80024c0:	dd00      	ble.n	80024c4 <__aeabi_dsub+0x78>
 80024c2:	e1a4      	b.n	800280e <__aeabi_dsub+0x3c2>
 80024c4:	2a1f      	cmp	r2, #31
 80024c6:	dd00      	ble.n	80024ca <__aeabi_dsub+0x7e>
 80024c8:	e21d      	b.n	8002906 <__aeabi_dsub+0x4ba>
 80024ca:	4661      	mov	r1, ip
 80024cc:	2220      	movs	r2, #32
 80024ce:	003c      	movs	r4, r7
 80024d0:	1a52      	subs	r2, r2, r1
 80024d2:	0001      	movs	r1, r0
 80024d4:	4090      	lsls	r0, r2
 80024d6:	4094      	lsls	r4, r2
 80024d8:	1e42      	subs	r2, r0, #1
 80024da:	4190      	sbcs	r0, r2
 80024dc:	4662      	mov	r2, ip
 80024de:	46a0      	mov	r8, r4
 80024e0:	4664      	mov	r4, ip
 80024e2:	40d7      	lsrs	r7, r2
 80024e4:	464a      	mov	r2, r9
 80024e6:	40e1      	lsrs	r1, r4
 80024e8:	4644      	mov	r4, r8
 80024ea:	1bd2      	subs	r2, r2, r7
 80024ec:	4691      	mov	r9, r2
 80024ee:	430c      	orrs	r4, r1
 80024f0:	4304      	orrs	r4, r0
 80024f2:	1b1c      	subs	r4, r3, r4
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	4192      	sbcs	r2, r2
 80024f8:	464b      	mov	r3, r9
 80024fa:	4252      	negs	r2, r2
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	469a      	mov	sl, r3
 8002500:	4653      	mov	r3, sl
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	d400      	bmi.n	8002508 <__aeabi_dsub+0xbc>
 8002506:	e12b      	b.n	8002760 <__aeabi_dsub+0x314>
 8002508:	4653      	mov	r3, sl
 800250a:	025a      	lsls	r2, r3, #9
 800250c:	0a53      	lsrs	r3, r2, #9
 800250e:	469a      	mov	sl, r3
 8002510:	4653      	mov	r3, sl
 8002512:	2b00      	cmp	r3, #0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0xcc>
 8002516:	e166      	b.n	80027e6 <__aeabi_dsub+0x39a>
 8002518:	4650      	mov	r0, sl
 800251a:	f000 fc91 	bl	8002e40 <__clzsi2>
 800251e:	0003      	movs	r3, r0
 8002520:	3b08      	subs	r3, #8
 8002522:	2220      	movs	r2, #32
 8002524:	0020      	movs	r0, r4
 8002526:	1ad2      	subs	r2, r2, r3
 8002528:	4651      	mov	r1, sl
 800252a:	40d0      	lsrs	r0, r2
 800252c:	4099      	lsls	r1, r3
 800252e:	0002      	movs	r2, r0
 8002530:	409c      	lsls	r4, r3
 8002532:	430a      	orrs	r2, r1
 8002534:	429e      	cmp	r6, r3
 8002536:	dd00      	ble.n	800253a <__aeabi_dsub+0xee>
 8002538:	e164      	b.n	8002804 <__aeabi_dsub+0x3b8>
 800253a:	1b9b      	subs	r3, r3, r6
 800253c:	1c59      	adds	r1, r3, #1
 800253e:	291f      	cmp	r1, #31
 8002540:	dd00      	ble.n	8002544 <__aeabi_dsub+0xf8>
 8002542:	e0fe      	b.n	8002742 <__aeabi_dsub+0x2f6>
 8002544:	2320      	movs	r3, #32
 8002546:	0010      	movs	r0, r2
 8002548:	0026      	movs	r6, r4
 800254a:	1a5b      	subs	r3, r3, r1
 800254c:	409c      	lsls	r4, r3
 800254e:	4098      	lsls	r0, r3
 8002550:	40ce      	lsrs	r6, r1
 8002552:	40ca      	lsrs	r2, r1
 8002554:	1e63      	subs	r3, r4, #1
 8002556:	419c      	sbcs	r4, r3
 8002558:	4330      	orrs	r0, r6
 800255a:	4692      	mov	sl, r2
 800255c:	2600      	movs	r6, #0
 800255e:	4304      	orrs	r4, r0
 8002560:	0763      	lsls	r3, r4, #29
 8002562:	d009      	beq.n	8002578 <__aeabi_dsub+0x12c>
 8002564:	230f      	movs	r3, #15
 8002566:	4023      	ands	r3, r4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d005      	beq.n	8002578 <__aeabi_dsub+0x12c>
 800256c:	1d23      	adds	r3, r4, #4
 800256e:	42a3      	cmp	r3, r4
 8002570:	41a4      	sbcs	r4, r4
 8002572:	4264      	negs	r4, r4
 8002574:	44a2      	add	sl, r4
 8002576:	001c      	movs	r4, r3
 8002578:	4653      	mov	r3, sl
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	d400      	bmi.n	8002580 <__aeabi_dsub+0x134>
 800257e:	e0f2      	b.n	8002766 <__aeabi_dsub+0x31a>
 8002580:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <__aeabi_dsub+0x368>)
 8002582:	3601      	adds	r6, #1
 8002584:	429e      	cmp	r6, r3
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x13e>
 8002588:	e10f      	b.n	80027aa <__aeabi_dsub+0x35e>
 800258a:	4653      	mov	r3, sl
 800258c:	498a      	ldr	r1, [pc, #552]	; (80027b8 <__aeabi_dsub+0x36c>)
 800258e:	08e4      	lsrs	r4, r4, #3
 8002590:	400b      	ands	r3, r1
 8002592:	0019      	movs	r1, r3
 8002594:	075b      	lsls	r3, r3, #29
 8002596:	4323      	orrs	r3, r4
 8002598:	0572      	lsls	r2, r6, #21
 800259a:	024c      	lsls	r4, r1, #9
 800259c:	0b24      	lsrs	r4, r4, #12
 800259e:	0d52      	lsrs	r2, r2, #21
 80025a0:	0512      	lsls	r2, r2, #20
 80025a2:	4322      	orrs	r2, r4
 80025a4:	07ed      	lsls	r5, r5, #31
 80025a6:	432a      	orrs	r2, r5
 80025a8:	0018      	movs	r0, r3
 80025aa:	0011      	movs	r1, r2
 80025ac:	b003      	add	sp, #12
 80025ae:	bcf0      	pop	{r4, r5, r6, r7}
 80025b0:	46bb      	mov	fp, r7
 80025b2:	46b2      	mov	sl, r6
 80025b4:	46a9      	mov	r9, r5
 80025b6:	46a0      	mov	r8, r4
 80025b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ba:	1ab4      	subs	r4, r6, r2
 80025bc:	46a4      	mov	ip, r4
 80025be:	2c00      	cmp	r4, #0
 80025c0:	dd59      	ble.n	8002676 <__aeabi_dsub+0x22a>
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d100      	bne.n	80025c8 <__aeabi_dsub+0x17c>
 80025c6:	e0b0      	b.n	800272a <__aeabi_dsub+0x2de>
 80025c8:	4556      	cmp	r6, sl
 80025ca:	d100      	bne.n	80025ce <__aeabi_dsub+0x182>
 80025cc:	e0fa      	b.n	80027c4 <__aeabi_dsub+0x378>
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	0412      	lsls	r2, r2, #16
 80025d2:	4317      	orrs	r7, r2
 80025d4:	4662      	mov	r2, ip
 80025d6:	2a38      	cmp	r2, #56	; 0x38
 80025d8:	dd00      	ble.n	80025dc <__aeabi_dsub+0x190>
 80025da:	e0d4      	b.n	8002786 <__aeabi_dsub+0x33a>
 80025dc:	2a1f      	cmp	r2, #31
 80025de:	dc00      	bgt.n	80025e2 <__aeabi_dsub+0x196>
 80025e0:	e1c0      	b.n	8002964 <__aeabi_dsub+0x518>
 80025e2:	0039      	movs	r1, r7
 80025e4:	3a20      	subs	r2, #32
 80025e6:	40d1      	lsrs	r1, r2
 80025e8:	4662      	mov	r2, ip
 80025ea:	2a20      	cmp	r2, #32
 80025ec:	d006      	beq.n	80025fc <__aeabi_dsub+0x1b0>
 80025ee:	4664      	mov	r4, ip
 80025f0:	2240      	movs	r2, #64	; 0x40
 80025f2:	1b12      	subs	r2, r2, r4
 80025f4:	003c      	movs	r4, r7
 80025f6:	4094      	lsls	r4, r2
 80025f8:	4304      	orrs	r4, r0
 80025fa:	9401      	str	r4, [sp, #4]
 80025fc:	9c01      	ldr	r4, [sp, #4]
 80025fe:	1e62      	subs	r2, r4, #1
 8002600:	4194      	sbcs	r4, r2
 8002602:	430c      	orrs	r4, r1
 8002604:	e0c3      	b.n	800278e <__aeabi_dsub+0x342>
 8002606:	003c      	movs	r4, r7
 8002608:	4304      	orrs	r4, r0
 800260a:	d02b      	beq.n	8002664 <__aeabi_dsub+0x218>
 800260c:	468b      	mov	fp, r1
 800260e:	428d      	cmp	r5, r1
 8002610:	d02e      	beq.n	8002670 <__aeabi_dsub+0x224>
 8002612:	4c6a      	ldr	r4, [pc, #424]	; (80027bc <__aeabi_dsub+0x370>)
 8002614:	46a4      	mov	ip, r4
 8002616:	44b4      	add	ip, r6
 8002618:	4664      	mov	r4, ip
 800261a:	2c00      	cmp	r4, #0
 800261c:	d05f      	beq.n	80026de <__aeabi_dsub+0x292>
 800261e:	1b94      	subs	r4, r2, r6
 8002620:	46a4      	mov	ip, r4
 8002622:	2e00      	cmp	r6, #0
 8002624:	d000      	beq.n	8002628 <__aeabi_dsub+0x1dc>
 8002626:	e120      	b.n	800286a <__aeabi_dsub+0x41e>
 8002628:	464c      	mov	r4, r9
 800262a:	431c      	orrs	r4, r3
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x1e4>
 800262e:	e1c7      	b.n	80029c0 <__aeabi_dsub+0x574>
 8002630:	4661      	mov	r1, ip
 8002632:	1e4c      	subs	r4, r1, #1
 8002634:	2901      	cmp	r1, #1
 8002636:	d100      	bne.n	800263a <__aeabi_dsub+0x1ee>
 8002638:	e223      	b.n	8002a82 <__aeabi_dsub+0x636>
 800263a:	4d5e      	ldr	r5, [pc, #376]	; (80027b4 <__aeabi_dsub+0x368>)
 800263c:	45ac      	cmp	ip, r5
 800263e:	d100      	bne.n	8002642 <__aeabi_dsub+0x1f6>
 8002640:	e1d8      	b.n	80029f4 <__aeabi_dsub+0x5a8>
 8002642:	46a4      	mov	ip, r4
 8002644:	e11a      	b.n	800287c <__aeabi_dsub+0x430>
 8002646:	003a      	movs	r2, r7
 8002648:	4302      	orrs	r2, r0
 800264a:	d100      	bne.n	800264e <__aeabi_dsub+0x202>
 800264c:	e0e4      	b.n	8002818 <__aeabi_dsub+0x3cc>
 800264e:	0022      	movs	r2, r4
 8002650:	3a01      	subs	r2, #1
 8002652:	2c01      	cmp	r4, #1
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x20c>
 8002656:	e1c3      	b.n	80029e0 <__aeabi_dsub+0x594>
 8002658:	4956      	ldr	r1, [pc, #344]	; (80027b4 <__aeabi_dsub+0x368>)
 800265a:	428c      	cmp	r4, r1
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x214>
 800265e:	e0b1      	b.n	80027c4 <__aeabi_dsub+0x378>
 8002660:	4694      	mov	ip, r2
 8002662:	e72b      	b.n	80024bc <__aeabi_dsub+0x70>
 8002664:	2401      	movs	r4, #1
 8002666:	4061      	eors	r1, r4
 8002668:	468b      	mov	fp, r1
 800266a:	428d      	cmp	r5, r1
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x224>
 800266e:	e716      	b.n	800249e <__aeabi_dsub+0x52>
 8002670:	4952      	ldr	r1, [pc, #328]	; (80027bc <__aeabi_dsub+0x370>)
 8002672:	468c      	mov	ip, r1
 8002674:	44b4      	add	ip, r6
 8002676:	4664      	mov	r4, ip
 8002678:	2c00      	cmp	r4, #0
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x232>
 800267c:	e0d3      	b.n	8002826 <__aeabi_dsub+0x3da>
 800267e:	1b91      	subs	r1, r2, r6
 8002680:	468c      	mov	ip, r1
 8002682:	2e00      	cmp	r6, #0
 8002684:	d100      	bne.n	8002688 <__aeabi_dsub+0x23c>
 8002686:	e15e      	b.n	8002946 <__aeabi_dsub+0x4fa>
 8002688:	494a      	ldr	r1, [pc, #296]	; (80027b4 <__aeabi_dsub+0x368>)
 800268a:	428a      	cmp	r2, r1
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x244>
 800268e:	e1be      	b.n	8002a0e <__aeabi_dsub+0x5c2>
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	464c      	mov	r4, r9
 8002694:	0409      	lsls	r1, r1, #16
 8002696:	430c      	orrs	r4, r1
 8002698:	46a1      	mov	r9, r4
 800269a:	4661      	mov	r1, ip
 800269c:	2938      	cmp	r1, #56	; 0x38
 800269e:	dd00      	ble.n	80026a2 <__aeabi_dsub+0x256>
 80026a0:	e1ba      	b.n	8002a18 <__aeabi_dsub+0x5cc>
 80026a2:	291f      	cmp	r1, #31
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dsub+0x25c>
 80026a6:	e227      	b.n	8002af8 <__aeabi_dsub+0x6ac>
 80026a8:	2420      	movs	r4, #32
 80026aa:	1a64      	subs	r4, r4, r1
 80026ac:	4649      	mov	r1, r9
 80026ae:	40a1      	lsls	r1, r4
 80026b0:	001e      	movs	r6, r3
 80026b2:	4688      	mov	r8, r1
 80026b4:	4661      	mov	r1, ip
 80026b6:	40a3      	lsls	r3, r4
 80026b8:	40ce      	lsrs	r6, r1
 80026ba:	4641      	mov	r1, r8
 80026bc:	1e5c      	subs	r4, r3, #1
 80026be:	41a3      	sbcs	r3, r4
 80026c0:	4331      	orrs	r1, r6
 80026c2:	4319      	orrs	r1, r3
 80026c4:	000c      	movs	r4, r1
 80026c6:	4663      	mov	r3, ip
 80026c8:	4649      	mov	r1, r9
 80026ca:	40d9      	lsrs	r1, r3
 80026cc:	187f      	adds	r7, r7, r1
 80026ce:	1824      	adds	r4, r4, r0
 80026d0:	4284      	cmp	r4, r0
 80026d2:	419b      	sbcs	r3, r3
 80026d4:	425b      	negs	r3, r3
 80026d6:	469a      	mov	sl, r3
 80026d8:	0016      	movs	r6, r2
 80026da:	44ba      	add	sl, r7
 80026dc:	e05d      	b.n	800279a <__aeabi_dsub+0x34e>
 80026de:	4c38      	ldr	r4, [pc, #224]	; (80027c0 <__aeabi_dsub+0x374>)
 80026e0:	1c72      	adds	r2, r6, #1
 80026e2:	4222      	tst	r2, r4
 80026e4:	d000      	beq.n	80026e8 <__aeabi_dsub+0x29c>
 80026e6:	e0df      	b.n	80028a8 <__aeabi_dsub+0x45c>
 80026e8:	464a      	mov	r2, r9
 80026ea:	431a      	orrs	r2, r3
 80026ec:	2e00      	cmp	r6, #0
 80026ee:	d000      	beq.n	80026f2 <__aeabi_dsub+0x2a6>
 80026f0:	e15c      	b.n	80029ac <__aeabi_dsub+0x560>
 80026f2:	2a00      	cmp	r2, #0
 80026f4:	d100      	bne.n	80026f8 <__aeabi_dsub+0x2ac>
 80026f6:	e1cf      	b.n	8002a98 <__aeabi_dsub+0x64c>
 80026f8:	003a      	movs	r2, r7
 80026fa:	4302      	orrs	r2, r0
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x2b4>
 80026fe:	e17f      	b.n	8002a00 <__aeabi_dsub+0x5b4>
 8002700:	1a1c      	subs	r4, r3, r0
 8002702:	464a      	mov	r2, r9
 8002704:	42a3      	cmp	r3, r4
 8002706:	4189      	sbcs	r1, r1
 8002708:	1bd2      	subs	r2, r2, r7
 800270a:	4249      	negs	r1, r1
 800270c:	1a52      	subs	r2, r2, r1
 800270e:	4692      	mov	sl, r2
 8002710:	0212      	lsls	r2, r2, #8
 8002712:	d400      	bmi.n	8002716 <__aeabi_dsub+0x2ca>
 8002714:	e20a      	b.n	8002b2c <__aeabi_dsub+0x6e0>
 8002716:	1ac4      	subs	r4, r0, r3
 8002718:	42a0      	cmp	r0, r4
 800271a:	4180      	sbcs	r0, r0
 800271c:	464b      	mov	r3, r9
 800271e:	4240      	negs	r0, r0
 8002720:	1aff      	subs	r7, r7, r3
 8002722:	1a3b      	subs	r3, r7, r0
 8002724:	469a      	mov	sl, r3
 8002726:	465d      	mov	r5, fp
 8002728:	e71a      	b.n	8002560 <__aeabi_dsub+0x114>
 800272a:	003a      	movs	r2, r7
 800272c:	4302      	orrs	r2, r0
 800272e:	d073      	beq.n	8002818 <__aeabi_dsub+0x3cc>
 8002730:	0022      	movs	r2, r4
 8002732:	3a01      	subs	r2, #1
 8002734:	2c01      	cmp	r4, #1
 8002736:	d100      	bne.n	800273a <__aeabi_dsub+0x2ee>
 8002738:	e0cb      	b.n	80028d2 <__aeabi_dsub+0x486>
 800273a:	4554      	cmp	r4, sl
 800273c:	d042      	beq.n	80027c4 <__aeabi_dsub+0x378>
 800273e:	4694      	mov	ip, r2
 8002740:	e748      	b.n	80025d4 <__aeabi_dsub+0x188>
 8002742:	0010      	movs	r0, r2
 8002744:	3b1f      	subs	r3, #31
 8002746:	40d8      	lsrs	r0, r3
 8002748:	2920      	cmp	r1, #32
 800274a:	d003      	beq.n	8002754 <__aeabi_dsub+0x308>
 800274c:	2340      	movs	r3, #64	; 0x40
 800274e:	1a5b      	subs	r3, r3, r1
 8002750:	409a      	lsls	r2, r3
 8002752:	4314      	orrs	r4, r2
 8002754:	1e63      	subs	r3, r4, #1
 8002756:	419c      	sbcs	r4, r3
 8002758:	2300      	movs	r3, #0
 800275a:	2600      	movs	r6, #0
 800275c:	469a      	mov	sl, r3
 800275e:	4304      	orrs	r4, r0
 8002760:	0763      	lsls	r3, r4, #29
 8002762:	d000      	beq.n	8002766 <__aeabi_dsub+0x31a>
 8002764:	e6fe      	b.n	8002564 <__aeabi_dsub+0x118>
 8002766:	4652      	mov	r2, sl
 8002768:	08e3      	lsrs	r3, r4, #3
 800276a:	0752      	lsls	r2, r2, #29
 800276c:	4313      	orrs	r3, r2
 800276e:	4652      	mov	r2, sl
 8002770:	46b4      	mov	ip, r6
 8002772:	08d2      	lsrs	r2, r2, #3
 8002774:	490f      	ldr	r1, [pc, #60]	; (80027b4 <__aeabi_dsub+0x368>)
 8002776:	458c      	cmp	ip, r1
 8002778:	d02a      	beq.n	80027d0 <__aeabi_dsub+0x384>
 800277a:	0312      	lsls	r2, r2, #12
 800277c:	0b14      	lsrs	r4, r2, #12
 800277e:	4662      	mov	r2, ip
 8002780:	0552      	lsls	r2, r2, #21
 8002782:	0d52      	lsrs	r2, r2, #21
 8002784:	e70c      	b.n	80025a0 <__aeabi_dsub+0x154>
 8002786:	003c      	movs	r4, r7
 8002788:	4304      	orrs	r4, r0
 800278a:	1e62      	subs	r2, r4, #1
 800278c:	4194      	sbcs	r4, r2
 800278e:	18e4      	adds	r4, r4, r3
 8002790:	429c      	cmp	r4, r3
 8002792:	4192      	sbcs	r2, r2
 8002794:	4252      	negs	r2, r2
 8002796:	444a      	add	r2, r9
 8002798:	4692      	mov	sl, r2
 800279a:	4653      	mov	r3, sl
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	d5df      	bpl.n	8002760 <__aeabi_dsub+0x314>
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <__aeabi_dsub+0x368>)
 80027a2:	3601      	adds	r6, #1
 80027a4:	429e      	cmp	r6, r3
 80027a6:	d000      	beq.n	80027aa <__aeabi_dsub+0x35e>
 80027a8:	e0a0      	b.n	80028ec <__aeabi_dsub+0x4a0>
 80027aa:	0032      	movs	r2, r6
 80027ac:	2400      	movs	r4, #0
 80027ae:	2300      	movs	r3, #0
 80027b0:	e6f6      	b.n	80025a0 <__aeabi_dsub+0x154>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	000007ff 	.word	0x000007ff
 80027b8:	ff7fffff 	.word	0xff7fffff
 80027bc:	fffff801 	.word	0xfffff801
 80027c0:	000007fe 	.word	0x000007fe
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	464a      	mov	r2, r9
 80027c8:	0752      	lsls	r2, r2, #29
 80027ca:	4313      	orrs	r3, r2
 80027cc:	464a      	mov	r2, r9
 80027ce:	08d2      	lsrs	r2, r2, #3
 80027d0:	0019      	movs	r1, r3
 80027d2:	4311      	orrs	r1, r2
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x38c>
 80027d6:	e1b5      	b.n	8002b44 <__aeabi_dsub+0x6f8>
 80027d8:	2480      	movs	r4, #128	; 0x80
 80027da:	0324      	lsls	r4, r4, #12
 80027dc:	4314      	orrs	r4, r2
 80027de:	0324      	lsls	r4, r4, #12
 80027e0:	4ad5      	ldr	r2, [pc, #852]	; (8002b38 <__aeabi_dsub+0x6ec>)
 80027e2:	0b24      	lsrs	r4, r4, #12
 80027e4:	e6dc      	b.n	80025a0 <__aeabi_dsub+0x154>
 80027e6:	0020      	movs	r0, r4
 80027e8:	f000 fb2a 	bl	8002e40 <__clzsi2>
 80027ec:	0003      	movs	r3, r0
 80027ee:	3318      	adds	r3, #24
 80027f0:	2b1f      	cmp	r3, #31
 80027f2:	dc00      	bgt.n	80027f6 <__aeabi_dsub+0x3aa>
 80027f4:	e695      	b.n	8002522 <__aeabi_dsub+0xd6>
 80027f6:	0022      	movs	r2, r4
 80027f8:	3808      	subs	r0, #8
 80027fa:	4082      	lsls	r2, r0
 80027fc:	2400      	movs	r4, #0
 80027fe:	429e      	cmp	r6, r3
 8002800:	dc00      	bgt.n	8002804 <__aeabi_dsub+0x3b8>
 8002802:	e69a      	b.n	800253a <__aeabi_dsub+0xee>
 8002804:	1af6      	subs	r6, r6, r3
 8002806:	4bcd      	ldr	r3, [pc, #820]	; (8002b3c <__aeabi_dsub+0x6f0>)
 8002808:	401a      	ands	r2, r3
 800280a:	4692      	mov	sl, r2
 800280c:	e6a8      	b.n	8002560 <__aeabi_dsub+0x114>
 800280e:	003c      	movs	r4, r7
 8002810:	4304      	orrs	r4, r0
 8002812:	1e62      	subs	r2, r4, #1
 8002814:	4194      	sbcs	r4, r2
 8002816:	e66c      	b.n	80024f2 <__aeabi_dsub+0xa6>
 8002818:	464a      	mov	r2, r9
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	0752      	lsls	r2, r2, #29
 800281e:	4313      	orrs	r3, r2
 8002820:	464a      	mov	r2, r9
 8002822:	08d2      	lsrs	r2, r2, #3
 8002824:	e7a6      	b.n	8002774 <__aeabi_dsub+0x328>
 8002826:	4cc6      	ldr	r4, [pc, #792]	; (8002b40 <__aeabi_dsub+0x6f4>)
 8002828:	1c72      	adds	r2, r6, #1
 800282a:	4222      	tst	r2, r4
 800282c:	d000      	beq.n	8002830 <__aeabi_dsub+0x3e4>
 800282e:	e0ac      	b.n	800298a <__aeabi_dsub+0x53e>
 8002830:	464a      	mov	r2, r9
 8002832:	431a      	orrs	r2, r3
 8002834:	2e00      	cmp	r6, #0
 8002836:	d000      	beq.n	800283a <__aeabi_dsub+0x3ee>
 8002838:	e105      	b.n	8002a46 <__aeabi_dsub+0x5fa>
 800283a:	2a00      	cmp	r2, #0
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x3f4>
 800283e:	e156      	b.n	8002aee <__aeabi_dsub+0x6a2>
 8002840:	003a      	movs	r2, r7
 8002842:	4302      	orrs	r2, r0
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x3fc>
 8002846:	e0db      	b.n	8002a00 <__aeabi_dsub+0x5b4>
 8002848:	181c      	adds	r4, r3, r0
 800284a:	429c      	cmp	r4, r3
 800284c:	419b      	sbcs	r3, r3
 800284e:	444f      	add	r7, r9
 8002850:	46ba      	mov	sl, r7
 8002852:	425b      	negs	r3, r3
 8002854:	449a      	add	sl, r3
 8002856:	4653      	mov	r3, sl
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	d400      	bmi.n	800285e <__aeabi_dsub+0x412>
 800285c:	e780      	b.n	8002760 <__aeabi_dsub+0x314>
 800285e:	4652      	mov	r2, sl
 8002860:	4bb6      	ldr	r3, [pc, #728]	; (8002b3c <__aeabi_dsub+0x6f0>)
 8002862:	2601      	movs	r6, #1
 8002864:	401a      	ands	r2, r3
 8002866:	4692      	mov	sl, r2
 8002868:	e77a      	b.n	8002760 <__aeabi_dsub+0x314>
 800286a:	4cb3      	ldr	r4, [pc, #716]	; (8002b38 <__aeabi_dsub+0x6ec>)
 800286c:	42a2      	cmp	r2, r4
 800286e:	d100      	bne.n	8002872 <__aeabi_dsub+0x426>
 8002870:	e0c0      	b.n	80029f4 <__aeabi_dsub+0x5a8>
 8002872:	2480      	movs	r4, #128	; 0x80
 8002874:	464d      	mov	r5, r9
 8002876:	0424      	lsls	r4, r4, #16
 8002878:	4325      	orrs	r5, r4
 800287a:	46a9      	mov	r9, r5
 800287c:	4664      	mov	r4, ip
 800287e:	2c38      	cmp	r4, #56	; 0x38
 8002880:	dc53      	bgt.n	800292a <__aeabi_dsub+0x4de>
 8002882:	4661      	mov	r1, ip
 8002884:	2c1f      	cmp	r4, #31
 8002886:	dd00      	ble.n	800288a <__aeabi_dsub+0x43e>
 8002888:	e0cd      	b.n	8002a26 <__aeabi_dsub+0x5da>
 800288a:	2520      	movs	r5, #32
 800288c:	001e      	movs	r6, r3
 800288e:	1b2d      	subs	r5, r5, r4
 8002890:	464c      	mov	r4, r9
 8002892:	40ab      	lsls	r3, r5
 8002894:	40ac      	lsls	r4, r5
 8002896:	40ce      	lsrs	r6, r1
 8002898:	1e5d      	subs	r5, r3, #1
 800289a:	41ab      	sbcs	r3, r5
 800289c:	4334      	orrs	r4, r6
 800289e:	4323      	orrs	r3, r4
 80028a0:	464c      	mov	r4, r9
 80028a2:	40cc      	lsrs	r4, r1
 80028a4:	1b3f      	subs	r7, r7, r4
 80028a6:	e045      	b.n	8002934 <__aeabi_dsub+0x4e8>
 80028a8:	464a      	mov	r2, r9
 80028aa:	1a1c      	subs	r4, r3, r0
 80028ac:	1bd1      	subs	r1, r2, r7
 80028ae:	42a3      	cmp	r3, r4
 80028b0:	4192      	sbcs	r2, r2
 80028b2:	4252      	negs	r2, r2
 80028b4:	4692      	mov	sl, r2
 80028b6:	000a      	movs	r2, r1
 80028b8:	4651      	mov	r1, sl
 80028ba:	1a52      	subs	r2, r2, r1
 80028bc:	4692      	mov	sl, r2
 80028be:	0212      	lsls	r2, r2, #8
 80028c0:	d500      	bpl.n	80028c4 <__aeabi_dsub+0x478>
 80028c2:	e083      	b.n	80029cc <__aeabi_dsub+0x580>
 80028c4:	4653      	mov	r3, sl
 80028c6:	4323      	orrs	r3, r4
 80028c8:	d000      	beq.n	80028cc <__aeabi_dsub+0x480>
 80028ca:	e621      	b.n	8002510 <__aeabi_dsub+0xc4>
 80028cc:	2200      	movs	r2, #0
 80028ce:	2500      	movs	r5, #0
 80028d0:	e753      	b.n	800277a <__aeabi_dsub+0x32e>
 80028d2:	181c      	adds	r4, r3, r0
 80028d4:	429c      	cmp	r4, r3
 80028d6:	419b      	sbcs	r3, r3
 80028d8:	444f      	add	r7, r9
 80028da:	46ba      	mov	sl, r7
 80028dc:	425b      	negs	r3, r3
 80028de:	449a      	add	sl, r3
 80028e0:	4653      	mov	r3, sl
 80028e2:	2601      	movs	r6, #1
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	d400      	bmi.n	80028ea <__aeabi_dsub+0x49e>
 80028e8:	e73a      	b.n	8002760 <__aeabi_dsub+0x314>
 80028ea:	2602      	movs	r6, #2
 80028ec:	4652      	mov	r2, sl
 80028ee:	4b93      	ldr	r3, [pc, #588]	; (8002b3c <__aeabi_dsub+0x6f0>)
 80028f0:	2101      	movs	r1, #1
 80028f2:	401a      	ands	r2, r3
 80028f4:	0013      	movs	r3, r2
 80028f6:	4021      	ands	r1, r4
 80028f8:	0862      	lsrs	r2, r4, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	07dc      	lsls	r4, r3, #31
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	469a      	mov	sl, r3
 8002902:	4314      	orrs	r4, r2
 8002904:	e62c      	b.n	8002560 <__aeabi_dsub+0x114>
 8002906:	0039      	movs	r1, r7
 8002908:	3a20      	subs	r2, #32
 800290a:	40d1      	lsrs	r1, r2
 800290c:	4662      	mov	r2, ip
 800290e:	2a20      	cmp	r2, #32
 8002910:	d006      	beq.n	8002920 <__aeabi_dsub+0x4d4>
 8002912:	4664      	mov	r4, ip
 8002914:	2240      	movs	r2, #64	; 0x40
 8002916:	1b12      	subs	r2, r2, r4
 8002918:	003c      	movs	r4, r7
 800291a:	4094      	lsls	r4, r2
 800291c:	4304      	orrs	r4, r0
 800291e:	9401      	str	r4, [sp, #4]
 8002920:	9c01      	ldr	r4, [sp, #4]
 8002922:	1e62      	subs	r2, r4, #1
 8002924:	4194      	sbcs	r4, r2
 8002926:	430c      	orrs	r4, r1
 8002928:	e5e3      	b.n	80024f2 <__aeabi_dsub+0xa6>
 800292a:	4649      	mov	r1, r9
 800292c:	4319      	orrs	r1, r3
 800292e:	000b      	movs	r3, r1
 8002930:	1e5c      	subs	r4, r3, #1
 8002932:	41a3      	sbcs	r3, r4
 8002934:	1ac4      	subs	r4, r0, r3
 8002936:	42a0      	cmp	r0, r4
 8002938:	419b      	sbcs	r3, r3
 800293a:	425b      	negs	r3, r3
 800293c:	1afb      	subs	r3, r7, r3
 800293e:	469a      	mov	sl, r3
 8002940:	465d      	mov	r5, fp
 8002942:	0016      	movs	r6, r2
 8002944:	e5dc      	b.n	8002500 <__aeabi_dsub+0xb4>
 8002946:	4649      	mov	r1, r9
 8002948:	4319      	orrs	r1, r3
 800294a:	d100      	bne.n	800294e <__aeabi_dsub+0x502>
 800294c:	e0ae      	b.n	8002aac <__aeabi_dsub+0x660>
 800294e:	4661      	mov	r1, ip
 8002950:	4664      	mov	r4, ip
 8002952:	3901      	subs	r1, #1
 8002954:	2c01      	cmp	r4, #1
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x50e>
 8002958:	e0e0      	b.n	8002b1c <__aeabi_dsub+0x6d0>
 800295a:	4c77      	ldr	r4, [pc, #476]	; (8002b38 <__aeabi_dsub+0x6ec>)
 800295c:	45a4      	cmp	ip, r4
 800295e:	d056      	beq.n	8002a0e <__aeabi_dsub+0x5c2>
 8002960:	468c      	mov	ip, r1
 8002962:	e69a      	b.n	800269a <__aeabi_dsub+0x24e>
 8002964:	4661      	mov	r1, ip
 8002966:	2220      	movs	r2, #32
 8002968:	003c      	movs	r4, r7
 800296a:	1a52      	subs	r2, r2, r1
 800296c:	4094      	lsls	r4, r2
 800296e:	0001      	movs	r1, r0
 8002970:	4090      	lsls	r0, r2
 8002972:	46a0      	mov	r8, r4
 8002974:	4664      	mov	r4, ip
 8002976:	1e42      	subs	r2, r0, #1
 8002978:	4190      	sbcs	r0, r2
 800297a:	4662      	mov	r2, ip
 800297c:	40e1      	lsrs	r1, r4
 800297e:	4644      	mov	r4, r8
 8002980:	40d7      	lsrs	r7, r2
 8002982:	430c      	orrs	r4, r1
 8002984:	4304      	orrs	r4, r0
 8002986:	44b9      	add	r9, r7
 8002988:	e701      	b.n	800278e <__aeabi_dsub+0x342>
 800298a:	496b      	ldr	r1, [pc, #428]	; (8002b38 <__aeabi_dsub+0x6ec>)
 800298c:	428a      	cmp	r2, r1
 800298e:	d100      	bne.n	8002992 <__aeabi_dsub+0x546>
 8002990:	e70c      	b.n	80027ac <__aeabi_dsub+0x360>
 8002992:	1818      	adds	r0, r3, r0
 8002994:	4298      	cmp	r0, r3
 8002996:	419b      	sbcs	r3, r3
 8002998:	444f      	add	r7, r9
 800299a:	425b      	negs	r3, r3
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	07dc      	lsls	r4, r3, #31
 80029a0:	0840      	lsrs	r0, r0, #1
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	469a      	mov	sl, r3
 80029a6:	0016      	movs	r6, r2
 80029a8:	4304      	orrs	r4, r0
 80029aa:	e6d9      	b.n	8002760 <__aeabi_dsub+0x314>
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	d000      	beq.n	80029b2 <__aeabi_dsub+0x566>
 80029b0:	e081      	b.n	8002ab6 <__aeabi_dsub+0x66a>
 80029b2:	003b      	movs	r3, r7
 80029b4:	4303      	orrs	r3, r0
 80029b6:	d11d      	bne.n	80029f4 <__aeabi_dsub+0x5a8>
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	2500      	movs	r5, #0
 80029bc:	0312      	lsls	r2, r2, #12
 80029be:	e70b      	b.n	80027d8 <__aeabi_dsub+0x38c>
 80029c0:	08c0      	lsrs	r0, r0, #3
 80029c2:	077b      	lsls	r3, r7, #29
 80029c4:	465d      	mov	r5, fp
 80029c6:	4303      	orrs	r3, r0
 80029c8:	08fa      	lsrs	r2, r7, #3
 80029ca:	e6d3      	b.n	8002774 <__aeabi_dsub+0x328>
 80029cc:	1ac4      	subs	r4, r0, r3
 80029ce:	42a0      	cmp	r0, r4
 80029d0:	4180      	sbcs	r0, r0
 80029d2:	464b      	mov	r3, r9
 80029d4:	4240      	negs	r0, r0
 80029d6:	1aff      	subs	r7, r7, r3
 80029d8:	1a3b      	subs	r3, r7, r0
 80029da:	469a      	mov	sl, r3
 80029dc:	465d      	mov	r5, fp
 80029de:	e597      	b.n	8002510 <__aeabi_dsub+0xc4>
 80029e0:	1a1c      	subs	r4, r3, r0
 80029e2:	464a      	mov	r2, r9
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	419b      	sbcs	r3, r3
 80029e8:	1bd7      	subs	r7, r2, r7
 80029ea:	425b      	negs	r3, r3
 80029ec:	1afb      	subs	r3, r7, r3
 80029ee:	469a      	mov	sl, r3
 80029f0:	2601      	movs	r6, #1
 80029f2:	e585      	b.n	8002500 <__aeabi_dsub+0xb4>
 80029f4:	08c0      	lsrs	r0, r0, #3
 80029f6:	077b      	lsls	r3, r7, #29
 80029f8:	465d      	mov	r5, fp
 80029fa:	4303      	orrs	r3, r0
 80029fc:	08fa      	lsrs	r2, r7, #3
 80029fe:	e6e7      	b.n	80027d0 <__aeabi_dsub+0x384>
 8002a00:	464a      	mov	r2, r9
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	0752      	lsls	r2, r2, #29
 8002a06:	4313      	orrs	r3, r2
 8002a08:	464a      	mov	r2, r9
 8002a0a:	08d2      	lsrs	r2, r2, #3
 8002a0c:	e6b5      	b.n	800277a <__aeabi_dsub+0x32e>
 8002a0e:	08c0      	lsrs	r0, r0, #3
 8002a10:	077b      	lsls	r3, r7, #29
 8002a12:	4303      	orrs	r3, r0
 8002a14:	08fa      	lsrs	r2, r7, #3
 8002a16:	e6db      	b.n	80027d0 <__aeabi_dsub+0x384>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	4319      	orrs	r1, r3
 8002a1c:	000b      	movs	r3, r1
 8002a1e:	1e59      	subs	r1, r3, #1
 8002a20:	418b      	sbcs	r3, r1
 8002a22:	001c      	movs	r4, r3
 8002a24:	e653      	b.n	80026ce <__aeabi_dsub+0x282>
 8002a26:	464d      	mov	r5, r9
 8002a28:	3c20      	subs	r4, #32
 8002a2a:	40e5      	lsrs	r5, r4
 8002a2c:	2920      	cmp	r1, #32
 8002a2e:	d005      	beq.n	8002a3c <__aeabi_dsub+0x5f0>
 8002a30:	2440      	movs	r4, #64	; 0x40
 8002a32:	1a64      	subs	r4, r4, r1
 8002a34:	4649      	mov	r1, r9
 8002a36:	40a1      	lsls	r1, r4
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	4698      	mov	r8, r3
 8002a3c:	4643      	mov	r3, r8
 8002a3e:	1e5c      	subs	r4, r3, #1
 8002a40:	41a3      	sbcs	r3, r4
 8002a42:	432b      	orrs	r3, r5
 8002a44:	e776      	b.n	8002934 <__aeabi_dsub+0x4e8>
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d0e1      	beq.n	8002a0e <__aeabi_dsub+0x5c2>
 8002a4a:	003a      	movs	r2, r7
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	4302      	orrs	r2, r0
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x608>
 8002a52:	e6b8      	b.n	80027c6 <__aeabi_dsub+0x37a>
 8002a54:	464a      	mov	r2, r9
 8002a56:	0752      	lsls	r2, r2, #29
 8002a58:	2480      	movs	r4, #128	; 0x80
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	464a      	mov	r2, r9
 8002a5e:	0324      	lsls	r4, r4, #12
 8002a60:	08d2      	lsrs	r2, r2, #3
 8002a62:	4222      	tst	r2, r4
 8002a64:	d007      	beq.n	8002a76 <__aeabi_dsub+0x62a>
 8002a66:	08fe      	lsrs	r6, r7, #3
 8002a68:	4226      	tst	r6, r4
 8002a6a:	d104      	bne.n	8002a76 <__aeabi_dsub+0x62a>
 8002a6c:	465d      	mov	r5, fp
 8002a6e:	0032      	movs	r2, r6
 8002a70:	08c3      	lsrs	r3, r0, #3
 8002a72:	077f      	lsls	r7, r7, #29
 8002a74:	433b      	orrs	r3, r7
 8002a76:	0f59      	lsrs	r1, r3, #29
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	0749      	lsls	r1, r1, #29
 8002a7c:	08db      	lsrs	r3, r3, #3
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	e6a6      	b.n	80027d0 <__aeabi_dsub+0x384>
 8002a82:	1ac4      	subs	r4, r0, r3
 8002a84:	42a0      	cmp	r0, r4
 8002a86:	4180      	sbcs	r0, r0
 8002a88:	464b      	mov	r3, r9
 8002a8a:	4240      	negs	r0, r0
 8002a8c:	1aff      	subs	r7, r7, r3
 8002a8e:	1a3b      	subs	r3, r7, r0
 8002a90:	469a      	mov	sl, r3
 8002a92:	465d      	mov	r5, fp
 8002a94:	2601      	movs	r6, #1
 8002a96:	e533      	b.n	8002500 <__aeabi_dsub+0xb4>
 8002a98:	003b      	movs	r3, r7
 8002a9a:	4303      	orrs	r3, r0
 8002a9c:	d100      	bne.n	8002aa0 <__aeabi_dsub+0x654>
 8002a9e:	e715      	b.n	80028cc <__aeabi_dsub+0x480>
 8002aa0:	08c0      	lsrs	r0, r0, #3
 8002aa2:	077b      	lsls	r3, r7, #29
 8002aa4:	465d      	mov	r5, fp
 8002aa6:	4303      	orrs	r3, r0
 8002aa8:	08fa      	lsrs	r2, r7, #3
 8002aaa:	e666      	b.n	800277a <__aeabi_dsub+0x32e>
 8002aac:	08c0      	lsrs	r0, r0, #3
 8002aae:	077b      	lsls	r3, r7, #29
 8002ab0:	4303      	orrs	r3, r0
 8002ab2:	08fa      	lsrs	r2, r7, #3
 8002ab4:	e65e      	b.n	8002774 <__aeabi_dsub+0x328>
 8002ab6:	003a      	movs	r2, r7
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	4302      	orrs	r2, r0
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x674>
 8002abe:	e682      	b.n	80027c6 <__aeabi_dsub+0x37a>
 8002ac0:	464a      	mov	r2, r9
 8002ac2:	0752      	lsls	r2, r2, #29
 8002ac4:	2480      	movs	r4, #128	; 0x80
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	464a      	mov	r2, r9
 8002aca:	0324      	lsls	r4, r4, #12
 8002acc:	08d2      	lsrs	r2, r2, #3
 8002ace:	4222      	tst	r2, r4
 8002ad0:	d007      	beq.n	8002ae2 <__aeabi_dsub+0x696>
 8002ad2:	08fe      	lsrs	r6, r7, #3
 8002ad4:	4226      	tst	r6, r4
 8002ad6:	d104      	bne.n	8002ae2 <__aeabi_dsub+0x696>
 8002ad8:	465d      	mov	r5, fp
 8002ada:	0032      	movs	r2, r6
 8002adc:	08c3      	lsrs	r3, r0, #3
 8002ade:	077f      	lsls	r7, r7, #29
 8002ae0:	433b      	orrs	r3, r7
 8002ae2:	0f59      	lsrs	r1, r3, #29
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	08db      	lsrs	r3, r3, #3
 8002ae8:	0749      	lsls	r1, r1, #29
 8002aea:	430b      	orrs	r3, r1
 8002aec:	e670      	b.n	80027d0 <__aeabi_dsub+0x384>
 8002aee:	08c0      	lsrs	r0, r0, #3
 8002af0:	077b      	lsls	r3, r7, #29
 8002af2:	4303      	orrs	r3, r0
 8002af4:	08fa      	lsrs	r2, r7, #3
 8002af6:	e640      	b.n	800277a <__aeabi_dsub+0x32e>
 8002af8:	464c      	mov	r4, r9
 8002afa:	3920      	subs	r1, #32
 8002afc:	40cc      	lsrs	r4, r1
 8002afe:	4661      	mov	r1, ip
 8002b00:	2920      	cmp	r1, #32
 8002b02:	d006      	beq.n	8002b12 <__aeabi_dsub+0x6c6>
 8002b04:	4666      	mov	r6, ip
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	1b89      	subs	r1, r1, r6
 8002b0a:	464e      	mov	r6, r9
 8002b0c:	408e      	lsls	r6, r1
 8002b0e:	4333      	orrs	r3, r6
 8002b10:	4698      	mov	r8, r3
 8002b12:	4643      	mov	r3, r8
 8002b14:	1e59      	subs	r1, r3, #1
 8002b16:	418b      	sbcs	r3, r1
 8002b18:	431c      	orrs	r4, r3
 8002b1a:	e5d8      	b.n	80026ce <__aeabi_dsub+0x282>
 8002b1c:	181c      	adds	r4, r3, r0
 8002b1e:	4284      	cmp	r4, r0
 8002b20:	4180      	sbcs	r0, r0
 8002b22:	444f      	add	r7, r9
 8002b24:	46ba      	mov	sl, r7
 8002b26:	4240      	negs	r0, r0
 8002b28:	4482      	add	sl, r0
 8002b2a:	e6d9      	b.n	80028e0 <__aeabi_dsub+0x494>
 8002b2c:	4653      	mov	r3, sl
 8002b2e:	4323      	orrs	r3, r4
 8002b30:	d100      	bne.n	8002b34 <__aeabi_dsub+0x6e8>
 8002b32:	e6cb      	b.n	80028cc <__aeabi_dsub+0x480>
 8002b34:	e614      	b.n	8002760 <__aeabi_dsub+0x314>
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	000007ff 	.word	0x000007ff
 8002b3c:	ff7fffff 	.word	0xff7fffff
 8002b40:	000007fe 	.word	0x000007fe
 8002b44:	2300      	movs	r3, #0
 8002b46:	4a01      	ldr	r2, [pc, #4]	; (8002b4c <__aeabi_dsub+0x700>)
 8002b48:	001c      	movs	r4, r3
 8002b4a:	e529      	b.n	80025a0 <__aeabi_dsub+0x154>
 8002b4c:	000007ff 	.word	0x000007ff

08002b50 <__aeabi_dcmpun>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	0005      	movs	r5, r0
 8002b54:	480c      	ldr	r0, [pc, #48]	; (8002b88 <__aeabi_dcmpun+0x38>)
 8002b56:	031c      	lsls	r4, r3, #12
 8002b58:	0016      	movs	r6, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	030a      	lsls	r2, r1, #12
 8002b5e:	0049      	lsls	r1, r1, #1
 8002b60:	0b12      	lsrs	r2, r2, #12
 8002b62:	0d49      	lsrs	r1, r1, #21
 8002b64:	0b24      	lsrs	r4, r4, #12
 8002b66:	0d5b      	lsrs	r3, r3, #21
 8002b68:	4281      	cmp	r1, r0
 8002b6a:	d008      	beq.n	8002b7e <__aeabi_dcmpun+0x2e>
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <__aeabi_dcmpun+0x38>)
 8002b6e:	2000      	movs	r0, #0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <__aeabi_dcmpun+0x2c>
 8002b74:	0020      	movs	r0, r4
 8002b76:	4330      	orrs	r0, r6
 8002b78:	1e43      	subs	r3, r0, #1
 8002b7a:	4198      	sbcs	r0, r3
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
 8002b7e:	2001      	movs	r0, #1
 8002b80:	432a      	orrs	r2, r5
 8002b82:	d1fb      	bne.n	8002b7c <__aeabi_dcmpun+0x2c>
 8002b84:	e7f2      	b.n	8002b6c <__aeabi_dcmpun+0x1c>
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	000007ff 	.word	0x000007ff

08002b8c <__aeabi_d2iz>:
 8002b8c:	000a      	movs	r2, r1
 8002b8e:	b530      	push	{r4, r5, lr}
 8002b90:	4c13      	ldr	r4, [pc, #76]	; (8002be0 <__aeabi_d2iz+0x54>)
 8002b92:	0053      	lsls	r3, r2, #1
 8002b94:	0309      	lsls	r1, r1, #12
 8002b96:	0005      	movs	r5, r0
 8002b98:	0b09      	lsrs	r1, r1, #12
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	0d5b      	lsrs	r3, r3, #21
 8002b9e:	0fd2      	lsrs	r2, r2, #31
 8002ba0:	42a3      	cmp	r3, r4
 8002ba2:	dd04      	ble.n	8002bae <__aeabi_d2iz+0x22>
 8002ba4:	480f      	ldr	r0, [pc, #60]	; (8002be4 <__aeabi_d2iz+0x58>)
 8002ba6:	4283      	cmp	r3, r0
 8002ba8:	dd02      	ble.n	8002bb0 <__aeabi_d2iz+0x24>
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <__aeabi_d2iz+0x5c>)
 8002bac:	18d0      	adds	r0, r2, r3
 8002bae:	bd30      	pop	{r4, r5, pc}
 8002bb0:	2080      	movs	r0, #128	; 0x80
 8002bb2:	0340      	lsls	r0, r0, #13
 8002bb4:	4301      	orrs	r1, r0
 8002bb6:	480d      	ldr	r0, [pc, #52]	; (8002bec <__aeabi_d2iz+0x60>)
 8002bb8:	1ac0      	subs	r0, r0, r3
 8002bba:	281f      	cmp	r0, #31
 8002bbc:	dd08      	ble.n	8002bd0 <__aeabi_d2iz+0x44>
 8002bbe:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <__aeabi_d2iz+0x64>)
 8002bc0:	1ac3      	subs	r3, r0, r3
 8002bc2:	40d9      	lsrs	r1, r3
 8002bc4:	000b      	movs	r3, r1
 8002bc6:	4258      	negs	r0, r3
 8002bc8:	2a00      	cmp	r2, #0
 8002bca:	d1f0      	bne.n	8002bae <__aeabi_d2iz+0x22>
 8002bcc:	0018      	movs	r0, r3
 8002bce:	e7ee      	b.n	8002bae <__aeabi_d2iz+0x22>
 8002bd0:	4c08      	ldr	r4, [pc, #32]	; (8002bf4 <__aeabi_d2iz+0x68>)
 8002bd2:	40c5      	lsrs	r5, r0
 8002bd4:	46a4      	mov	ip, r4
 8002bd6:	4463      	add	r3, ip
 8002bd8:	4099      	lsls	r1, r3
 8002bda:	000b      	movs	r3, r1
 8002bdc:	432b      	orrs	r3, r5
 8002bde:	e7f2      	b.n	8002bc6 <__aeabi_d2iz+0x3a>
 8002be0:	000003fe 	.word	0x000003fe
 8002be4:	0000041d 	.word	0x0000041d
 8002be8:	7fffffff 	.word	0x7fffffff
 8002bec:	00000433 	.word	0x00000433
 8002bf0:	00000413 	.word	0x00000413
 8002bf4:	fffffbed 	.word	0xfffffbed

08002bf8 <__aeabi_i2d>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d016      	beq.n	8002c2c <__aeabi_i2d+0x34>
 8002bfe:	17c3      	asrs	r3, r0, #31
 8002c00:	18c5      	adds	r5, r0, r3
 8002c02:	405d      	eors	r5, r3
 8002c04:	0fc4      	lsrs	r4, r0, #31
 8002c06:	0028      	movs	r0, r5
 8002c08:	f000 f91a 	bl	8002e40 <__clzsi2>
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <__aeabi_i2d+0x5c>)
 8002c0e:	1a1b      	subs	r3, r3, r0
 8002c10:	280a      	cmp	r0, #10
 8002c12:	dc16      	bgt.n	8002c42 <__aeabi_i2d+0x4a>
 8002c14:	0002      	movs	r2, r0
 8002c16:	002e      	movs	r6, r5
 8002c18:	3215      	adds	r2, #21
 8002c1a:	4096      	lsls	r6, r2
 8002c1c:	220b      	movs	r2, #11
 8002c1e:	1a12      	subs	r2, r2, r0
 8002c20:	40d5      	lsrs	r5, r2
 8002c22:	055b      	lsls	r3, r3, #21
 8002c24:	032d      	lsls	r5, r5, #12
 8002c26:	0b2d      	lsrs	r5, r5, #12
 8002c28:	0d5b      	lsrs	r3, r3, #21
 8002c2a:	e003      	b.n	8002c34 <__aeabi_i2d+0x3c>
 8002c2c:	2400      	movs	r4, #0
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2500      	movs	r5, #0
 8002c32:	2600      	movs	r6, #0
 8002c34:	051b      	lsls	r3, r3, #20
 8002c36:	432b      	orrs	r3, r5
 8002c38:	07e4      	lsls	r4, r4, #31
 8002c3a:	4323      	orrs	r3, r4
 8002c3c:	0030      	movs	r0, r6
 8002c3e:	0019      	movs	r1, r3
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
 8002c42:	380b      	subs	r0, #11
 8002c44:	4085      	lsls	r5, r0
 8002c46:	055b      	lsls	r3, r3, #21
 8002c48:	032d      	lsls	r5, r5, #12
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	0b2d      	lsrs	r5, r5, #12
 8002c4e:	0d5b      	lsrs	r3, r3, #21
 8002c50:	e7f0      	b.n	8002c34 <__aeabi_i2d+0x3c>
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	0000041e 	.word	0x0000041e

08002c58 <__aeabi_ui2d>:
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	1e04      	subs	r4, r0, #0
 8002c5c:	d010      	beq.n	8002c80 <__aeabi_ui2d+0x28>
 8002c5e:	f000 f8ef 	bl	8002e40 <__clzsi2>
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <__aeabi_ui2d+0x48>)
 8002c64:	1a1b      	subs	r3, r3, r0
 8002c66:	280a      	cmp	r0, #10
 8002c68:	dc11      	bgt.n	8002c8e <__aeabi_ui2d+0x36>
 8002c6a:	220b      	movs	r2, #11
 8002c6c:	0021      	movs	r1, r4
 8002c6e:	1a12      	subs	r2, r2, r0
 8002c70:	40d1      	lsrs	r1, r2
 8002c72:	3015      	adds	r0, #21
 8002c74:	030a      	lsls	r2, r1, #12
 8002c76:	055b      	lsls	r3, r3, #21
 8002c78:	4084      	lsls	r4, r0
 8002c7a:	0b12      	lsrs	r2, r2, #12
 8002c7c:	0d5b      	lsrs	r3, r3, #21
 8002c7e:	e001      	b.n	8002c84 <__aeabi_ui2d+0x2c>
 8002c80:	2300      	movs	r3, #0
 8002c82:	2200      	movs	r2, #0
 8002c84:	051b      	lsls	r3, r3, #20
 8002c86:	4313      	orrs	r3, r2
 8002c88:	0020      	movs	r0, r4
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	bd10      	pop	{r4, pc}
 8002c8e:	0022      	movs	r2, r4
 8002c90:	380b      	subs	r0, #11
 8002c92:	4082      	lsls	r2, r0
 8002c94:	055b      	lsls	r3, r3, #21
 8002c96:	0312      	lsls	r2, r2, #12
 8002c98:	2400      	movs	r4, #0
 8002c9a:	0b12      	lsrs	r2, r2, #12
 8002c9c:	0d5b      	lsrs	r3, r3, #21
 8002c9e:	e7f1      	b.n	8002c84 <__aeabi_ui2d+0x2c>
 8002ca0:	0000041e 	.word	0x0000041e

08002ca4 <__aeabi_f2d>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	0242      	lsls	r2, r0, #9
 8002ca8:	0043      	lsls	r3, r0, #1
 8002caa:	0fc4      	lsrs	r4, r0, #31
 8002cac:	20fe      	movs	r0, #254	; 0xfe
 8002cae:	0e1b      	lsrs	r3, r3, #24
 8002cb0:	1c59      	adds	r1, r3, #1
 8002cb2:	0a55      	lsrs	r5, r2, #9
 8002cb4:	4208      	tst	r0, r1
 8002cb6:	d00c      	beq.n	8002cd2 <__aeabi_f2d+0x2e>
 8002cb8:	21e0      	movs	r1, #224	; 0xe0
 8002cba:	0089      	lsls	r1, r1, #2
 8002cbc:	468c      	mov	ip, r1
 8002cbe:	076d      	lsls	r5, r5, #29
 8002cc0:	0b12      	lsrs	r2, r2, #12
 8002cc2:	4463      	add	r3, ip
 8002cc4:	051b      	lsls	r3, r3, #20
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	07e4      	lsls	r4, r4, #31
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	0028      	movs	r0, r5
 8002cce:	0019      	movs	r1, r3
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d114      	bne.n	8002d00 <__aeabi_f2d+0x5c>
 8002cd6:	2d00      	cmp	r5, #0
 8002cd8:	d01b      	beq.n	8002d12 <__aeabi_f2d+0x6e>
 8002cda:	0028      	movs	r0, r5
 8002cdc:	f000 f8b0 	bl	8002e40 <__clzsi2>
 8002ce0:	280a      	cmp	r0, #10
 8002ce2:	dc1c      	bgt.n	8002d1e <__aeabi_f2d+0x7a>
 8002ce4:	230b      	movs	r3, #11
 8002ce6:	002a      	movs	r2, r5
 8002ce8:	1a1b      	subs	r3, r3, r0
 8002cea:	40da      	lsrs	r2, r3
 8002cec:	0003      	movs	r3, r0
 8002cee:	3315      	adds	r3, #21
 8002cf0:	409d      	lsls	r5, r3
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <__aeabi_f2d+0x88>)
 8002cf4:	0312      	lsls	r2, r2, #12
 8002cf6:	1a1b      	subs	r3, r3, r0
 8002cf8:	055b      	lsls	r3, r3, #21
 8002cfa:	0b12      	lsrs	r2, r2, #12
 8002cfc:	0d5b      	lsrs	r3, r3, #21
 8002cfe:	e7e1      	b.n	8002cc4 <__aeabi_f2d+0x20>
 8002d00:	2d00      	cmp	r5, #0
 8002d02:	d009      	beq.n	8002d18 <__aeabi_f2d+0x74>
 8002d04:	0b13      	lsrs	r3, r2, #12
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	0312      	lsls	r2, r2, #12
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	076d      	lsls	r5, r5, #29
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <__aeabi_f2d+0x8c>)
 8002d10:	e7d8      	b.n	8002cc4 <__aeabi_f2d+0x20>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2200      	movs	r2, #0
 8002d16:	e7d5      	b.n	8002cc4 <__aeabi_f2d+0x20>
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <__aeabi_f2d+0x8c>)
 8002d1c:	e7d2      	b.n	8002cc4 <__aeabi_f2d+0x20>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	002a      	movs	r2, r5
 8002d22:	3b0b      	subs	r3, #11
 8002d24:	409a      	lsls	r2, r3
 8002d26:	2500      	movs	r5, #0
 8002d28:	e7e3      	b.n	8002cf2 <__aeabi_f2d+0x4e>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	00000389 	.word	0x00000389
 8002d30:	000007ff 	.word	0x000007ff

08002d34 <__aeabi_d2f>:
 8002d34:	0002      	movs	r2, r0
 8002d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d38:	004b      	lsls	r3, r1, #1
 8002d3a:	030d      	lsls	r5, r1, #12
 8002d3c:	0f40      	lsrs	r0, r0, #29
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	0fcc      	lsrs	r4, r1, #31
 8002d42:	0a6d      	lsrs	r5, r5, #9
 8002d44:	493a      	ldr	r1, [pc, #232]	; (8002e30 <__aeabi_d2f+0xfc>)
 8002d46:	4305      	orrs	r5, r0
 8002d48:	1c58      	adds	r0, r3, #1
 8002d4a:	00d7      	lsls	r7, r2, #3
 8002d4c:	4208      	tst	r0, r1
 8002d4e:	d00a      	beq.n	8002d66 <__aeabi_d2f+0x32>
 8002d50:	4938      	ldr	r1, [pc, #224]	; (8002e34 <__aeabi_d2f+0x100>)
 8002d52:	1859      	adds	r1, r3, r1
 8002d54:	29fe      	cmp	r1, #254	; 0xfe
 8002d56:	dd16      	ble.n	8002d86 <__aeabi_d2f+0x52>
 8002d58:	20ff      	movs	r0, #255	; 0xff
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	05c0      	lsls	r0, r0, #23
 8002d5e:	4310      	orrs	r0, r2
 8002d60:	07e4      	lsls	r4, r4, #31
 8002d62:	4320      	orrs	r0, r4
 8002d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <__aeabi_d2f+0x44>
 8002d6a:	433d      	orrs	r5, r7
 8002d6c:	d026      	beq.n	8002dbc <__aeabi_d2f+0x88>
 8002d6e:	2205      	movs	r2, #5
 8002d70:	0192      	lsls	r2, r2, #6
 8002d72:	0a52      	lsrs	r2, r2, #9
 8002d74:	b2d8      	uxtb	r0, r3
 8002d76:	e7f1      	b.n	8002d5c <__aeabi_d2f+0x28>
 8002d78:	432f      	orrs	r7, r5
 8002d7a:	d0ed      	beq.n	8002d58 <__aeabi_d2f+0x24>
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	03d2      	lsls	r2, r2, #15
 8002d80:	20ff      	movs	r0, #255	; 0xff
 8002d82:	432a      	orrs	r2, r5
 8002d84:	e7ea      	b.n	8002d5c <__aeabi_d2f+0x28>
 8002d86:	2900      	cmp	r1, #0
 8002d88:	dd1b      	ble.n	8002dc2 <__aeabi_d2f+0x8e>
 8002d8a:	0192      	lsls	r2, r2, #6
 8002d8c:	1e50      	subs	r0, r2, #1
 8002d8e:	4182      	sbcs	r2, r0
 8002d90:	00ed      	lsls	r5, r5, #3
 8002d92:	0f7f      	lsrs	r7, r7, #29
 8002d94:	432a      	orrs	r2, r5
 8002d96:	433a      	orrs	r2, r7
 8002d98:	0753      	lsls	r3, r2, #29
 8002d9a:	d047      	beq.n	8002e2c <__aeabi_d2f+0xf8>
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d000      	beq.n	8002da6 <__aeabi_d2f+0x72>
 8002da4:	3204      	adds	r2, #4
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	04db      	lsls	r3, r3, #19
 8002daa:	4013      	ands	r3, r2
 8002dac:	d03e      	beq.n	8002e2c <__aeabi_d2f+0xf8>
 8002dae:	1c48      	adds	r0, r1, #1
 8002db0:	29fe      	cmp	r1, #254	; 0xfe
 8002db2:	d0d1      	beq.n	8002d58 <__aeabi_d2f+0x24>
 8002db4:	0192      	lsls	r2, r2, #6
 8002db6:	0a52      	lsrs	r2, r2, #9
 8002db8:	b2c0      	uxtb	r0, r0
 8002dba:	e7cf      	b.n	8002d5c <__aeabi_d2f+0x28>
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	e7cc      	b.n	8002d5c <__aeabi_d2f+0x28>
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	3217      	adds	r2, #23
 8002dc6:	db2f      	blt.n	8002e28 <__aeabi_d2f+0xf4>
 8002dc8:	2680      	movs	r6, #128	; 0x80
 8002dca:	0436      	lsls	r6, r6, #16
 8002dcc:	432e      	orrs	r6, r5
 8002dce:	251e      	movs	r5, #30
 8002dd0:	1a6d      	subs	r5, r5, r1
 8002dd2:	2d1f      	cmp	r5, #31
 8002dd4:	dd11      	ble.n	8002dfa <__aeabi_d2f+0xc6>
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4252      	negs	r2, r2
 8002dda:	1a52      	subs	r2, r2, r1
 8002ddc:	0031      	movs	r1, r6
 8002dde:	40d1      	lsrs	r1, r2
 8002de0:	2d20      	cmp	r5, #32
 8002de2:	d004      	beq.n	8002dee <__aeabi_d2f+0xba>
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <__aeabi_d2f+0x104>)
 8002de6:	4694      	mov	ip, r2
 8002de8:	4463      	add	r3, ip
 8002dea:	409e      	lsls	r6, r3
 8002dec:	4337      	orrs	r7, r6
 8002dee:	003a      	movs	r2, r7
 8002df0:	1e53      	subs	r3, r2, #1
 8002df2:	419a      	sbcs	r2, r3
 8002df4:	430a      	orrs	r2, r1
 8002df6:	2100      	movs	r1, #0
 8002df8:	e7ce      	b.n	8002d98 <__aeabi_d2f+0x64>
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <__aeabi_d2f+0x108>)
 8002dfc:	0038      	movs	r0, r7
 8002dfe:	4694      	mov	ip, r2
 8002e00:	4463      	add	r3, ip
 8002e02:	4098      	lsls	r0, r3
 8002e04:	003a      	movs	r2, r7
 8002e06:	1e41      	subs	r1, r0, #1
 8002e08:	4188      	sbcs	r0, r1
 8002e0a:	409e      	lsls	r6, r3
 8002e0c:	40ea      	lsrs	r2, r5
 8002e0e:	4330      	orrs	r0, r6
 8002e10:	4302      	orrs	r2, r0
 8002e12:	2100      	movs	r1, #0
 8002e14:	0753      	lsls	r3, r2, #29
 8002e16:	d1c1      	bne.n	8002d9c <__aeabi_d2f+0x68>
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0013      	movs	r3, r2
 8002e1c:	04c9      	lsls	r1, r1, #19
 8002e1e:	2001      	movs	r0, #1
 8002e20:	400b      	ands	r3, r1
 8002e22:	420a      	tst	r2, r1
 8002e24:	d1c6      	bne.n	8002db4 <__aeabi_d2f+0x80>
 8002e26:	e7a3      	b.n	8002d70 <__aeabi_d2f+0x3c>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e7a0      	b.n	8002d6e <__aeabi_d2f+0x3a>
 8002e2c:	000b      	movs	r3, r1
 8002e2e:	e79f      	b.n	8002d70 <__aeabi_d2f+0x3c>
 8002e30:	000007fe 	.word	0x000007fe
 8002e34:	fffffc80 	.word	0xfffffc80
 8002e38:	fffffca2 	.word	0xfffffca2
 8002e3c:	fffffc82 	.word	0xfffffc82

08002e40 <__clzsi2>:
 8002e40:	211c      	movs	r1, #28
 8002e42:	2301      	movs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	4298      	cmp	r0, r3
 8002e48:	d301      	bcc.n	8002e4e <__clzsi2+0xe>
 8002e4a:	0c00      	lsrs	r0, r0, #16
 8002e4c:	3910      	subs	r1, #16
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	4298      	cmp	r0, r3
 8002e52:	d301      	bcc.n	8002e58 <__clzsi2+0x18>
 8002e54:	0a00      	lsrs	r0, r0, #8
 8002e56:	3908      	subs	r1, #8
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	4298      	cmp	r0, r3
 8002e5c:	d301      	bcc.n	8002e62 <__clzsi2+0x22>
 8002e5e:	0900      	lsrs	r0, r0, #4
 8002e60:	3904      	subs	r1, #4
 8002e62:	a202      	add	r2, pc, #8	; (adr r2, 8002e6c <__clzsi2+0x2c>)
 8002e64:	5c10      	ldrb	r0, [r2, r0]
 8002e66:	1840      	adds	r0, r0, r1
 8002e68:	4770      	bx	lr
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	02020304 	.word	0x02020304
 8002e70:	01010101 	.word	0x01010101
	...

08002e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	0002      	movs	r2, r0
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e8e:	d809      	bhi.n	8002ea4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e90:	1dfb      	adds	r3, r7, #7
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	001a      	movs	r2, r3
 8002e96:	231f      	movs	r3, #31
 8002e98:	401a      	ands	r2, r3
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <__NVIC_EnableIRQ+0x30>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4091      	lsls	r1, r2
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
  }
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec4:	d828      	bhi.n	8002f18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <__NVIC_SetPriority+0xd4>)
 8002ec8:	1dfb      	adds	r3, r7, #7
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	33c0      	adds	r3, #192	; 0xc0
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	589b      	ldr	r3, [r3, r2]
 8002ed6:	1dfa      	adds	r2, r7, #7
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	0011      	movs	r1, r2
 8002edc:	2203      	movs	r2, #3
 8002ede:	400a      	ands	r2, r1
 8002ee0:	00d2      	lsls	r2, r2, #3
 8002ee2:	21ff      	movs	r1, #255	; 0xff
 8002ee4:	4091      	lsls	r1, r2
 8002ee6:	000a      	movs	r2, r1
 8002ee8:	43d2      	mvns	r2, r2
 8002eea:	401a      	ands	r2, r3
 8002eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	22ff      	movs	r2, #255	; 0xff
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	2303      	movs	r3, #3
 8002efe:	4003      	ands	r3, r0
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f04:	481f      	ldr	r0, [pc, #124]	; (8002f84 <__NVIC_SetPriority+0xd4>)
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	33c0      	adds	r3, #192	; 0xc0
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f16:	e031      	b.n	8002f7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f18:	4a1b      	ldr	r2, [pc, #108]	; (8002f88 <__NVIC_SetPriority+0xd8>)
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	0019      	movs	r1, r3
 8002f20:	230f      	movs	r3, #15
 8002f22:	400b      	ands	r3, r1
 8002f24:	3b08      	subs	r3, #8
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3306      	adds	r3, #6
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	18d3      	adds	r3, r2, r3
 8002f2e:	3304      	adds	r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	1dfa      	adds	r2, r7, #7
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	0011      	movs	r1, r2
 8002f38:	2203      	movs	r2, #3
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	00d2      	lsls	r2, r2, #3
 8002f3e:	21ff      	movs	r1, #255	; 0xff
 8002f40:	4091      	lsls	r1, r2
 8002f42:	000a      	movs	r2, r1
 8002f44:	43d2      	mvns	r2, r2
 8002f46:	401a      	ands	r2, r3
 8002f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	22ff      	movs	r2, #255	; 0xff
 8002f50:	401a      	ands	r2, r3
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	0018      	movs	r0, r3
 8002f58:	2303      	movs	r3, #3
 8002f5a:	4003      	ands	r3, r0
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f60:	4809      	ldr	r0, [pc, #36]	; (8002f88 <__NVIC_SetPriority+0xd8>)
 8002f62:	1dfb      	adds	r3, r7, #7
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	001c      	movs	r4, r3
 8002f68:	230f      	movs	r3, #15
 8002f6a:	4023      	ands	r3, r4
 8002f6c:	3b08      	subs	r3, #8
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	430a      	orrs	r2, r1
 8002f72:	3306      	adds	r3, #6
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	18c3      	adds	r3, r0, r3
 8002f78:	3304      	adds	r3, #4
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b003      	add	sp, #12
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f90:	f001 f9d0 	bl	8004334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f94:	f000 f830 	bl	8002ff8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Init(Clock_Frequency);
 8002f98:	23fa      	movs	r3, #250	; 0xfa
 8002f9a:	015b      	lsls	r3, r3, #5
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 fcef 	bl	8003980 <SysTick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa2:	f000 f8b1 	bl	8003108 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002fa6:	f000 f87f 	bl	80030a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ConfigureOutputPins();
 8002faa:	f000 ff05 	bl	8003db8 <ConfigureOutputPins>
  ConfigureInputPins();
 8002fae:	f000 ff39 	bl	8003e24 <ConfigureInputPins>
  ConfigureVoltageSourcePin();
 8002fb2:	f000 fc39 	bl	8003828 <ConfigureVoltageSourcePin>
  adc_init();
 8002fb6:	f000 fc6d 	bl	8003894 <adc_init>
  LED_init();
 8002fba:	f000 fb9f 	bl	80036fc <LED_init>
  EXTI_Init();
 8002fbe:	f000 f9e1 	bl	8003384 <EXTI_Init>
  ContactorRelayCTRL(OFF);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f000 fe24 	bl	8003c10 <ContactorRelayCTRL>
  PreChargeRelayCTRL(OFF);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f000 fe07 	bl	8003bdc <PreChargeRelayCTRL>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (killSwitchFlagRE){
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <main+0x68>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <main+0x50>
		  killSwitch_Handler();
 8002fd6:	f000 f8af 	bl	8003138 <killSwitch_Handler>
 8002fda:	e7f8      	b.n	8002fce <main+0x42>
	  }else{
		  supplySenseLoop();
 8002fdc:	f000 fdca 	bl	8003b74 <supplySenseLoop>
		  while(PreChargeRelayIsON()){
 8002fe0:	e003      	b.n	8002fea <main+0x5e>
			  Precharge();
 8002fe2:	f000 fbbf 	bl	8003764 <Precharge>
			  CabinLights_and_BuzzerDriver();
 8002fe6:	f000 f8f9 	bl	80031dc <CabinLights_and_BuzzerDriver>
		  while(PreChargeRelayIsON()){
 8002fea:	f000 fe2b 	bl	8003c44 <PreChargeRelayIsON>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d1f7      	bne.n	8002fe2 <main+0x56>
	  if (killSwitchFlagRE){
 8002ff2:	e7ec      	b.n	8002fce <main+0x42>
 8002ff4:	200005bc 	.word	0x200005bc

08002ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b099      	sub	sp, #100	; 0x64
 8002ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ffe:	242c      	movs	r4, #44	; 0x2c
 8003000:	193b      	adds	r3, r7, r4
 8003002:	0018      	movs	r0, r3
 8003004:	2334      	movs	r3, #52	; 0x34
 8003006:	001a      	movs	r2, r3
 8003008:	2100      	movs	r1, #0
 800300a:	f003 fc55 	bl	80068b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800300e:	231c      	movs	r3, #28
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	0018      	movs	r0, r3
 8003014:	2310      	movs	r3, #16
 8003016:	001a      	movs	r2, r3
 8003018:	2100      	movs	r1, #0
 800301a:	f003 fc4d 	bl	80068b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800301e:	003b      	movs	r3, r7
 8003020:	0018      	movs	r0, r3
 8003022:	231c      	movs	r3, #28
 8003024:	001a      	movs	r2, r3
 8003026:	2100      	movs	r1, #0
 8003028:	f003 fc46 	bl	80068b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800302c:	0021      	movs	r1, r4
 800302e:	187b      	adds	r3, r7, r1
 8003030:	2202      	movs	r2, #2
 8003032:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003034:	187b      	adds	r3, r7, r1
 8003036:	2201      	movs	r2, #1
 8003038:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800303a:	187b      	adds	r3, r7, r1
 800303c:	2210      	movs	r2, #16
 800303e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003046:	187b      	adds	r3, r7, r1
 8003048:	0018      	movs	r0, r3
 800304a:	f001 fbf1 	bl	8004830 <HAL_RCC_OscConfig>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003052:	f000 fffb 	bl	800404c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003056:	211c      	movs	r1, #28
 8003058:	187b      	adds	r3, r7, r1
 800305a:	2207      	movs	r2, #7
 800305c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800305e:	187b      	adds	r3, r7, r1
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003064:	187b      	adds	r3, r7, r1
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003070:	187b      	adds	r3, r7, r1
 8003072:	2100      	movs	r1, #0
 8003074:	0018      	movs	r0, r3
 8003076:	f001 ff61 	bl	8004f3c <HAL_RCC_ClockConfig>
 800307a:	1e03      	subs	r3, r0, #0
 800307c:	d001      	beq.n	8003082 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800307e:	f000 ffe5 	bl	800404c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003082:	003b      	movs	r3, r7
 8003084:	2202      	movs	r2, #2
 8003086:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003088:	003b      	movs	r3, r7
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800308e:	003b      	movs	r3, r7
 8003090:	0018      	movs	r0, r3
 8003092:	f002 f8bf 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 8003096:	1e03      	subs	r3, r0, #0
 8003098:	d001      	beq.n	800309e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800309a:	f000 ffd7 	bl	800404c <Error_Handler>
  }
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b019      	add	sp, #100	; 0x64
 80030a4:	bd90      	pop	{r4, r7, pc}
	...

080030a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030ae:	4a15      	ldr	r2, [pc, #84]	; (8003104 <MX_USART2_UART_Init+0x5c>)
 80030b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030b4:	2296      	movs	r2, #150	; 0x96
 80030b6:	0212      	lsls	r2, r2, #8
 80030b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030ce:	220c      	movs	r2, #12
 80030d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <MX_USART2_UART_Init+0x58>)
 80030ec:	0018      	movs	r0, r3
 80030ee:	f002 f98f 	bl	8005410 <HAL_UART_Init>
 80030f2:	1e03      	subs	r3, r0, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80030f6:	f000 ffa9 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000348 	.word	0x20000348
 8003104:	40004400 	.word	0x40004400

08003108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <MX_GPIO_Init+0x2c>)
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <MX_GPIO_Init+0x2c>)
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	0289      	lsls	r1, r1, #10
 8003118:	430a      	orrs	r2, r1
 800311a:	615a      	str	r2, [r3, #20]
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <MX_GPIO_Init+0x2c>)
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	029b      	lsls	r3, r3, #10
 8003124:	4013      	ands	r3, r2
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b002      	add	sp, #8
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	40021000 	.word	0x40021000

08003138 <killSwitch_Handler>:

/* USER CODE BEGIN 4 */

void killSwitch_Handler(void){
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
	  uint16_t pin = 0;
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	2200      	movs	r2, #0
 8003142:	801a      	strh	r2, [r3, #0]
	  uint16_t killPin = GPIO_PORT_SWITCH->IDR & KillSwitch_PIN;
 8003144:	2390      	movs	r3, #144	; 0x90
 8003146:	05db      	lsls	r3, r3, #23
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	b29a      	uxth	r2, r3
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2101      	movs	r1, #1
 8003150:	400a      	ands	r2, r1
 8003152:	801a      	strh	r2, [r3, #0]
	  pin  = debounceSwitch(killPin, &killSWDebounceOneMilliSec, &killSWDebounceTwoMilliSec, &killSWDebounceThreeMilliSec);
 8003154:	1dbc      	adds	r4, r7, #6
 8003156:	4d1c      	ldr	r5, [pc, #112]	; (80031c8 <killSwitch_Handler+0x90>)
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <killSwitch_Handler+0x94>)
 800315a:	491d      	ldr	r1, [pc, #116]	; (80031d0 <killSwitch_Handler+0x98>)
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	8818      	ldrh	r0, [r3, #0]
 8003160:	002b      	movs	r3, r5
 8003162:	f000 f8af 	bl	80032c4 <debounceSwitch>
 8003166:	0003      	movs	r3, r0
 8003168:	8023      	strh	r3, [r4, #0]
	  if (pin!=0){
 800316a:	1dbb      	adds	r3, r7, #6
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d026      	beq.n	80031c0 <killSwitch_Handler+0x88>
		  //Turn of all Relays
		  PreChargeRelayCTRL(OFF);
 8003172:	2000      	movs	r0, #0
 8003174:	f000 fd32 	bl	8003bdc <PreChargeRelayCTRL>
		  ContactorRelayCTRL(OFF);
 8003178:	2000      	movs	r0, #0
 800317a:	f000 fd49 	bl	8003c10 <ContactorRelayCTRL>
		  FrontLightRelayCTRL(OFF);
 800317e:	2000      	movs	r0, #0
 8003180:	f000 fd98 	bl	8003cb4 <FrontLightRelayCTRL>
		  BackLightRelayCTRL(OFF);
 8003184:	2000      	movs	r0, #0
 8003186:	f000 fdaf 	bl	8003ce8 <BackLightRelayCTRL>
		  DickeyLightRelayCTRL(OFF);
 800318a:	2000      	movs	r0, #0
 800318c:	f000 fdc6 	bl	8003d1c <DickeyLightRelayCTRL>
		  BuzzerCTRL(OFF);
 8003190:	2000      	movs	r0, #0
 8003192:	f000 fddd 	bl	8003d50 <BuzzerCTRL>
		  while(1){
			//Halt Operation
			  SetWait(&OneSec);
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <killSwitch_Handler+0x9c>)
 8003198:	0018      	movs	r0, r3
 800319a:	f000 f85d 	bl	8003258 <SetWait>
			  if (time_expired(&OneSec)){
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <killSwitch_Handler+0x9c>)
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 fac3 	bl	800372c <time_expired>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d0f5      	beq.n	8003196 <killSwitch_Handler+0x5e>
				  GPIO_PORT_LEDS->ODR ^= GPIO_RED_LED_PIN; //Error Blink
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <killSwitch_Handler+0xa0>)
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <killSwitch_Handler+0xa0>)
 80031b0:	2140      	movs	r1, #64	; 0x40
 80031b2:	404a      	eors	r2, r1
 80031b4:	615a      	str	r2, [r3, #20]
				  ResetWait(&OneSec);
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <killSwitch_Handler+0x9c>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f863 	bl	8003284 <ResetWait>
			  SetWait(&OneSec);
 80031be:	e7ea      	b.n	8003196 <killSwitch_Handler+0x5e>
			  }
		  }
	  }
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bdb0      	pop	{r4, r5, r7, pc}
 80031c8:	200000a4 	.word	0x200000a4
 80031cc:	20000098 	.word	0x20000098
 80031d0:	2000008c 	.word	0x2000008c
 80031d4:	20000080 	.word	0x20000080
 80031d8:	48000800 	.word	0x48000800

080031dc <CabinLights_and_BuzzerDriver>:

void CabinLights_and_BuzzerDriver(void){
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0

	  if(Check_Motor_Drive_Signal()){
 80031e0:	f000 ff14 	bl	800400c <Check_Motor_Drive_Signal>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d002      	beq.n	80031ee <CabinLights_and_BuzzerDriver+0x12>
		  BuzzerDriver();
 80031e8:	f000 fdcc 	bl	8003d84 <BuzzerDriver>
 80031ec:	e002      	b.n	80031f4 <CabinLights_and_BuzzerDriver+0x18>
	  }else{
		  BuzzerCTRL(OFF);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f000 fdae 	bl	8003d50 <BuzzerCTRL>
	  }

	  if(Check_Cab_On_Door_Signal()){
 80031f4:	f000 ff1a 	bl	800402c <Check_Cab_On_Door_Signal>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d021      	beq.n	8003240 <CabinLights_and_BuzzerDriver+0x64>

		  if (Check_Front_Door_Switches()){
 80031fc:	f000 fe54 	bl	8003ea8 <Check_Front_Door_Switches>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d003      	beq.n	800320c <CabinLights_and_BuzzerDriver+0x30>
			  FrontLightRelayCTRL(ON);
 8003204:	2001      	movs	r0, #1
 8003206:	f000 fd55 	bl	8003cb4 <FrontLightRelayCTRL>
 800320a:	e002      	b.n	8003212 <CabinLights_and_BuzzerDriver+0x36>
		  }else{
			  FrontLightRelayCTRL(OFF);
 800320c:	2000      	movs	r0, #0
 800320e:	f000 fd51 	bl	8003cb4 <FrontLightRelayCTRL>
		  }

		  if (Check_Rear_Door_Switches()){
 8003212:	f000 fe8b 	bl	8003f2c <Check_Rear_Door_Switches>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d003      	beq.n	8003222 <CabinLights_and_BuzzerDriver+0x46>
			  BackLightRelayCTRL(ON);
 800321a:	2001      	movs	r0, #1
 800321c:	f000 fd64 	bl	8003ce8 <BackLightRelayCTRL>
 8003220:	e002      	b.n	8003228 <CabinLights_and_BuzzerDriver+0x4c>
		  }else{
			  BackLightRelayCTRL(OFF);
 8003222:	2000      	movs	r0, #0
 8003224:	f000 fd60 	bl	8003ce8 <BackLightRelayCTRL>
		  }

		  if(Check_Dickey_Door_Switch()){
 8003228:	f000 fec6 	bl	8003fb8 <Check_Dickey_Door_Switch>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d003      	beq.n	8003238 <CabinLights_and_BuzzerDriver+0x5c>
			  DickeyLightRelayCTRL(ON);
 8003230:	2001      	movs	r0, #1
 8003232:	f000 fd73 	bl	8003d1c <DickeyLightRelayCTRL>
	  }else{
		  FrontLightRelayCTRL(OFF);
		  BackLightRelayCTRL(OFF);
		  DickeyLightRelayCTRL(OFF);
	  }
}
 8003236:	e00c      	b.n	8003252 <CabinLights_and_BuzzerDriver+0x76>
			  DickeyLightRelayCTRL(OFF);
 8003238:	2000      	movs	r0, #0
 800323a:	f000 fd6f 	bl	8003d1c <DickeyLightRelayCTRL>
}
 800323e:	e008      	b.n	8003252 <CabinLights_and_BuzzerDriver+0x76>
		  FrontLightRelayCTRL(OFF);
 8003240:	2000      	movs	r0, #0
 8003242:	f000 fd37 	bl	8003cb4 <FrontLightRelayCTRL>
		  BackLightRelayCTRL(OFF);
 8003246:	2000      	movs	r0, #0
 8003248:	f000 fd4e 	bl	8003ce8 <BackLightRelayCTRL>
		  DickeyLightRelayCTRL(OFF);
 800324c:	2000      	movs	r0, #0
 800324e:	f000 fd65 	bl	8003d1c <DickeyLightRelayCTRL>
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SetWait>:

void SetWait (struct Wait *WaitTime){
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	  if (!(WaitTime->activeFlag)){
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <SetWait+0x1e>
		  WaitTime->currentTime = counter;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <SetWait+0x28>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]
		  WaitTime->activeFlag = 1;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	609a      	str	r2, [r3, #8]
	  }
}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000418 	.word	0x20000418

08003284 <ResetWait>:

void ResetWait (struct Wait *WaitTime1){
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	WaitTime1->activeFlag = 0;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void) {
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) { // Check if EXTI Line 0 triggered the interrupt
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <EXTI0_1_IRQHandler+0x20>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d002      	beq.n	80032b0 <EXTI0_1_IRQHandler+0x14>
    	killSwitchFlagRE = 1;
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <EXTI0_1_IRQHandler+0x24>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    }
    EXTI->PR = EXTI_PR_PR0; // Clear the interrupt pending bit by writing '1' to it
 80032b0:	4b02      	ldr	r3, [pc, #8]	; (80032bc <EXTI0_1_IRQHandler+0x20>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40010400 	.word	0x40010400
 80032c0:	200005bc 	.word	0x200005bc

080032c4 <debounceSwitch>:

uint16_t debounceSwitch(uint16_t pin, struct Wait *WaitTimeOneMilli, struct Wait *WaitTimeTwoMilli, struct Wait *WaitTimeThreeMilli){
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	210e      	movs	r1, #14
 80032d2:	187b      	adds	r3, r7, r1
 80032d4:	1c02      	adds	r2, r0, #0
 80032d6:	801a      	strh	r2, [r3, #0]

	uint16_t currPin = 0;
 80032d8:	2616      	movs	r6, #22
 80032da:	19bb      	adds	r3, r7, r6
 80032dc:	2200      	movs	r2, #0
 80032de:	801a      	strh	r2, [r3, #0]
	uint16_t temp = 0;
 80032e0:	2414      	movs	r4, #20
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2200      	movs	r2, #0
 80032e6:	801a      	strh	r2, [r3, #0]
	temp = pin;
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	000d      	movs	r5, r1
 80032ec:	197a      	adds	r2, r7, r5
 80032ee:	8812      	ldrh	r2, [r2, #0]
 80032f0:	801a      	strh	r2, [r3, #0]

	SetWait(WaitTimeOneMilli);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff ffaf 	bl	8003258 <SetWait>
	SetWait(WaitTimeTwoMilli);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff ffab 	bl	8003258 <SetWait>
	SetWait(WaitTimeThreeMilli);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff ffa7 	bl	8003258 <SetWait>

	if(time_expired(WaitTimeOneMilli)){
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fa0d 	bl	800372c <time_expired>
 8003312:	1e03      	subs	r3, r0, #0
 8003314:	d02e      	beq.n	8003374 <debounceSwitch+0xb0>
		ResetWait(WaitTimeOneMilli);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff ffb3 	bl	8003284 <ResetWait>
		if (pin==temp){
 800331e:	197a      	adds	r2, r7, r5
 8003320:	193b      	adds	r3, r7, r4
 8003322:	8812      	ldrh	r2, [r2, #0]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d11e      	bne.n	8003368 <debounceSwitch+0xa4>
			if (time_expired(WaitTimeTwoMilli)){
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f000 f9fd 	bl	800372c <time_expired>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d01e      	beq.n	8003374 <debounceSwitch+0xb0>
				ResetWait(WaitTimeTwoMilli);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff ffa3 	bl	8003284 <ResetWait>
				if (pin==temp){
 800333e:	197a      	adds	r2, r7, r5
 8003340:	193b      	adds	r3, r7, r4
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d114      	bne.n	8003374 <debounceSwitch+0xb0>
					if (time_expired(WaitTimeThreeMilli)){
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 f9ed 	bl	800372c <time_expired>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d00e      	beq.n	8003374 <debounceSwitch+0xb0>
						ResetWait(WaitTimeThreeMilli);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff ff93 	bl	8003284 <ResetWait>
						currPin = temp;
 800335e:	19bb      	adds	r3, r7, r6
 8003360:	193a      	adds	r2, r7, r4
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	e005      	b.n	8003374 <debounceSwitch+0xb0>
					}
				}
			}

		}else{
			currPin = pin;
 8003368:	2316      	movs	r3, #22
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	220e      	movs	r2, #14
 800336e:	18ba      	adds	r2, r7, r2
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	801a      	strh	r2, [r3, #0]
		}
	}

	return currPin;
 8003374:	2316      	movs	r3, #22
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	881b      	ldrh	r3, [r3, #0]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b007      	add	sp, #28
 8003380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003384 <EXTI_Init>:

void EXTI_Init(void) {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	  // Enabling Clock for Port A
	  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <EXTI_Init+0x70>)
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <EXTI_Init+0x70>)
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0289      	lsls	r1, r1, #10
 8003392:	430a      	orrs	r2, r1
 8003394:	615a      	str	r2, [r3, #20]
	  // Enabling Input for PA0
	  GPIOA->MODER &= 0xfffffffc;
 8003396:	2390      	movs	r3, #144	; 0x90
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2390      	movs	r3, #144	; 0x90
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	2103      	movs	r1, #3
 80033a2:	438a      	bics	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
	  // Setting the speed of the pin PA0 to High Speed
	  GPIOA->OSPEEDR |= 0x00000003;
 80033a6:	2390      	movs	r3, #144	; 0x90
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	2390      	movs	r3, #144	; 0x90
 80033ae:	05db      	lsls	r3, r3, #23
 80033b0:	2103      	movs	r1, #3
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
	  // Enabling Pull Down for PA0
	  GPIOA->PUPDR |= 0x00000002;
 80033b6:	2390      	movs	r3, #144	; 0x90
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	2390      	movs	r3, #144	; 0x90
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	2102      	movs	r1, #2
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]

	  // Configure EXTI Line 0 for PA0 with a rising edge trigger
	  EXTI->IMR |= EXTI_IMR_MR0; // Enable interrupt on line 0
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <EXTI_Init+0x74>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <EXTI_Init+0x74>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
	  EXTI->RTSR |= EXTI_RTSR_TR0; // Trigger on rising edge
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <EXTI_Init+0x74>)
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <EXTI_Init+0x74>)
 80033d8:	2101      	movs	r1, #1
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]

	  // Enable EXTI0_1_IRQn (EXTI Line 0 and 1) in the NVIC
	  NVIC_EnableIRQ(EXTI0_1_IRQn);
 80033de:	2005      	movs	r0, #5
 80033e0:	f7ff fd4c 	bl	8002e7c <__NVIC_EnableIRQ>
	  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 80033e4:	2100      	movs	r1, #0
 80033e6:	2005      	movs	r0, #5
 80033e8:	f7ff fd62 	bl	8002eb0 <__NVIC_SetPriority>
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40010400 	.word	0x40010400

080033fc <Avg_and_remove_outliers_V_Supply>:

float Avg_and_remove_outliers_V_Supply (void){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0

	float V_supply = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
	float V_mean = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]

	V_mean = Average(V_supply_arr, Number_of_Samples);
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <Avg_and_remove_outliers_V_Supply+0x74>)
 800340c:	2132      	movs	r1, #50	; 0x32
 800340e:	0018      	movs	r0, r3
 8003410:	f000 fb6e 	bl	8003af0 <Average>
 8003414:	1c03      	adds	r3, r0, #0
 8003416:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < Number_of_Samples; i++){
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e019      	b.n	8003452 <Avg_and_remove_outliers_V_Supply+0x56>
		if (!(abs(V_mean - V_supply_arr[i]) < Variance)){
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <Avg_and_remove_outliers_V_Supply+0x74>)
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	58d3      	ldr	r3, [r2, r3]
 8003426:	1c19      	adds	r1, r3, #0
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd fbe1 	bl	8000bf0 <__aeabi_fsub>
 800342e:	1c03      	adds	r3, r0, #0
 8003430:	1c18      	adds	r0, r3, #0
 8003432:	f7fd fd7d 	bl	8000f30 <__aeabi_f2iz>
 8003436:	0003      	movs	r3, r0
 8003438:	17da      	asrs	r2, r3, #31
 800343a:	189b      	adds	r3, r3, r2
 800343c:	4053      	eors	r3, r2
 800343e:	2b01      	cmp	r3, #1
 8003440:	dd04      	ble.n	800344c <Avg_and_remove_outliers_V_Supply+0x50>
			V_supply_arr[i] = 0.0;
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <Avg_and_remove_outliers_V_Supply+0x74>)
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	2100      	movs	r1, #0
 800344a:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < Number_of_Samples; i++){
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b31      	cmp	r3, #49	; 0x31
 8003456:	dde2      	ble.n	800341e <Avg_and_remove_outliers_V_Supply+0x22>
		}
	}

	V_supply = Average(V_supply_arr, Number_of_Samples);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <Avg_and_remove_outliers_V_Supply+0x74>)
 800345a:	2132      	movs	r1, #50	; 0x32
 800345c:	0018      	movs	r0, r3
 800345e:	f000 fb47 	bl	8003af0 <Average>
 8003462:	1c03      	adds	r3, r0, #0
 8003464:	60bb      	str	r3, [r7, #8]
	return V_supply;
 8003466:	68bb      	ldr	r3, [r7, #8]
}
 8003468:	1c18      	adds	r0, r3, #0
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000428 	.word	0x20000428

08003474 <Avg_and_remove_outliers_V_in>:

float Avg_and_remove_outliers_V_in (void){
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0

	float V_in = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
	float V_mean = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]

	V_mean = Average(V_in_arr, Number_of_Samples);
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <Avg_and_remove_outliers_V_in+0x74>)
 8003484:	2132      	movs	r1, #50	; 0x32
 8003486:	0018      	movs	r0, r3
 8003488:	f000 fb32 	bl	8003af0 <Average>
 800348c:	1c03      	adds	r3, r0, #0
 800348e:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < Number_of_Samples; i++){
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e019      	b.n	80034ca <Avg_and_remove_outliers_V_in+0x56>
		if (!(abs(V_mean - V_in_arr[i]) < Variance)){
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <Avg_and_remove_outliers_V_in+0x74>)
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	0092      	lsls	r2, r2, #2
 800349c:	58d3      	ldr	r3, [r2, r3]
 800349e:	1c19      	adds	r1, r3, #0
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fd fba5 	bl	8000bf0 <__aeabi_fsub>
 80034a6:	1c03      	adds	r3, r0, #0
 80034a8:	1c18      	adds	r0, r3, #0
 80034aa:	f7fd fd41 	bl	8000f30 <__aeabi_f2iz>
 80034ae:	0003      	movs	r3, r0
 80034b0:	17da      	asrs	r2, r3, #31
 80034b2:	189b      	adds	r3, r3, r2
 80034b4:	4053      	eors	r3, r2
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	dd04      	ble.n	80034c4 <Avg_and_remove_outliers_V_in+0x50>
			V_in_arr[i] = 0.0;
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <Avg_and_remove_outliers_V_in+0x74>)
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	2100      	movs	r1, #0
 80034c2:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < Number_of_Samples; i++){
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b31      	cmp	r3, #49	; 0x31
 80034ce:	dde2      	ble.n	8003496 <Avg_and_remove_outliers_V_in+0x22>
		}
	}

	V_in = Average(V_in_arr, Number_of_Samples);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <Avg_and_remove_outliers_V_in+0x74>)
 80034d2:	2132      	movs	r1, #50	; 0x32
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 fb0b 	bl	8003af0 <Average>
 80034da:	1c03      	adds	r3, r0, #0
 80034dc:	60bb      	str	r3, [r7, #8]
	return V_in;
 80034de:	68bb      	ldr	r3, [r7, #8]
}
 80034e0:	1c18      	adds	r0, r3, #0
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b004      	add	sp, #16
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200004f0 	.word	0x200004f0

080034ec <sense_V_supply>:

void sense_V_supply(void){
 80034ec:	b5b0      	push	{r4, r5, r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0

	int i = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]

	while (i<Number_of_Samples){
 80034f6:	e03d      	b.n	8003574 <sense_V_supply+0x88>

		uint16_t adcVal = read_adc(ADC_CHANNEL);
 80034f8:	250a      	movs	r5, #10
 80034fa:	197c      	adds	r4, r7, r5
 80034fc:	2001      	movs	r0, #1
 80034fe:	f000 fa19 	bl	8003934 <read_adc>
 8003502:	0003      	movs	r3, r0
 8003504:	8023      	strh	r3, [r4, #0]
		float V_supply = adcValtoVolts(adcVal);
 8003506:	197b      	adds	r3, r7, r5
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	0018      	movs	r0, r3
 800350c:	f000 f89a 	bl	8003644 <adcValtoVolts>
 8003510:	1c03      	adds	r3, r0, #0
 8003512:	607b      	str	r3, [r7, #4]

		if ((V_supply >= MIN_SUPPLY_VOLTAGE) && (V_supply <= MAX_SUPPLY_VOLTAGE)){
 8003514:	491b      	ldr	r1, [pc, #108]	; (8003584 <sense_V_supply+0x98>)
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fc fff6 	bl	8000508 <__aeabi_fcmpge>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d00e      	beq.n	800353e <sense_V_supply+0x52>
 8003520:	4919      	ldr	r1, [pc, #100]	; (8003588 <sense_V_supply+0x9c>)
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fc ffdc 	bl	80004e0 <__aeabi_fcmple>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d008      	beq.n	800353e <sense_V_supply+0x52>
			V_supply_arr[i] = V_supply;
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <sense_V_supply+0xa0>)
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	50d1      	str	r1, [r2, r3]
			i++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3301      	adds	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e01a      	b.n	8003574 <sense_V_supply+0x88>
		}else{
			SetWait(&OneSec);
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <sense_V_supply+0xa4>)
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fe89 	bl	8003258 <SetWait>
			if (time_expired(&OneSec)){
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <sense_V_supply+0xa4>)
 8003548:	0018      	movs	r0, r3
 800354a:	f000 f8ef 	bl	800372c <time_expired>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d010      	beq.n	8003574 <sense_V_supply+0x88>
				HAL_UART_Transmit(&huart2, (uint8_t*)supplyError, strlen(supplyError), 100); //supply out of range
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <sense_V_supply+0xa8>)
 8003554:	0018      	movs	r0, r3
 8003556:	f7fc fdd7 	bl	8000108 <strlen>
 800355a:	0003      	movs	r3, r0
 800355c:	b29a      	uxth	r2, r3
 800355e:	490d      	ldr	r1, [pc, #52]	; (8003594 <sense_V_supply+0xa8>)
 8003560:	480d      	ldr	r0, [pc, #52]	; (8003598 <sense_V_supply+0xac>)
 8003562:	2364      	movs	r3, #100	; 0x64
 8003564:	f001 ffa8 	bl	80054b8 <HAL_UART_Transmit>
				Voltage_Print();
 8003568:	f000 fa72 	bl	8003a50 <Voltage_Print>
				ResetWait(&OneSec);
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <sense_V_supply+0xa4>)
 800356e:	0018      	movs	r0, r3
 8003570:	f7ff fe88 	bl	8003284 <ResetWait>
	while (i<Number_of_Samples){
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b31      	cmp	r3, #49	; 0x31
 8003578:	ddbe      	ble.n	80034f8 <sense_V_supply+0xc>
			}
		}
	}
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b004      	add	sp, #16
 8003582:	bdb0      	pop	{r4, r5, r7, pc}
 8003584:	41f00000 	.word	0x41f00000
 8003588:	42740000 	.word	0x42740000
 800358c:	20000428 	.word	0x20000428
 8003590:	20000080 	.word	0x20000080
 8003594:	20000000 	.word	0x20000000
 8003598:	20000348 	.word	0x20000348

0800359c <sense_V_in>:

void sense_V_in(void){
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0

	int i = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]

	while (i<Number_of_Samples){
 80035a6:	e03c      	b.n	8003622 <sense_V_in+0x86>

		uint16_t adcVal = read_adc(ADC_CHANNEL);
 80035a8:	250a      	movs	r5, #10
 80035aa:	197c      	adds	r4, r7, r5
 80035ac:	2001      	movs	r0, #1
 80035ae:	f000 f9c1 	bl	8003934 <read_adc>
 80035b2:	0003      	movs	r3, r0
 80035b4:	8023      	strh	r3, [r4, #0]
		float V_in = adcValtoVolts(adcVal);
 80035b6:	197b      	adds	r3, r7, r5
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f842 	bl	8003644 <adcValtoVolts>
 80035c0:	1c03      	adds	r3, r0, #0
 80035c2:	607b      	str	r3, [r7, #4]

		if (VoltageInRange(V_in)){
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1c18      	adds	r0, r3, #0
 80035c8:	f000 fb54 	bl	8003c74 <VoltageInRange>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d005      	beq.n	80035dc <sense_V_in+0x40>
			V_in_arr[i] = V_in;
 80035d0:	4b18      	ldr	r3, [pc, #96]	; (8003634 <sense_V_in+0x98>)
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	0092      	lsls	r2, r2, #2
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	50d1      	str	r1, [r2, r3]
 80035da:	e01f      	b.n	800361c <sense_V_in+0x80>

		}else{
			V_in_arr[i] = V_in;
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <sense_V_in+0x98>)
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	0092      	lsls	r2, r2, #2
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	50d1      	str	r1, [r2, r3]
			SetWait(&OneSec);
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <sense_V_in+0x9c>)
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff fe35 	bl	8003258 <SetWait>
			if (time_expired(&OneSec)){
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <sense_V_in+0x9c>)
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 f89b 	bl	800372c <time_expired>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d010      	beq.n	800361c <sense_V_in+0x80>
				HAL_UART_Transmit(&huart2, (uint8_t*)noiseError, strlen(noiseError), 100); //For Noise
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <sense_V_in+0xa0>)
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7fc fd83 	bl	8000108 <strlen>
 8003602:	0003      	movs	r3, r0
 8003604:	b29a      	uxth	r2, r3
 8003606:	490d      	ldr	r1, [pc, #52]	; (800363c <sense_V_in+0xa0>)
 8003608:	480d      	ldr	r0, [pc, #52]	; (8003640 <sense_V_in+0xa4>)
 800360a:	2364      	movs	r3, #100	; 0x64
 800360c:	f001 ff54 	bl	80054b8 <HAL_UART_Transmit>
				Voltage_Print();
 8003610:	f000 fa1e 	bl	8003a50 <Voltage_Print>
				SetWait(&OneSec);			}
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <sense_V_in+0x9c>)
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff fe1e 	bl	8003258 <SetWait>
		}
		i++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
	while (i<Number_of_Samples){
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b31      	cmp	r3, #49	; 0x31
 8003626:	ddbf      	ble.n	80035a8 <sense_V_in+0xc>

	}
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b004      	add	sp, #16
 8003630:	bdb0      	pop	{r4, r5, r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	200004f0 	.word	0x200004f0
 8003638:	20000080 	.word	0x20000080
 800363c:	20000034 	.word	0x20000034
 8003640:	20000348 	.word	0x20000348

08003644 <adcValtoVolts>:

float adcValtoVolts (uint16_t adcVal){
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	0002      	movs	r2, r0
 800364c:	1dbb      	adds	r3, r7, #6
 800364e:	801a      	strh	r2, [r3, #0]
	float Vin = (adcVal/4096.0)*2.9;
 8003650:	1dbb      	adds	r3, r7, #6
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff facf 	bl	8002bf8 <__aeabi_i2d>
 800365a:	2200      	movs	r2, #0
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <adcValtoVolts+0x9c>)
 800365e:	f7fe f839 	bl	80016d4 <__aeabi_ddiv>
 8003662:	0002      	movs	r2, r0
 8003664:	000b      	movs	r3, r1
 8003666:	0010      	movs	r0, r2
 8003668:	0019      	movs	r1, r3
 800366a:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <adcValtoVolts+0xa0>)
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <adcValtoVolts+0xa4>)
 800366e:	f7fe fc2b 	bl	8001ec8 <__aeabi_dmul>
 8003672:	0002      	movs	r2, r0
 8003674:	000b      	movs	r3, r1
 8003676:	0010      	movs	r0, r2
 8003678:	0019      	movs	r1, r3
 800367a:	f7ff fb5b 	bl	8002d34 <__aeabi_d2f>
 800367e:	1c03      	adds	r3, r0, #0
 8003680:	60fb      	str	r3, [r7, #12]
	Vin = Vin*(48.0/2.70);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff fb0e 	bl	8002ca4 <__aeabi_f2d>
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <adcValtoVolts+0xa8>)
 800368a:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <adcValtoVolts+0xac>)
 800368c:	f7fe fc1c 	bl	8001ec8 <__aeabi_dmul>
 8003690:	0002      	movs	r2, r0
 8003692:	000b      	movs	r3, r1
 8003694:	0010      	movs	r0, r2
 8003696:	0019      	movs	r1, r3
 8003698:	f7ff fb4c 	bl	8002d34 <__aeabi_d2f>
 800369c:	1c03      	adds	r3, r0, #0
 800369e:	60fb      	str	r3, [r7, #12]
	Vin += Vin*(0.06); //Correction
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff faff 	bl	8002ca4 <__aeabi_f2d>
 80036a6:	0004      	movs	r4, r0
 80036a8:	000d      	movs	r5, r1
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff fafa 	bl	8002ca4 <__aeabi_f2d>
 80036b0:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <adcValtoVolts+0xb0>)
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <adcValtoVolts+0xb4>)
 80036b4:	f7fe fc08 	bl	8001ec8 <__aeabi_dmul>
 80036b8:	0002      	movs	r2, r0
 80036ba:	000b      	movs	r3, r1
 80036bc:	0020      	movs	r0, r4
 80036be:	0029      	movs	r1, r5
 80036c0:	f7fd fca8 	bl	8001014 <__aeabi_dadd>
 80036c4:	0002      	movs	r2, r0
 80036c6:	000b      	movs	r3, r1
 80036c8:	0010      	movs	r0, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	f7ff fb32 	bl	8002d34 <__aeabi_d2f>
 80036d0:	1c03      	adds	r3, r0, #0
 80036d2:	60fb      	str	r3, [r7, #12]
	return Vin;
 80036d4:	68fb      	ldr	r3, [r7, #12]
}
 80036d6:	1c18      	adds	r0, r3, #0
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bdb0      	pop	{r4, r5, r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	40b00000 	.word	0x40b00000
 80036e4:	33333333 	.word	0x33333333
 80036e8:	40073333 	.word	0x40073333
 80036ec:	71c71c71 	.word	0x71c71c71
 80036f0:	4031c71c 	.word	0x4031c71c
 80036f4:	eb851eb8 	.word	0xeb851eb8
 80036f8:	3faeb851 	.word	0x3faeb851

080036fc <LED_init>:

void LED_init(void){
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	  // Enabling Clock for Port C
	  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <LED_init+0x28>)
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <LED_init+0x28>)
 8003706:	2180      	movs	r1, #128	; 0x80
 8003708:	0309      	lsls	r1, r1, #12
 800370a:	430a      	orrs	r2, r1
 800370c:	615a      	str	r2, [r3, #20]

	  GPIOC->MODER |= GPIO_MODER_MODER6_0|GPIO_MODER_MODER7_0|GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0;
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <LED_init+0x2c>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <LED_init+0x2c>)
 8003714:	21aa      	movs	r1, #170	; 0xaa
 8003716:	02c9      	lsls	r1, r1, #11
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	40021000 	.word	0x40021000
 8003728:	48000800 	.word	0x48000800

0800372c <time_expired>:

int time_expired (struct Wait *WaitTime){
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	int timeExpiredFlag = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
	if (counter> (WaitTime->currentTime) + (WaitTime->delayTime)){
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	18d2      	adds	r2, r2, r3
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <time_expired+0x34>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	da02      	bge.n	8003750 <time_expired+0x24>
		timeExpiredFlag = 1;
 800374a:	2301      	movs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	e001      	b.n	8003754 <time_expired+0x28>
	}else{
		timeExpiredFlag = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
	}
	return timeExpiredFlag;
 8003754:	68fb      	ldr	r3, [r7, #12]
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	20000418 	.word	0x20000418

08003764 <Precharge>:

void Precharge(void) {
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0

	SetWait(&Three_RC);
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <Precharge+0xb0>)
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff fd74 	bl	8003258 <SetWait>
	SetWait(&Seven_RC);
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <Precharge+0xb4>)
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff fd70 	bl	8003258 <SetWait>

	if (time_expired(&Three_RC)){
 8003778:	4b26      	ldr	r3, [pc, #152]	; (8003814 <Precharge+0xb0>)
 800377a:	0018      	movs	r0, r3
 800377c:	f7ff ffd6 	bl	800372c <time_expired>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d044      	beq.n	800380e <Precharge+0xaa>

		sense_V_in();
 8003784:	f7ff ff0a 	bl	800359c <sense_V_in>
		avg_V_in = Avg_and_remove_outliers_V_in();
 8003788:	f7ff fe74 	bl	8003474 <Avg_and_remove_outliers_V_in>
 800378c:	1c02      	adds	r2, r0, #0
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <Precharge+0xb8>)
 8003790:	601a      	str	r2, [r3, #0]

	    if (avg_V_in <= V_threshold) {
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <Precharge+0xbc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0018      	movs	r0, r3
 8003798:	f7fd fbea 	bl	8000f70 <__aeabi_i2f>
 800379c:	1c02      	adds	r2, r0, #0
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <Precharge+0xb8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1c19      	adds	r1, r3, #0
 80037a4:	1c10      	adds	r0, r2, #0
 80037a6:	f7fc feaf 	bl	8000508 <__aeabi_fcmpge>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d01c      	beq.n	80037e8 <Precharge+0x84>

	    	ContactorRelayCTRL(OFF); // Turn off the contactor relay // This turn off is essential to turn of when the supply is cut off
 80037ae:	2000      	movs	r0, #0
 80037b0:	f000 fa2e 	bl	8003c10 <ContactorRelayCTRL>
	        GPIO_PORT_LEDS->ODR |= (GPIO_RED_LED_PIN);
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <Precharge+0xc0>)
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <Precharge+0xc0>)
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	430a      	orrs	r2, r1
 80037be:	615a      	str	r2, [r3, #20]
	        GPIO_PORT_LEDS->ODR &= ~GPIO_BLUE_LED_PIN;
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <Precharge+0xc0>)
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	4b17      	ldr	r3, [pc, #92]	; (8003824 <Precharge+0xc0>)
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	438a      	bics	r2, r1
 80037ca:	615a      	str	r2, [r3, #20]


	        if (time_expired(&Seven_RC)){
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <Precharge+0xb4>)
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7ff ffac 	bl	800372c <time_expired>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d016      	beq.n	8003806 <Precharge+0xa2>

	        	ResetWait(&Seven_RC);
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <Precharge+0xb4>)
 80037da:	0018      	movs	r0, r3
 80037dc:	f7ff fd52 	bl	8003284 <ResetWait>
	        	PreChargeRelayCTRL(OFF);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f000 f9fb 	bl	8003bdc <PreChargeRelayCTRL>
 80037e6:	e00e      	b.n	8003806 <Precharge+0xa2>
	        }

	    }else {

	        ContactorRelayCTRL(ON);
 80037e8:	2001      	movs	r0, #1
 80037ea:	f000 fa11 	bl	8003c10 <ContactorRelayCTRL>
	        GPIO_PORT_LEDS->ODR |= GPIO_BLUE_LED_PIN;
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <Precharge+0xc0>)
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <Precharge+0xc0>)
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	430a      	orrs	r2, r1
 80037f8:	615a      	str	r2, [r3, #20]
	        GPIO_PORT_LEDS->ODR &= ~GPIO_RED_LED_PIN;
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <Precharge+0xc0>)
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <Precharge+0xc0>)
 8003800:	2140      	movs	r1, #64	; 0x40
 8003802:	438a      	bics	r2, r1
 8003804:	615a      	str	r2, [r3, #20]

	    }
	    ResetWait(&Three_RC);
 8003806:	4b03      	ldr	r3, [pc, #12]	; (8003814 <Precharge+0xb0>)
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff fd3b 	bl	8003284 <ResetWait>
	}
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000068 	.word	0x20000068
 8003818:	20000074 	.word	0x20000074
 800381c:	20000424 	.word	0x20000424
 8003820:	2000041c 	.word	0x2000041c
 8003824:	48000800 	.word	0x48000800

08003828 <ConfigureVoltageSourcePin>:

void ConfigureVoltageSourcePin(void) {
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
    // Enable the GPIO port clock
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <ConfigureVoltageSourcePin+0x64>)
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	4b16      	ldr	r3, [pc, #88]	; (800388c <ConfigureVoltageSourcePin+0x64>)
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	0309      	lsls	r1, r1, #12
 8003836:	430a      	orrs	r2, r1
 8003838:	615a      	str	r2, [r3, #20]

    // Configure PC3 as general purpose output
    GPIO_PORT_PCHG->MODER |= GPIO_MODER_MODER3_0;
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 8003840:	2140      	movs	r1, #64	; 0x40
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]

    // Configure PC3 as push-pull
    GPIO_PORT_PCHG->OTYPER &= ~(GPIO_OTYPER_OT_3);
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 800384c:	2108      	movs	r1, #8
 800384e:	438a      	bics	r2, r1
 8003850:	605a      	str	r2, [r3, #4]

    // Configure PC1 to high speed
    GPIO_PORT_PCHG->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3;
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 8003858:	21c0      	movs	r1, #192	; 0xc0
 800385a:	430a      	orrs	r2, r1
 800385c:	609a      	str	r2, [r3, #8]

    // Configure PC4 as general purpose output
    GPIO_PORT_PCHG->MODER |= (GPIO_MODER_MODER4_0);
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	0049      	lsls	r1, r1, #1
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    // Configure PC4 as push-pull
    GPIO_PORT_PCHG->OTYPER &= ~(GPIO_OTYPER_OT_4);
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 8003872:	2110      	movs	r1, #16
 8003874:	438a      	bics	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
    // Using a Pull Up Resistor

    // Configure PC4 to high speed
    GPIO_PORT_PCHG->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <ConfigureVoltageSourcePin+0x68>)
 800387e:	21c0      	movs	r1, #192	; 0xc0
 8003880:	0089      	lsls	r1, r1, #2
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	48000800 	.word	0x48000800

08003894 <adc_init>:

void adc_init(void) {
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
    // Enable the ADC clock
    RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <adc_init+0x98>)
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	4b23      	ldr	r3, [pc, #140]	; (800392c <adc_init+0x98>)
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	0089      	lsls	r1, r1, #2
 80038a2:	430a      	orrs	r2, r1
 80038a4:	619a      	str	r2, [r3, #24]

    // Enable the GPIOA clock (assuming you are using PA1 for ADC)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80038a6:	4b21      	ldr	r3, [pc, #132]	; (800392c <adc_init+0x98>)
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <adc_init+0x98>)
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	0289      	lsls	r1, r1, #10
 80038b0:	430a      	orrs	r2, r1
 80038b2:	615a      	str	r2, [r3, #20]

    // Configure PA1 as analog input
    GPIOA->MODER |= GPIO_MODER_MODER1; // Analog mode
 80038b4:	2390      	movs	r3, #144	; 0x90
 80038b6:	05db      	lsls	r3, r3, #23
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	2390      	movs	r3, #144	; 0x90
 80038bc:	05db      	lsls	r3, r3, #23
 80038be:	210c      	movs	r1, #12
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    // Configure ADC settings
    ADC1->CFGR1 &= ~ADC_CFGR1_RES; // Clear the RES bits for 12-bit resolution
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <adc_init+0x9c>)
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <adc_init+0x9c>)
 80038ca:	2118      	movs	r1, #24
 80038cc:	438a      	bics	r2, r1
 80038ce:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN; // Data right-aligned
 80038d0:	4b17      	ldr	r3, [pc, #92]	; (8003930 <adc_init+0x9c>)
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	4b16      	ldr	r3, [pc, #88]	; (8003930 <adc_init+0x9c>)
 80038d6:	2120      	movs	r1, #32
 80038d8:	438a      	bics	r2, r1
 80038da:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 |= ADC_CFGR1_CONT; // Continuous conversion mode
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <adc_init+0x9c>)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <adc_init+0x9c>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0189      	lsls	r1, r1, #6
 80038e6:	430a      	orrs	r2, r1
 80038e8:	60da      	str	r2, [r3, #12]
    ADC1->CHSELR &= ~ADC_CHSELR_CHSEL1; // Clear the CHSEL1 bits
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <adc_init+0x9c>)
 80038ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <adc_init+0x9c>)
 80038f0:	2102      	movs	r1, #2
 80038f2:	438a      	bics	r2, r1
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CHSELR |= ADC_CHSELR_CHSEL1; // Set the channel number in CHSEL1 bits (Channel 1 for PA1)
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <adc_init+0x9c>)
 80038f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <adc_init+0x9c>)
 80038fc:	2102      	movs	r1, #2
 80038fe:	430a      	orrs	r2, r1
 8003900:	629a      	str	r2, [r3, #40]	; 0x28

    // Enable the ADC
    ADC1->CR |= ADC_CR_ADEN;
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <adc_init+0x9c>)
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <adc_init+0x9c>)
 8003908:	2101      	movs	r1, #1
 800390a:	430a      	orrs	r2, r1
 800390c:	609a      	str	r2, [r3, #8]

    // Wait for ADC to be ready
    while (!(ADC1->ISR & ADC_ISR_ADRDY));
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <adc_init+0x9c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2201      	movs	r2, #1
 8003916:	4013      	ands	r3, r2
 8003918:	d0fa      	beq.n	8003910 <adc_init+0x7c>

    // Start the conversion
    ADC1->CR |= ADC_CR_ADSTART;
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <adc_init+0x9c>)
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <adc_init+0x9c>)
 8003920:	2104      	movs	r1, #4
 8003922:	430a      	orrs	r2, r1
 8003924:	609a      	str	r2, [r3, #8]
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	40012400 	.word	0x40012400

08003934 <read_adc>:

uint16_t read_adc(uint8_t channel) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	0002      	movs	r2, r0
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	701a      	strb	r2, [r3, #0]
    // Set the channel in the sequence register
    ADC1->CHSELR = (1 << channel);  // Assuming channel is less than 16
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	409a      	lsls	r2, r3
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <read_adc+0x48>)
 800394a:	629a      	str	r2, [r3, #40]	; 0x28

    // Start the conversion
    ADC1->CR |= ADC_CR_ADSTART;
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <read_adc+0x48>)
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <read_adc+0x48>)
 8003952:	2104      	movs	r1, #4
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]

    // Wait for the end of conversion
    while (!(ADC1->ISR & ADC_ISR_EOC));
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <read_adc+0x48>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2204      	movs	r2, #4
 8003960:	4013      	ands	r3, r2
 8003962:	d0fa      	beq.n	800395a <read_adc+0x26>

    // Read the converted value
    uint16_t result = ADC1->DR;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <read_adc+0x48>)
 8003966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003968:	210e      	movs	r1, #14
 800396a:	187b      	adds	r3, r7, r1
 800396c:	801a      	strh	r2, [r3, #0]

    return result;
 800396e:	187b      	adds	r3, r7, r1
 8003970:	881b      	ldrh	r3, [r3, #0]
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b004      	add	sp, #16
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	40012400 	.word	0x40012400

08003980 <SysTick_Init>:

void SysTick_Init(uint32_t ticks){
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

	SysTick->CTRL = 0; // Disable SysTick
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <SysTick_Init+0x54>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks-1; // Set Reload Register
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <SysTick_Init+0x54>)
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	3a01      	subs	r2, #1
 8003994:	605a      	str	r2, [r3, #4]

	// Setting Interrupt Priority to the highest
	NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);
 8003996:	2301      	movs	r3, #1
 8003998:	425b      	negs	r3, r3
 800399a:	2103      	movs	r1, #3
 800399c:	0018      	movs	r0, r3
 800399e:	f7ff fa87 	bl	8002eb0 <__NVIC_SetPriority>

	SysTick->VAL = 0; // Reset the SysTick counter value
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <SysTick_Init+0x54>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // Selecting internal clock source
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <SysTick_Init+0x54>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <SysTick_Init+0x54>)
 80039ae:	2104      	movs	r1, #4
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; // Enabling SysTick exception Request when 0
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <SysTick_Init+0x54>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <SysTick_Init+0x54>)
 80039ba:	2102      	movs	r1, #2
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]


	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <SysTick_Init+0x54>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <SysTick_Init+0x54>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	e000e010 	.word	0xe000e010

080039d8 <DelayMSW>:

void DelayMSW(unsigned int time){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	for(int i=0; i<=time; i++){
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e009      	b.n	80039fa <DelayMSW+0x22>
		while ((SysTick->CTRL & 0x00010000) == 0){
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <DelayMSW+0x34>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	025b      	lsls	r3, r3, #9
 80039f0:	4013      	ands	r3, r2
 80039f2:	d0f9      	beq.n	80039e8 <DelayMSW+0x10>
	for(int i=0; i<=time; i++){
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d2f1      	bcs.n	80039e6 <DelayMSW+0xe>
				//Wait for 1 millisec.
		}
	}
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b004      	add	sp, #16
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	e000e010 	.word	0xe000e010

08003a10 <SysTick_Handler>:

void SysTick_Handler(void) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0

	if (counter == 0xffffffff) {
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <SysTick_Handler+0x38>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	d103      	bne.n	8003a24 <SysTick_Handler+0x14>
        counter = 0; // Reset the counter if the maximum value is reached
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <SysTick_Handler+0x38>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e004      	b.n	8003a2e <SysTick_Handler+0x1e>
    } else {
        counter++; // Increment the counter
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <SysTick_Handler+0x38>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <SysTick_Handler+0x38>)
 8003a2c:	601a      	str	r2, [r3, #0]
    }

    if (debounceTimer > 0) {
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <SysTick_Handler+0x3c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <SysTick_Handler+0x30>
        debounceTimer--;
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <SysTick_Handler+0x3c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <SysTick_Handler+0x3c>)
 8003a3e:	601a      	str	r2, [r3, #0]
    }

}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	20000418 	.word	0x20000418
 8003a4c:	200005b8 	.word	0x200005b8

08003a50 <Voltage_Print>:

void Voltage_Print(void){ // Debug
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
	  uint16_t adcVal = read_adc(ADC_CHANNEL);
 8003a56:	1dbc      	adds	r4, r7, #6
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f7ff ff6b 	bl	8003934 <read_adc>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	8023      	strh	r3, [r4, #0]
	  float Vin = adcValtoVolts(adcVal);
 8003a62:	1dbb      	adds	r3, r7, #6
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff fdec 	bl	8003644 <adcValtoVolts>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	603b      	str	r3, [r7, #0]
	  sprintf(msg2, " Vol = %.3f V ", Vin);
 8003a70:	6838      	ldr	r0, [r7, #0]
 8003a72:	f7ff f917 	bl	8002ca4 <__aeabi_f2d>
 8003a76:	0002      	movs	r2, r0
 8003a78:	000b      	movs	r3, r1
 8003a7a:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <Voltage_Print+0x54>)
 8003a7c:	480a      	ldr	r0, [pc, #40]	; (8003aa8 <Voltage_Print+0x58>)
 8003a7e:	f002 feaf 	bl	80067e0 <siprintf>
	  printTimestamp();
 8003a82:	f000 f815 	bl	8003ab0 <printTimestamp>
	  HAL_UART_Transmit(&huart2, (uint8_t*)(msg2), strlen(msg2), 200);
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <Voltage_Print+0x58>)
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7fc fb3d 	bl	8000108 <strlen>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	4905      	ldr	r1, [pc, #20]	; (8003aa8 <Voltage_Print+0x58>)
 8003a94:	4805      	ldr	r0, [pc, #20]	; (8003aac <Voltage_Print+0x5c>)
 8003a96:	23c8      	movs	r3, #200	; 0xc8
 8003a98:	f001 fd0e 	bl	80054b8 <HAL_UART_Transmit>
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b003      	add	sp, #12
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	08008bf0 	.word	0x08008bf0
 8003aa8:	200003d0 	.word	0x200003d0
 8003aac:	20000348 	.word	0x20000348

08003ab0 <printTimestamp>:

void printTimestamp(void) { // Debug
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	sprintf(msg, " Time = %d ms:", counter);
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <printTimestamp+0x30>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	490a      	ldr	r1, [pc, #40]	; (8003ae4 <printTimestamp+0x34>)
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <printTimestamp+0x38>)
 8003abc:	0018      	movs	r0, r3
 8003abe:	f002 fe8f 	bl	80067e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg), strlen(msg), 200);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <printTimestamp+0x38>)
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7fc fb1f 	bl	8000108 <strlen>
 8003aca:	0003      	movs	r3, r0
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	4906      	ldr	r1, [pc, #24]	; (8003ae8 <printTimestamp+0x38>)
 8003ad0:	4806      	ldr	r0, [pc, #24]	; (8003aec <printTimestamp+0x3c>)
 8003ad2:	23c8      	movs	r3, #200	; 0xc8
 8003ad4:	f001 fcf0 	bl	80054b8 <HAL_UART_Transmit>
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	20000418 	.word	0x20000418
 8003ae4:	08008c00 	.word	0x08008c00
 8003ae8:	20000404 	.word	0x20000404
 8003aec:	20000348 	.word	0x20000348

08003af0 <Average>:

float Average(float array[], int size) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
    float sum = 0.0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
    float count = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size; i++) {
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e01f      	b.n	8003b48 <Average+0x58>
        if (array[i] != 0) {
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2100      	movs	r1, #0
 8003b14:	1c18      	adds	r0, r3, #0
 8003b16:	f7fc fcd3 	bl	80004c0 <__aeabi_fcmpeq>
 8003b1a:	1e03      	subs	r3, r0, #0
 8003b1c:	d111      	bne.n	8003b42 <Average+0x52>
            sum += array[i];
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	18d3      	adds	r3, r2, r3
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1c19      	adds	r1, r3, #0
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7fc fcf6 	bl	800051c <__aeabi_fadd>
 8003b30:	1c03      	adds	r3, r0, #0
 8003b32:	617b      	str	r3, [r7, #20]
            count++;
 8003b34:	21fe      	movs	r1, #254	; 0xfe
 8003b36:	0589      	lsls	r1, r1, #22
 8003b38:	6938      	ldr	r0, [r7, #16]
 8003b3a:	f7fc fcef 	bl	800051c <__aeabi_fadd>
 8003b3e:	1c03      	adds	r3, r0, #0
 8003b40:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size; i++) {
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dbdb      	blt.n	8003b08 <Average+0x18>
        }
    }
    // Avoid division by zero
    if (count == 0) {
 8003b50:	2100      	movs	r1, #0
 8003b52:	6938      	ldr	r0, [r7, #16]
 8003b54:	f7fc fcb4 	bl	80004c0 <__aeabi_fcmpeq>
 8003b58:	1e03      	subs	r3, r0, #0
 8003b5a:	d001      	beq.n	8003b60 <Average+0x70>
        return 0.0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e004      	b.n	8003b6a <Average+0x7a>
    }
    return sum / count;
 8003b60:	6939      	ldr	r1, [r7, #16]
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7fc fe7a 	bl	800085c <__aeabi_fdiv>
 8003b68:	1c03      	adds	r3, r0, #0
}
 8003b6a:	1c18      	adds	r0, r3, #0
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b006      	add	sp, #24
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <supplySenseLoop>:

void supplySenseLoop (void){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
	  do{
		  sense_V_supply();
 8003b78:	f7ff fcb8 	bl	80034ec <sense_V_supply>
		  avg_v_supply = Avg_and_remove_outliers_V_Supply();
 8003b7c:	f7ff fc3e 	bl	80033fc <Avg_and_remove_outliers_V_Supply>
 8003b80:	1c02      	adds	r2, r0, #0
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <supplySenseLoop+0x58>)
 8003b84:	601a      	str	r2, [r3, #0]

		  V_threshold = 0.9 * avg_v_supply;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <supplySenseLoop+0x58>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	1c18      	adds	r0, r3, #0
 8003b8c:	f7ff f88a 	bl	8002ca4 <__aeabi_f2d>
 8003b90:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <supplySenseLoop+0x5c>)
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <supplySenseLoop+0x60>)
 8003b94:	f7fe f998 	bl	8001ec8 <__aeabi_dmul>
 8003b98:	0002      	movs	r2, r0
 8003b9a:	000b      	movs	r3, r1
 8003b9c:	0010      	movs	r0, r2
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	f7fe fff4 	bl	8002b8c <__aeabi_d2iz>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <supplySenseLoop+0x64>)
 8003ba8:	601a      	str	r2, [r3, #0]
		  DelayMSW(50); // Wait for connection to stable
 8003baa:	2032      	movs	r0, #50	; 0x32
 8003bac:	f7ff ff14 	bl	80039d8 <DelayMSW>

	  }while (!(VoltageInRange(avg_v_supply)));
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <supplySenseLoop+0x58>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1c18      	adds	r0, r3, #0
 8003bb6:	f000 f85d 	bl	8003c74 <VoltageInRange>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d0dc      	beq.n	8003b78 <supplySenseLoop+0x4>
	  PreChargeRelayCTRL(ON);
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f000 f80c 	bl	8003bdc <PreChargeRelayCTRL>
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	20000420 	.word	0x20000420
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	3feccccc 	.word	0x3feccccc
 8003bd8:	2000041c 	.word	0x2000041c

08003bdc <PreChargeRelayCTRL>:

void PreChargeRelayCTRL(int state){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	if (state){
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <PreChargeRelayCTRL+0x1c>
		GPIO_PORT_PCHG->ODR |= GPIO_PIN_PCHG_RELAY; // PreCharge Relay is ON
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <PreChargeRelayCTRL+0x30>)
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <PreChargeRelayCTRL+0x30>)
 8003bf0:	2110      	movs	r1, #16
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_PCHG->ODR &= ~(GPIO_PIN_PCHG_RELAY); // Turn off the precharge relay
	}
}
 8003bf6:	e005      	b.n	8003c04 <PreChargeRelayCTRL+0x28>
		GPIO_PORT_PCHG->ODR &= ~(GPIO_PIN_PCHG_RELAY); // Turn off the precharge relay
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <PreChargeRelayCTRL+0x30>)
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <PreChargeRelayCTRL+0x30>)
 8003bfe:	2110      	movs	r1, #16
 8003c00:	438a      	bics	r2, r1
 8003c02:	615a      	str	r2, [r3, #20]
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	48000800 	.word	0x48000800

08003c10 <ContactorRelayCTRL>:

void ContactorRelayCTRL(int state){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	if (state){
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d006      	beq.n	8003c2c <ContactorRelayCTRL+0x1c>
		GPIO_PORT_PCHG->ODR |= GPIO_PIN_CONTACTOR_RELAY;  // Turn on the contactor relay
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <ContactorRelayCTRL+0x30>)
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <ContactorRelayCTRL+0x30>)
 8003c24:	2108      	movs	r1, #8
 8003c26:	430a      	orrs	r2, r1
 8003c28:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_PCHG->ODR &= ~(GPIO_PIN_CONTACTOR_RELAY); // Turn off the Contactor relay
	}
}
 8003c2a:	e005      	b.n	8003c38 <ContactorRelayCTRL+0x28>
		GPIO_PORT_PCHG->ODR &= ~(GPIO_PIN_CONTACTOR_RELAY); // Turn off the Contactor relay
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <ContactorRelayCTRL+0x30>)
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <ContactorRelayCTRL+0x30>)
 8003c32:	2108      	movs	r1, #8
 8003c34:	438a      	bics	r2, r1
 8003c36:	615a      	str	r2, [r3, #20]
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	48000800 	.word	0x48000800

08003c44 <PreChargeRelayIsON>:

int PreChargeRelayIsON(void){
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
	int isItON = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
	if ((GPIO_PORT_PCHG->ODR & GPIO_PIN_PCHG_RELAY)== GPIO_PIN_PCHG_RELAY){
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <PreChargeRelayIsON+0x2c>)
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2210      	movs	r2, #16
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d102      	bne.n	8003c60 <PreChargeRelayIsON+0x1c>
		isItON = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	e001      	b.n	8003c64 <PreChargeRelayIsON+0x20>
	}else{
		isItON = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
	}
	return isItON;
 8003c64:	687b      	ldr	r3, [r7, #4]
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	48000800 	.word	0x48000800

08003c74 <VoltageInRange>:

int VoltageInRange(float Vin){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	int isIt = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
	if ((Vin >= MIN_SUPPLY_VOLTAGE) && (Vin <= MAX_SUPPLY_VOLTAGE)){
 8003c80:	490a      	ldr	r1, [pc, #40]	; (8003cac <VoltageInRange+0x38>)
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fc40 	bl	8000508 <__aeabi_fcmpge>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d008      	beq.n	8003c9e <VoltageInRange+0x2a>
 8003c8c:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <VoltageInRange+0x3c>)
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fc fc26 	bl	80004e0 <__aeabi_fcmple>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d002      	beq.n	8003c9e <VoltageInRange+0x2a>
		isIt = 1;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e001      	b.n	8003ca2 <VoltageInRange+0x2e>
	}else{
		isIt = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
	}
	return isIt;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b004      	add	sp, #16
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	41f00000 	.word	0x41f00000
 8003cb0:	42740000 	.word	0x42740000

08003cb4 <FrontLightRelayCTRL>:

void FrontLightRelayCTRL(int state){
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	if (state){
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <FrontLightRelayCTRL+0x1c>
		GPIO_PORT_CABINLEDS->ODR |= GPIO_PIN_CAB_LIGHT_FRNT_CTRL; // Front CabinLight is ON
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <FrontLightRelayCTRL+0x30>)
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <FrontLightRelayCTRL+0x30>)
 8003cc8:	2108      	movs	r1, #8
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_FRNT_CTRL); // Front CabinLight is OFF
	}
}
 8003cce:	e005      	b.n	8003cdc <FrontLightRelayCTRL+0x28>
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_FRNT_CTRL); // Front CabinLight is OFF
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <FrontLightRelayCTRL+0x30>)
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <FrontLightRelayCTRL+0x30>)
 8003cd6:	2108      	movs	r1, #8
 8003cd8:	438a      	bics	r2, r1
 8003cda:	615a      	str	r2, [r3, #20]
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	48000400 	.word	0x48000400

08003ce8 <BackLightRelayCTRL>:

void BackLightRelayCTRL(int state){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	if (state){
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <BackLightRelayCTRL+0x1c>
		GPIO_PORT_CABINLEDS->ODR |= GPIO_PIN_CAB_LIGHT_REAR_CTRL;  // Back CabinLight is ON
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <BackLightRelayCTRL+0x30>)
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <BackLightRelayCTRL+0x30>)
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_REAR_CTRL); // Back CabinLight is OFF
	}
}
 8003d02:	e005      	b.n	8003d10 <BackLightRelayCTRL+0x28>
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_REAR_CTRL); // Back CabinLight is OFF
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <BackLightRelayCTRL+0x30>)
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <BackLightRelayCTRL+0x30>)
 8003d0a:	2110      	movs	r1, #16
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	615a      	str	r2, [r3, #20]
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	48000400 	.word	0x48000400

08003d1c <DickeyLightRelayCTRL>:

void DickeyLightRelayCTRL(int state){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	if (state){
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <DickeyLightRelayCTRL+0x1c>
		GPIO_PORT_CABINLEDS->ODR |= GPIO_PIN_CAB_LIGHT_DICKEY_CTRL;  // Dickey CabinLight is ON
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <DickeyLightRelayCTRL+0x30>)
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <DickeyLightRelayCTRL+0x30>)
 8003d30:	2120      	movs	r1, #32
 8003d32:	430a      	orrs	r2, r1
 8003d34:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_DICKEY_CTRL); // Dickey CabinLight is OFF
	}
}
 8003d36:	e005      	b.n	8003d44 <DickeyLightRelayCTRL+0x28>
		GPIO_PORT_CABINLEDS->ODR &= ~(GPIO_PIN_CAB_LIGHT_DICKEY_CTRL); // Dickey CabinLight is OFF
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <DickeyLightRelayCTRL+0x30>)
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <DickeyLightRelayCTRL+0x30>)
 8003d3e:	2120      	movs	r1, #32
 8003d40:	438a      	bics	r2, r1
 8003d42:	615a      	str	r2, [r3, #20]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	48000400 	.word	0x48000400

08003d50 <BuzzerCTRL>:

void BuzzerCTRL(int state){
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	if (state){
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <BuzzerCTRL+0x1c>
		GPIO_PORT_BUZZER->ODR |= GPIO_PIN_BUZZER_CTRL;  // Buzzer is ON
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <BuzzerCTRL+0x30>)
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <BuzzerCTRL+0x30>)
 8003d64:	2104      	movs	r1, #4
 8003d66:	430a      	orrs	r2, r1
 8003d68:	615a      	str	r2, [r3, #20]
	}else{
		GPIO_PORT_BUZZER->ODR &= ~(GPIO_PIN_BUZZER_CTRL); // Buzzer is OFF
	}
}
 8003d6a:	e005      	b.n	8003d78 <BuzzerCTRL+0x28>
		GPIO_PORT_BUZZER->ODR &= ~(GPIO_PIN_BUZZER_CTRL); // Buzzer is OFF
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <BuzzerCTRL+0x30>)
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <BuzzerCTRL+0x30>)
 8003d72:	2104      	movs	r1, #4
 8003d74:	438a      	bics	r2, r1
 8003d76:	615a      	str	r2, [r3, #20]
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	48000400 	.word	0x48000400

08003d84 <BuzzerDriver>:

void BuzzerDriver(void){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	if (Check_Front_Door_Switches()||Check_Rear_Door_Switches()||Check_Dickey_Door_Switch()){
 8003d88:	f000 f88e 	bl	8003ea8 <Check_Front_Door_Switches>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d107      	bne.n	8003da0 <BuzzerDriver+0x1c>
 8003d90:	f000 f8cc 	bl	8003f2c <Check_Rear_Door_Switches>
 8003d94:	1e03      	subs	r3, r0, #0
 8003d96:	d103      	bne.n	8003da0 <BuzzerDriver+0x1c>
 8003d98:	f000 f90e 	bl	8003fb8 <Check_Dickey_Door_Switch>
 8003d9c:	1e03      	subs	r3, r0, #0
 8003d9e:	d003      	beq.n	8003da8 <BuzzerDriver+0x24>
		BuzzerCTRL(ON);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7ff ffd5 	bl	8003d50 <BuzzerCTRL>
 8003da6:	e003      	b.n	8003db0 <BuzzerDriver+0x2c>
	}else{
		BuzzerCTRL(OFF);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7ff ffd1 	bl	8003d50 <BuzzerCTRL>
	}
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <ConfigureOutputPins>:

void ConfigureOutputPins(void){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0

	// Enable clock for GPIO Port B and C
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;
 8003dbc:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <ConfigureOutputPins+0x64>)
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <ConfigureOutputPins+0x64>)
 8003dc2:	21c0      	movs	r1, #192	; 0xc0
 8003dc4:	0309      	lsls	r1, r1, #12
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	615a      	str	r2, [r3, #20]

    // Configure pins PB3, PB4, PB5 output
    GPIO_PORT_CABINLEDS->MODER |= GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0;
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003dd0:	21a8      	movs	r1, #168	; 0xa8
 8003dd2:	00c9      	lsls	r1, r1, #3
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

    // Configure pins PC3, PC4, PC15 as high-speed output
    GPIO_PORT_CABINLEDS->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3 | GPIO_OSPEEDER_OSPEEDR4 | GPIO_OSPEEDER_OSPEEDR5;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003dde:	21fc      	movs	r1, #252	; 0xfc
 8003de0:	0109      	lsls	r1, r1, #4
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]

    // Set pins PB3, PB4, PB5 as push-pull
    GPIO_PORT_CABINLEDS->OTYPER &= ~(GPIO_OTYPER_OT_3 | GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5);
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003dec:	2138      	movs	r1, #56	; 0x38
 8003dee:	438a      	bics	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]

    // Configure pin PB2 output
    GPIO_PORT_BUZZER->MODER |= GPIO_MODER_MODER2_0;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003df8:	2110      	movs	r1, #16
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

    // Configure pin PB2 as high-speed output
    GPIO_PORT_BUZZER->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2;
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003e04:	2130      	movs	r1, #48	; 0x30
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]

    // Set pin PB2 as push-pull
    GPIO_PORT_BUZZER->OTYPER &= ~GPIO_OTYPER_OT_2;
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <ConfigureOutputPins+0x68>)
 8003e10:	2104      	movs	r1, #4
 8003e12:	438a      	bics	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	48000400 	.word	0x48000400

08003e24 <ConfigureInputPins>:

void ConfigureInputPins(void){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
    // Enable clock for GPIO Port A and Port B
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <ConfigureInputPins+0x6c>)
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <ConfigureInputPins+0x6c>)
 8003e2e:	21c0      	movs	r1, #192	; 0xc0
 8003e30:	02c9      	lsls	r1, r1, #11
 8003e32:	430a      	orrs	r2, r1
 8003e34:	615a      	str	r2, [r3, #20]

    // Configure PA4, PA5, PA8, PA15 as digital input with internal pull-up for Front Right/Left and Back  Right/Left Switch
    GPIOA->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5 | GPIO_MODER_MODER8 | GPIO_MODER_MODER15); // Clear bits
 8003e36:	2390      	movs	r3, #144	; 0x90
 8003e38:	05db      	lsls	r3, r3, #23
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2390      	movs	r3, #144	; 0x90
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	4914      	ldr	r1, [pc, #80]	; (8003e94 <ConfigureInputPins+0x70>)
 8003e42:	400a      	ands	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPDR4_0 | GPIO_PUPDR_PUPDR5_0 | GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR15_0; // Set pull-up
 8003e46:	2390      	movs	r3, #144	; 0x90
 8003e48:	05db      	lsls	r3, r3, #23
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	2390      	movs	r3, #144	; 0x90
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	4911      	ldr	r1, [pc, #68]	; (8003e98 <ConfigureInputPins+0x74>)
 8003e52:	430a      	orrs	r2, r1
 8003e54:	60da      	str	r2, [r3, #12]

    // Configure PB6 and PB8 as digital input with internal pull-up for Dickey Switch and Cab_ON_Signal
    GPIOB->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER8); // Clear bits
 8003e56:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e5c:	4910      	ldr	r1, [pc, #64]	; (8003ea0 <ConfigureInputPins+0x7c>)
 8003e5e:	400a      	ands	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR8_0); // Set pull-up
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e68:	2188      	movs	r1, #136	; 0x88
 8003e6a:	0249      	lsls	r1, r1, #9
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]

    // Configure PB7  as digital input with internal pull-up for Motor Drive Input
    GPIOB->MODER &= ~GPIO_MODER_MODER7; // Clear bits
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e76:	490b      	ldr	r1, [pc, #44]	; (8003ea4 <ConfigureInputPins+0x80>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR |= GPIO_PUPDR_PUPDR7_0 ; // Set pull-up
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <ConfigureInputPins+0x78>)
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	01c9      	lsls	r1, r1, #7
 8003e86:	430a      	orrs	r2, r1
 8003e88:	60da      	str	r2, [r3, #12]
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	3ffcf0ff 	.word	0x3ffcf0ff
 8003e98:	40010500 	.word	0x40010500
 8003e9c:	48000400 	.word	0x48000400
 8003ea0:	fffccfff 	.word	0xfffccfff
 8003ea4:	ffff3fff 	.word	0xffff3fff

08003ea8 <Check_Front_Door_Switches>:

int Check_Front_Door_Switches(void){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
    int state = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
    int frontLeftSwitch = GPIO_PORT_DOORSWITCHES->IDR & GPIO_PIN_CAB_DOOR_SW_FRNT_L;
 8003eb2:	2390      	movs	r3, #144	; 0x90
 8003eb4:	05db      	lsls	r3, r3, #23
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	001a      	movs	r2, r3
 8003eba:	2320      	movs	r3, #32
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    int frontRightSwitch = GPIO_PORT_DOORSWITCHES->IDR & GPIO_PIN_CAB_DOOR_SW_FRNT_R;
 8003ec0:	2390      	movs	r3, #144	; 0x90
 8003ec2:	05db      	lsls	r3, r3, #23
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	2310      	movs	r3, #16
 8003eca:	4013      	ands	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

    if (frontLeftSwitch == 0 || frontRightSwitch == 0) {
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <Check_Front_Door_Switches+0x32>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d119      	bne.n	8003f0e <Check_Front_Door_Switches+0x66>
        int frontLeftDebounced = debounceSwitch(frontLeftSwitch, &FrontLeftSWDebounceOneMilliSec, &FrontLeftSWDebounceTwoMilliSec, &FrontLeftSWDebounceThreeMilliSec);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	b298      	uxth	r0, r3
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <Check_Front_Door_Switches+0x70>)
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <Check_Front_Door_Switches+0x74>)
 8003ee2:	490f      	ldr	r1, [pc, #60]	; (8003f20 <Check_Front_Door_Switches+0x78>)
 8003ee4:	f7ff f9ee 	bl	80032c4 <debounceSwitch>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	60bb      	str	r3, [r7, #8]
        int frontRightDebounced = debounceSwitch(frontRightSwitch, &FrontRightSWDebounceOneMilliSec, &FrontRightSWDebounceTwoMilliSec, &FrontLeftSWDebounceThreeMilliSec);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	b298      	uxth	r0, r3
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <Check_Front_Door_Switches+0x70>)
 8003ef2:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <Check_Front_Door_Switches+0x7c>)
 8003ef4:	490c      	ldr	r1, [pc, #48]	; (8003f28 <Check_Front_Door_Switches+0x80>)
 8003ef6:	f7ff f9e5 	bl	80032c4 <debounceSwitch>
 8003efa:	0003      	movs	r3, r0
 8003efc:	607b      	str	r3, [r7, #4]

        if (frontLeftDebounced == 0 || frontRightDebounced == 0) {
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <Check_Front_Door_Switches+0x62>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <Check_Front_Door_Switches+0x66>
            state = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
        }
    }

    return state;
 8003f0e:	697b      	ldr	r3, [r7, #20]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b006      	add	sp, #24
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200000e0 	.word	0x200000e0
 8003f1c:	200000d4 	.word	0x200000d4
 8003f20:	200000c8 	.word	0x200000c8
 8003f24:	200000bc 	.word	0x200000bc
 8003f28:	200000b0 	.word	0x200000b0

08003f2c <Check_Rear_Door_Switches>:

int Check_Rear_Door_Switches(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
    int state = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
    int rearLeftSwitch = GPIO_PORT_DOORSWITCHES->IDR & GPIO_PIN_CAB_DOOR_SW_REAR_L;
 8003f36:	2390      	movs	r3, #144	; 0x90
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
    int rearRightSwitch = GPIO_PORT_DOORSWITCHES->IDR & GPIO_PIN_CAB_DOOR_SW_REAR_R;
 8003f46:	2390      	movs	r3, #144	; 0x90
 8003f48:	05db      	lsls	r3, r3, #23
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	001a      	movs	r2, r3
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4013      	ands	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

    if (rearLeftSwitch == 0 || rearRightSwitch == 0) {
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <Check_Rear_Door_Switches+0x36>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d119      	bne.n	8003f96 <Check_Rear_Door_Switches+0x6a>
        int rearLeftDebounced = debounceSwitch(rearLeftSwitch, &RearLeftSWDebounceOneMilliSec, &RearLeftSWDebounceTwoMilliSec, &RearLeftSWDebounceThreeMilliSec);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	b298      	uxth	r0, r3
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <Check_Rear_Door_Switches+0x74>)
 8003f68:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <Check_Rear_Door_Switches+0x78>)
 8003f6a:	490f      	ldr	r1, [pc, #60]	; (8003fa8 <Check_Rear_Door_Switches+0x7c>)
 8003f6c:	f7ff f9aa 	bl	80032c4 <debounceSwitch>
 8003f70:	0003      	movs	r3, r0
 8003f72:	60bb      	str	r3, [r7, #8]
        int rearRightDebounced = debounceSwitch(rearRightSwitch, &RearRightSWDebounceOneMilliSec, &RearRightSWDebounceTwoMilliSec, &RearRightSWDebounceThreeMilliSec);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	b298      	uxth	r0, r3
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <Check_Rear_Door_Switches+0x80>)
 8003f7a:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <Check_Rear_Door_Switches+0x84>)
 8003f7c:	490d      	ldr	r1, [pc, #52]	; (8003fb4 <Check_Rear_Door_Switches+0x88>)
 8003f7e:	f7ff f9a1 	bl	80032c4 <debounceSwitch>
 8003f82:	0003      	movs	r3, r0
 8003f84:	607b      	str	r3, [r7, #4]

        if (rearLeftDebounced == 0 || rearRightDebounced == 0) {
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <Check_Rear_Door_Switches+0x66>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <Check_Rear_Door_Switches+0x6a>
            state = 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
        }
    }
    return state;
 8003f96:	697b      	ldr	r3, [r7, #20]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b006      	add	sp, #24
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000128 	.word	0x20000128
 8003fa4:	2000011c 	.word	0x2000011c
 8003fa8:	20000110 	.word	0x20000110
 8003fac:	20000104 	.word	0x20000104
 8003fb0:	200000f8 	.word	0x200000f8
 8003fb4:	200000ec 	.word	0x200000ec

08003fb8 <Check_Dickey_Door_Switch>:

int Check_Dickey_Door_Switch(void){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
    int state = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
    int dickeySwitch = GPIO_PORT_DICKEYSWITCH->IDR & GPIO_PIN_CAB_DOOR_SW_DICKEY;
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <Check_Dickey_Door_Switch+0x44>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	2340      	movs	r3, #64	; 0x40
 8003fca:	4013      	ands	r3, r2
 8003fcc:	60bb      	str	r3, [r7, #8]

    if (dickeySwitch == 0) {
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <Check_Dickey_Door_Switch+0x38>
        int dickeyDebounced = debounceSwitch(dickeySwitch, &DickeySWDebounceOneMilliSec, &DickeySWDebounceTwoMilliSec, &DickeySWDebounceThreeMilliSec);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	b298      	uxth	r0, r3
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <Check_Dickey_Door_Switch+0x48>)
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <Check_Dickey_Door_Switch+0x4c>)
 8003fdc:	490a      	ldr	r1, [pc, #40]	; (8004008 <Check_Dickey_Door_Switch+0x50>)
 8003fde:	f7ff f971 	bl	80032c4 <debounceSwitch>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	607b      	str	r3, [r7, #4]
        if (dickeyDebounced == 0) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <Check_Dickey_Door_Switch+0x38>
            state = 1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
        }
    }
    return state;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b004      	add	sp, #16
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	48000400 	.word	0x48000400
 8004000:	2000014c 	.word	0x2000014c
 8004004:	20000140 	.word	0x20000140
 8004008:	20000134 	.word	0x20000134

0800400c <Check_Motor_Drive_Signal>:

int Check_Motor_Drive_Signal(void){
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
	if (((GPIO_PORT_MOTORDRIVE->IDR & GPIO_PIN_MOTORDRIVE_SIGNAL) != 0)){
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <Check_Motor_Drive_Signal+0x1c>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	4013      	ands	r3, r2
 8004018:	d001      	beq.n	800401e <Check_Motor_Drive_Signal+0x12>
		return 0;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <Check_Motor_Drive_Signal+0x14>
	}else{
		return 1;
 800401e:	2301      	movs	r3, #1
	}
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	48000400 	.word	0x48000400

0800402c <Check_Cab_On_Door_Signal>:

int Check_Cab_On_Door_Signal(void){
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	if (((GPIO_PORT_CAB_ON_DOOR->IDR & GPIO_PIN_CAB_ON_DOOR_SIGNAL) != 0)){
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <Check_Cab_On_Door_Signal+0x1c>)
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4013      	ands	r3, r2
 800403a:	d001      	beq.n	8004040 <Check_Cab_On_Door_Signal+0x14>
		return 0;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <Check_Cab_On_Door_Signal+0x16>
	}else{
		return 1;
 8004040:	2301      	movs	r3, #1
	}
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	48000400 	.word	0x48000400

0800404c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004050:	b672      	cpsid	i
}
 8004052:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004054:	e7fe      	b.n	8004054 <Error_Handler+0x8>
	...

08004058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_MspInit+0x44>)
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_MspInit+0x44>)
 8004064:	2101      	movs	r1, #1
 8004066:	430a      	orrs	r2, r1
 8004068:	619a      	str	r2, [r3, #24]
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_MspInit+0x44>)
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2201      	movs	r2, #1
 8004070:	4013      	ands	r3, r2
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_MspInit+0x44>)
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_MspInit+0x44>)
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	0549      	lsls	r1, r1, #21
 8004080:	430a      	orrs	r2, r1
 8004082:	61da      	str	r2, [r3, #28]
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_MspInit+0x44>)
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	055b      	lsls	r3, r3, #21
 800408c:	4013      	ands	r3, r2
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	40021000 	.word	0x40021000

080040a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b08b      	sub	sp, #44	; 0x2c
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	2414      	movs	r4, #20
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	0018      	movs	r0, r3
 80040ae:	2314      	movs	r3, #20
 80040b0:	001a      	movs	r2, r3
 80040b2:	2100      	movs	r1, #0
 80040b4:	f002 fc00 	bl	80068b8 <memset>
  if(huart->Instance==USART2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_UART_MspInit+0x90>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d132      	bne.n	8004128 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <HAL_UART_MspInit+0x94>)
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_UART_MspInit+0x94>)
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0289      	lsls	r1, r1, #10
 80040cc:	430a      	orrs	r2, r1
 80040ce:	61da      	str	r2, [r3, #28]
 80040d0:	4b18      	ldr	r3, [pc, #96]	; (8004134 <HAL_UART_MspInit+0x94>)
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	4b15      	ldr	r3, [pc, #84]	; (8004134 <HAL_UART_MspInit+0x94>)
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <HAL_UART_MspInit+0x94>)
 80040e4:	2180      	movs	r1, #128	; 0x80
 80040e6:	0289      	lsls	r1, r1, #10
 80040e8:	430a      	orrs	r2, r1
 80040ea:	615a      	str	r2, [r3, #20]
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_UART_MspInit+0x94>)
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	4013      	ands	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040fa:	0021      	movs	r1, r4
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	220c      	movs	r2, #12
 8004100:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004102:	187b      	adds	r3, r7, r1
 8004104:	2202      	movs	r2, #2
 8004106:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	187b      	adds	r3, r7, r1
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800410e:	187b      	adds	r3, r7, r1
 8004110:	2203      	movs	r2, #3
 8004112:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004114:	187b      	adds	r3, r7, r1
 8004116:	2201      	movs	r2, #1
 8004118:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411a:	187a      	adds	r2, r7, r1
 800411c:	2390      	movs	r3, #144	; 0x90
 800411e:	05db      	lsls	r3, r3, #23
 8004120:	0011      	movs	r1, r2
 8004122:	0018      	movs	r0, r3
 8004124:	f000 fa0c 	bl	8004540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b00b      	add	sp, #44	; 0x2c
 800412e:	bd90      	pop	{r4, r7, pc}
 8004130:	40004400 	.word	0x40004400
 8004134:	40021000 	.word	0x40021000

08004138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800413c:	e7fe      	b.n	800413c <NMI_Handler+0x4>

0800413e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004142:	e7fe      	b.n	8004142 <HardFault_Handler+0x4>

08004144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  return 1;
 800415c:	2301      	movs	r3, #1
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <_kill>:

int _kill(int pid, int sig)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800416e:	f002 fbfd 	bl	800696c <__errno>
 8004172:	0003      	movs	r3, r0
 8004174:	2216      	movs	r2, #22
 8004176:	601a      	str	r2, [r3, #0]
  return -1;
 8004178:	2301      	movs	r3, #1
 800417a:	425b      	negs	r3, r3
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <_exit>:

void _exit (int status)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800418c:	2301      	movs	r3, #1
 800418e:	425a      	negs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0011      	movs	r1, r2
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff ffe5 	bl	8004164 <_kill>
  while (1) {}    /* Make sure we hang here */
 800419a:	e7fe      	b.n	800419a <_exit+0x16>

0800419c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e00a      	b.n	80041c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041ae:	e000      	b.n	80041b2 <_read+0x16>
 80041b0:	bf00      	nop
 80041b2:	0001      	movs	r1, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	60ba      	str	r2, [r7, #8]
 80041ba:	b2ca      	uxtb	r2, r1
 80041bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3301      	adds	r3, #1
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	dbf0      	blt.n	80041ae <_read+0x12>
  }

  return len;
 80041cc:	687b      	ldr	r3, [r7, #4]
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b006      	add	sp, #24
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e009      	b.n	80041fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	60ba      	str	r2, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	e000      	b.n	80041f6 <_write+0x20>
 80041f4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3301      	adds	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	429a      	cmp	r2, r3
 8004202:	dbf1      	blt.n	80041e8 <_write+0x12>
  }
  return len;
 8004204:	687b      	ldr	r3, [r7, #4]
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b006      	add	sp, #24
 800420c:	bd80      	pop	{r7, pc}

0800420e <_close>:

int _close(int file)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004216:	2301      	movs	r3, #1
 8004218:	425b      	negs	r3, r3
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b002      	add	sp, #8
 8004220:	bd80      	pop	{r7, pc}

08004222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	0192      	lsls	r2, r2, #6
 8004232:	605a      	str	r2, [r3, #4]
  return 0;
 8004234:	2300      	movs	r3, #0
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b002      	add	sp, #8
 800423c:	bd80      	pop	{r7, pc}

0800423e <_isatty>:

int _isatty(int file)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004246:	2301      	movs	r3, #1
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}

08004250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800425c:	2300      	movs	r3, #0
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b004      	add	sp, #16
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <_sbrk+0x5c>)
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <_sbrk+0x60>)
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <_sbrk+0x64>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <_sbrk+0x64>)
 8004286:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <_sbrk+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	18d3      	adds	r3, r2, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d207      	bcs.n	80042a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004298:	f002 fb68 	bl	800696c <__errno>
 800429c:	0003      	movs	r3, r0
 800429e:	220c      	movs	r2, #12
 80042a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	425b      	negs	r3, r3
 80042a6:	e009      	b.n	80042bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <_sbrk+0x64>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	18d2      	adds	r2, r2, r3
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_sbrk+0x64>)
 80042b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b006      	add	sp, #24
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20004000 	.word	0x20004000
 80042c8:	00000400 	.word	0x00000400
 80042cc:	200005c0 	.word	0x200005c0
 80042d0:	20000718 	.word	0x20000718

080042d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042e0:	480d      	ldr	r0, [pc, #52]	; (8004318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042e4:	f7ff fff6 	bl	80042d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042e8:	480c      	ldr	r0, [pc, #48]	; (800431c <LoopForever+0x6>)
  ldr r1, =_edata
 80042ea:	490d      	ldr	r1, [pc, #52]	; (8004320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042ec:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <LoopForever+0xe>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f0:	e002      	b.n	80042f8 <LoopCopyDataInit>

080042f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042f6:	3304      	adds	r3, #4

080042f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042fc:	d3f9      	bcc.n	80042f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042fe:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004300:	4c0a      	ldr	r4, [pc, #40]	; (800432c <LoopForever+0x16>)
  movs r3, #0
 8004302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004304:	e001      	b.n	800430a <LoopFillZerobss>

08004306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004308:	3204      	adds	r2, #4

0800430a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800430c:	d3fb      	bcc.n	8004306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800430e:	f002 fb33 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004312:	f7fe fe3b 	bl	8002f8c <main>

08004316 <LoopForever>:

LoopForever:
    b LoopForever
 8004316:	e7fe      	b.n	8004316 <LoopForever>
  ldr   r0, =_estack
 8004318:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800431c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004320:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8004324:	08009084 	.word	0x08009084
  ldr r2, =_sbss
 8004328:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 800432c:	20000714 	.word	0x20000714

08004330 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004330:	e7fe      	b.n	8004330 <ADC1_COMP_IRQHandler>
	...

08004334 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <HAL_Init+0x24>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_Init+0x24>)
 800433e:	2110      	movs	r1, #16
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004344:	2003      	movs	r0, #3
 8004346:	f000 f809 	bl	800435c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800434a:	f7ff fe85 	bl	8004058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	40022000 	.word	0x40022000

0800435c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <HAL_InitTick+0x5c>)
 8004366:	681c      	ldr	r4, [r3, #0]
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_InitTick+0x60>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	0019      	movs	r1, r3
 800436e:	23fa      	movs	r3, #250	; 0xfa
 8004370:	0098      	lsls	r0, r3, #2
 8004372:	f7fb fee5 	bl	8000140 <__udivsi3>
 8004376:	0003      	movs	r3, r0
 8004378:	0019      	movs	r1, r3
 800437a:	0020      	movs	r0, r4
 800437c:	f7fb fee0 	bl	8000140 <__udivsi3>
 8004380:	0003      	movs	r3, r0
 8004382:	0018      	movs	r0, r3
 8004384:	f000 f8cf 	bl	8004526 <HAL_SYSTICK_Config>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d001      	beq.n	8004390 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e00f      	b.n	80043b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d80b      	bhi.n	80043ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	2301      	movs	r3, #1
 800439a:	425b      	negs	r3, r3
 800439c:	2200      	movs	r2, #0
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f8ac 	bl	80044fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_InitTick+0x64>)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e000      	b.n	80043b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b003      	add	sp, #12
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	20000158 	.word	0x20000158
 80043bc:	20000160 	.word	0x20000160
 80043c0:	2000015c 	.word	0x2000015c

080043c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  return uwTick;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_GetTick+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	200005c4 	.word	0x200005c4

080043d8 <__NVIC_SetPriority>:
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	0002      	movs	r2, r0
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	1dfb      	adds	r3, r7, #7
 80043e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043e6:	1dfb      	adds	r3, r7, #7
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b7f      	cmp	r3, #127	; 0x7f
 80043ec:	d828      	bhi.n	8004440 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043ee:	4a2f      	ldr	r2, [pc, #188]	; (80044ac <__NVIC_SetPriority+0xd4>)
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	089b      	lsrs	r3, r3, #2
 80043f8:	33c0      	adds	r3, #192	; 0xc0
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	589b      	ldr	r3, [r3, r2]
 80043fe:	1dfa      	adds	r2, r7, #7
 8004400:	7812      	ldrb	r2, [r2, #0]
 8004402:	0011      	movs	r1, r2
 8004404:	2203      	movs	r2, #3
 8004406:	400a      	ands	r2, r1
 8004408:	00d2      	lsls	r2, r2, #3
 800440a:	21ff      	movs	r1, #255	; 0xff
 800440c:	4091      	lsls	r1, r2
 800440e:	000a      	movs	r2, r1
 8004410:	43d2      	mvns	r2, r2
 8004412:	401a      	ands	r2, r3
 8004414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	22ff      	movs	r2, #255	; 0xff
 800441c:	401a      	ands	r2, r3
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	0018      	movs	r0, r3
 8004424:	2303      	movs	r3, #3
 8004426:	4003      	ands	r3, r0
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800442c:	481f      	ldr	r0, [pc, #124]	; (80044ac <__NVIC_SetPriority+0xd4>)
 800442e:	1dfb      	adds	r3, r7, #7
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b25b      	sxtb	r3, r3
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	430a      	orrs	r2, r1
 8004438:	33c0      	adds	r3, #192	; 0xc0
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	501a      	str	r2, [r3, r0]
}
 800443e:	e031      	b.n	80044a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004440:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <__NVIC_SetPriority+0xd8>)
 8004442:	1dfb      	adds	r3, r7, #7
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	0019      	movs	r1, r3
 8004448:	230f      	movs	r3, #15
 800444a:	400b      	ands	r3, r1
 800444c:	3b08      	subs	r3, #8
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	3306      	adds	r3, #6
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	18d3      	adds	r3, r2, r3
 8004456:	3304      	adds	r3, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1dfa      	adds	r2, r7, #7
 800445c:	7812      	ldrb	r2, [r2, #0]
 800445e:	0011      	movs	r1, r2
 8004460:	2203      	movs	r2, #3
 8004462:	400a      	ands	r2, r1
 8004464:	00d2      	lsls	r2, r2, #3
 8004466:	21ff      	movs	r1, #255	; 0xff
 8004468:	4091      	lsls	r1, r2
 800446a:	000a      	movs	r2, r1
 800446c:	43d2      	mvns	r2, r2
 800446e:	401a      	ands	r2, r3
 8004470:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	019b      	lsls	r3, r3, #6
 8004476:	22ff      	movs	r2, #255	; 0xff
 8004478:	401a      	ands	r2, r3
 800447a:	1dfb      	adds	r3, r7, #7
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	0018      	movs	r0, r3
 8004480:	2303      	movs	r3, #3
 8004482:	4003      	ands	r3, r0
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004488:	4809      	ldr	r0, [pc, #36]	; (80044b0 <__NVIC_SetPriority+0xd8>)
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	001c      	movs	r4, r3
 8004490:	230f      	movs	r3, #15
 8004492:	4023      	ands	r3, r4
 8004494:	3b08      	subs	r3, #8
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	430a      	orrs	r2, r1
 800449a:	3306      	adds	r3, #6
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	18c3      	adds	r3, r0, r3
 80044a0:	3304      	adds	r3, #4
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b003      	add	sp, #12
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	e000e100 	.word	0xe000e100
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1e5a      	subs	r2, r3, #1
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	045b      	lsls	r3, r3, #17
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d301      	bcc.n	80044cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044c8:	2301      	movs	r3, #1
 80044ca:	e010      	b.n	80044ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <SysTick_Config+0x44>)
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	3a01      	subs	r2, #1
 80044d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044d4:	2301      	movs	r3, #1
 80044d6:	425b      	negs	r3, r3
 80044d8:	2103      	movs	r1, #3
 80044da:	0018      	movs	r0, r3
 80044dc:	f7ff ff7c 	bl	80043d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <SysTick_Config+0x44>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044e6:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <SysTick_Config+0x44>)
 80044e8:	2207      	movs	r2, #7
 80044ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	e000e010 	.word	0xe000e010

080044fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	210f      	movs	r1, #15
 8004508:	187b      	adds	r3, r7, r1
 800450a:	1c02      	adds	r2, r0, #0
 800450c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	187b      	adds	r3, r7, r1
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b25b      	sxtb	r3, r3
 8004516:	0011      	movs	r1, r2
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff ff5d 	bl	80043d8 <__NVIC_SetPriority>
}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	46bd      	mov	sp, r7
 8004522:	b004      	add	sp, #16
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f7ff ffbf 	bl	80044b4 <SysTick_Config>
 8004536:	0003      	movs	r3, r0
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800454e:	e155      	b.n	80047fc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2101      	movs	r1, #1
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4091      	lsls	r1, r2
 800455a:	000a      	movs	r2, r1
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d100      	bne.n	8004568 <HAL_GPIO_Init+0x28>
 8004566:	e146      	b.n	80047f6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2203      	movs	r2, #3
 800456e:	4013      	ands	r3, r2
 8004570:	2b01      	cmp	r3, #1
 8004572:	d005      	beq.n	8004580 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2203      	movs	r2, #3
 800457a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800457c:	2b02      	cmp	r3, #2
 800457e:	d130      	bne.n	80045e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	2203      	movs	r2, #3
 800458c:	409a      	lsls	r2, r3
 800458e:	0013      	movs	r3, r2
 8004590:	43da      	mvns	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	409a      	lsls	r2, r3
 80045a2:	0013      	movs	r3, r2
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b6:	2201      	movs	r2, #1
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	409a      	lsls	r2, r3
 80045bc:	0013      	movs	r3, r2
 80045be:	43da      	mvns	r2, r3
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	2201      	movs	r2, #1
 80045ce:	401a      	ands	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	409a      	lsls	r2, r3
 80045d4:	0013      	movs	r3, r2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2203      	movs	r2, #3
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d017      	beq.n	800461e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2203      	movs	r2, #3
 80045fa:	409a      	lsls	r2, r3
 80045fc:	0013      	movs	r3, r2
 80045fe:	43da      	mvns	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	0013      	movs	r3, r2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2203      	movs	r2, #3
 8004624:	4013      	ands	r3, r2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d123      	bne.n	8004672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	08da      	lsrs	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3208      	adds	r2, #8
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	58d3      	ldr	r3, [r2, r3]
 8004636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2207      	movs	r2, #7
 800463c:	4013      	ands	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	220f      	movs	r2, #15
 8004642:	409a      	lsls	r2, r3
 8004644:	0013      	movs	r3, r2
 8004646:	43da      	mvns	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2107      	movs	r1, #7
 8004656:	400b      	ands	r3, r1
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	409a      	lsls	r2, r3
 800465c:	0013      	movs	r3, r2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	08da      	lsrs	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3208      	adds	r2, #8
 800466c:	0092      	lsls	r2, r2, #2
 800466e:	6939      	ldr	r1, [r7, #16]
 8004670:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2203      	movs	r2, #3
 800467e:	409a      	lsls	r2, r3
 8004680:	0013      	movs	r3, r2
 8004682:	43da      	mvns	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2203      	movs	r2, #3
 8004690:	401a      	ands	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	409a      	lsls	r2, r3
 8004698:	0013      	movs	r3, r2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	23c0      	movs	r3, #192	; 0xc0
 80046ac:	029b      	lsls	r3, r3, #10
 80046ae:	4013      	ands	r3, r2
 80046b0:	d100      	bne.n	80046b4 <HAL_GPIO_Init+0x174>
 80046b2:	e0a0      	b.n	80047f6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b4:	4b57      	ldr	r3, [pc, #348]	; (8004814 <HAL_GPIO_Init+0x2d4>)
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	4b56      	ldr	r3, [pc, #344]	; (8004814 <HAL_GPIO_Init+0x2d4>)
 80046ba:	2101      	movs	r1, #1
 80046bc:	430a      	orrs	r2, r1
 80046be:	619a      	str	r2, [r3, #24]
 80046c0:	4b54      	ldr	r3, [pc, #336]	; (8004814 <HAL_GPIO_Init+0x2d4>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046cc:	4a52      	ldr	r2, [pc, #328]	; (8004818 <HAL_GPIO_Init+0x2d8>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	3302      	adds	r3, #2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	589b      	ldr	r3, [r3, r2]
 80046d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2203      	movs	r2, #3
 80046de:	4013      	ands	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	220f      	movs	r2, #15
 80046e4:	409a      	lsls	r2, r3
 80046e6:	0013      	movs	r3, r2
 80046e8:	43da      	mvns	r2, r3
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	2390      	movs	r3, #144	; 0x90
 80046f4:	05db      	lsls	r3, r3, #23
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d019      	beq.n	800472e <HAL_GPIO_Init+0x1ee>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a47      	ldr	r2, [pc, #284]	; (800481c <HAL_GPIO_Init+0x2dc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_GPIO_Init+0x1ea>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a46      	ldr	r2, [pc, #280]	; (8004820 <HAL_GPIO_Init+0x2e0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00d      	beq.n	8004726 <HAL_GPIO_Init+0x1e6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a45      	ldr	r2, [pc, #276]	; (8004824 <HAL_GPIO_Init+0x2e4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <HAL_GPIO_Init+0x1e2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a44      	ldr	r2, [pc, #272]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_GPIO_Init+0x1de>
 800471a:	2304      	movs	r3, #4
 800471c:	e008      	b.n	8004730 <HAL_GPIO_Init+0x1f0>
 800471e:	2305      	movs	r3, #5
 8004720:	e006      	b.n	8004730 <HAL_GPIO_Init+0x1f0>
 8004722:	2303      	movs	r3, #3
 8004724:	e004      	b.n	8004730 <HAL_GPIO_Init+0x1f0>
 8004726:	2302      	movs	r3, #2
 8004728:	e002      	b.n	8004730 <HAL_GPIO_Init+0x1f0>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_GPIO_Init+0x1f0>
 800472e:	2300      	movs	r3, #0
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	2103      	movs	r1, #3
 8004734:	400a      	ands	r2, r1
 8004736:	0092      	lsls	r2, r2, #2
 8004738:	4093      	lsls	r3, r2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004740:	4935      	ldr	r1, [pc, #212]	; (8004818 <HAL_GPIO_Init+0x2d8>)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	3302      	adds	r3, #2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_GPIO_Init+0x2ec>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	43da      	mvns	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4013      	ands	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	035b      	lsls	r3, r3, #13
 8004766:	4013      	ands	r3, r2
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <HAL_GPIO_Init+0x2ec>)
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_GPIO_Init+0x2ec>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	43da      	mvns	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4013      	ands	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	039b      	lsls	r3, r3, #14
 8004790:	4013      	ands	r3, r2
 8004792:	d003      	beq.n	800479c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800479c:	4b23      	ldr	r3, [pc, #140]	; (800482c <HAL_GPIO_Init+0x2ec>)
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_GPIO_Init+0x2ec>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43da      	mvns	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	029b      	lsls	r3, r3, #10
 80047ba:	4013      	ands	r3, r2
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80047c6:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_GPIO_Init+0x2ec>)
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <HAL_GPIO_Init+0x2ec>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	43da      	mvns	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	025b      	lsls	r3, r3, #9
 80047e4:	4013      	ands	r3, r2
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <HAL_GPIO_Init+0x2ec>)
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	3301      	adds	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	40da      	lsrs	r2, r3
 8004804:	1e13      	subs	r3, r2, #0
 8004806:	d000      	beq.n	800480a <HAL_GPIO_Init+0x2ca>
 8004808:	e6a2      	b.n	8004550 <HAL_GPIO_Init+0x10>
  } 
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b006      	add	sp, #24
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000
 8004818:	40010000 	.word	0x40010000
 800481c:	48000400 	.word	0x48000400
 8004820:	48000800 	.word	0x48000800
 8004824:	48000c00 	.word	0x48000c00
 8004828:	48001000 	.word	0x48001000
 800482c:	40010400 	.word	0x40010400

08004830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f000 fb76 	bl	8004f30 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	4013      	ands	r3, r2
 800484c:	d100      	bne.n	8004850 <HAL_RCC_OscConfig+0x20>
 800484e:	e08e      	b.n	800496e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004850:	4bc5      	ldr	r3, [pc, #788]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	220c      	movs	r2, #12
 8004856:	4013      	ands	r3, r2
 8004858:	2b04      	cmp	r3, #4
 800485a:	d00e      	beq.n	800487a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800485c:	4bc2      	ldr	r3, [pc, #776]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	220c      	movs	r2, #12
 8004862:	4013      	ands	r3, r2
 8004864:	2b08      	cmp	r3, #8
 8004866:	d117      	bne.n	8004898 <HAL_RCC_OscConfig+0x68>
 8004868:	4bbf      	ldr	r3, [pc, #764]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	23c0      	movs	r3, #192	; 0xc0
 800486e:	025b      	lsls	r3, r3, #9
 8004870:	401a      	ands	r2, r3
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	025b      	lsls	r3, r3, #9
 8004876:	429a      	cmp	r2, r3
 8004878:	d10e      	bne.n	8004898 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487a:	4bbb      	ldr	r3, [pc, #748]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	029b      	lsls	r3, r3, #10
 8004882:	4013      	ands	r3, r2
 8004884:	d100      	bne.n	8004888 <HAL_RCC_OscConfig+0x58>
 8004886:	e071      	b.n	800496c <HAL_RCC_OscConfig+0x13c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d000      	beq.n	8004892 <HAL_RCC_OscConfig+0x62>
 8004890:	e06c      	b.n	800496c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f000 fb4c 	bl	8004f30 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_OscConfig+0x80>
 80048a0:	4bb1      	ldr	r3, [pc, #708]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4bb0      	ldr	r3, [pc, #704]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	0249      	lsls	r1, r1, #9
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e02f      	b.n	8004910 <HAL_RCC_OscConfig+0xe0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCC_OscConfig+0xa2>
 80048b8:	4bab      	ldr	r3, [pc, #684]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4baa      	ldr	r3, [pc, #680]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048be:	49ab      	ldr	r1, [pc, #684]	; (8004b6c <HAL_RCC_OscConfig+0x33c>)
 80048c0:	400a      	ands	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	4ba8      	ldr	r3, [pc, #672]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4ba7      	ldr	r3, [pc, #668]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048ca:	49a9      	ldr	r1, [pc, #676]	; (8004b70 <HAL_RCC_OscConfig+0x340>)
 80048cc:	400a      	ands	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e01e      	b.n	8004910 <HAL_RCC_OscConfig+0xe0>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d10e      	bne.n	80048f8 <HAL_RCC_OscConfig+0xc8>
 80048da:	4ba3      	ldr	r3, [pc, #652]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4ba2      	ldr	r3, [pc, #648]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048e0:	2180      	movs	r1, #128	; 0x80
 80048e2:	02c9      	lsls	r1, r1, #11
 80048e4:	430a      	orrs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	4b9f      	ldr	r3, [pc, #636]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b9e      	ldr	r3, [pc, #632]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	0249      	lsls	r1, r1, #9
 80048f2:	430a      	orrs	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0xe0>
 80048f8:	4b9b      	ldr	r3, [pc, #620]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b9a      	ldr	r3, [pc, #616]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048fe:	499b      	ldr	r1, [pc, #620]	; (8004b6c <HAL_RCC_OscConfig+0x33c>)
 8004900:	400a      	ands	r2, r1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	4b98      	ldr	r3, [pc, #608]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b97      	ldr	r3, [pc, #604]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 800490a:	4999      	ldr	r1, [pc, #612]	; (8004b70 <HAL_RCC_OscConfig+0x340>)
 800490c:	400a      	ands	r2, r1
 800490e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d014      	beq.n	8004942 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7ff fd54 	bl	80043c4 <HAL_GetTick>
 800491c:	0003      	movs	r3, r0
 800491e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004922:	f7ff fd4f 	bl	80043c4 <HAL_GetTick>
 8004926:	0002      	movs	r2, r0
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e2fd      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	4013      	ands	r3, r2
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0xf2>
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004942:	f7ff fd3f 	bl	80043c4 <HAL_GetTick>
 8004946:	0003      	movs	r3, r0
 8004948:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7ff fd3a 	bl	80043c4 <HAL_GetTick>
 8004950:	0002      	movs	r2, r0
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e2e8      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	4b82      	ldr	r3, [pc, #520]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	4013      	ands	r3, r2
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x11c>
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2202      	movs	r2, #2
 8004974:	4013      	ands	r3, r2
 8004976:	d100      	bne.n	800497a <HAL_RCC_OscConfig+0x14a>
 8004978:	e06c      	b.n	8004a54 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800497a:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	220c      	movs	r2, #12
 8004980:	4013      	ands	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004984:	4b78      	ldr	r3, [pc, #480]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	220c      	movs	r2, #12
 800498a:	4013      	ands	r3, r2
 800498c:	2b08      	cmp	r3, #8
 800498e:	d11f      	bne.n	80049d0 <HAL_RCC_OscConfig+0x1a0>
 8004990:	4b75      	ldr	r3, [pc, #468]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	23c0      	movs	r3, #192	; 0xc0
 8004996:	025b      	lsls	r3, r3, #9
 8004998:	401a      	ands	r2, r3
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	429a      	cmp	r2, r3
 80049a0:	d116      	bne.n	80049d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	4b71      	ldr	r3, [pc, #452]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2202      	movs	r2, #2
 80049a8:	4013      	ands	r3, r2
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_OscConfig+0x188>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e2bb      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b6b      	ldr	r3, [pc, #428]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	22f8      	movs	r2, #248	; 0xf8
 80049be:	4393      	bics	r3, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00da      	lsls	r2, r3, #3
 80049c8:	4b67      	ldr	r3, [pc, #412]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ce:	e041      	b.n	8004a54 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d024      	beq.n	8004a22 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d8:	4b63      	ldr	r3, [pc, #396]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b62      	ldr	r3, [pc, #392]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80049de:	2101      	movs	r1, #1
 80049e0:	430a      	orrs	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7ff fcee 	bl	80043c4 <HAL_GetTick>
 80049e8:	0003      	movs	r3, r0
 80049ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ee:	f7ff fce9 	bl	80043c4 <HAL_GetTick>
 80049f2:	0002      	movs	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e297      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	4b59      	ldr	r3, [pc, #356]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2202      	movs	r2, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	d0f1      	beq.n	80049ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0a:	4b57      	ldr	r3, [pc, #348]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	22f8      	movs	r2, #248	; 0xf8
 8004a10:	4393      	bics	r3, r2
 8004a12:	0019      	movs	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	00da      	lsls	r2, r3, #3
 8004a1a:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e018      	b.n	8004a54 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	438a      	bics	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2e:	f7ff fcc9 	bl	80043c4 <HAL_GetTick>
 8004a32:	0003      	movs	r3, r0
 8004a34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a38:	f7ff fcc4 	bl	80043c4 <HAL_GetTick>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e272      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d1f1      	bne.n	8004a38 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d036      	beq.n	8004acc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d019      	beq.n	8004a9a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a66:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7ff fca7 	bl	80043c4 <HAL_GetTick>
 8004a76:	0003      	movs	r3, r0
 8004a78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7ff fca2 	bl	80043c4 <HAL_GetTick>
 8004a80:	0002      	movs	r2, r0
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e250      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8e:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2202      	movs	r2, #2
 8004a94:	4013      	ands	r3, r2
 8004a96:	d0f1      	beq.n	8004a7c <HAL_RCC_OscConfig+0x24c>
 8004a98:	e018      	b.n	8004acc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9e:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7ff fc8d 	bl	80043c4 <HAL_GetTick>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7ff fc88 	bl	80043c4 <HAL_GetTick>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e236      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d1f1      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d100      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x2a8>
 8004ad6:	e0b5      	b.n	8004c44 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad8:	201f      	movs	r0, #31
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae0:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	055b      	lsls	r3, r3, #21
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d110      	bne.n	8004b0e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004af2:	2180      	movs	r1, #128	; 0x80
 8004af4:	0549      	lsls	r1, r1, #21
 8004af6:	430a      	orrs	r2, r1
 8004af8:	61da      	str	r2, [r3, #28]
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	055b      	lsls	r3, r3, #21
 8004b02:	4013      	ands	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b08:	183b      	adds	r3, r7, r0
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0e:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <HAL_RCC_OscConfig+0x344>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4013      	ands	r3, r2
 8004b18:	d11a      	bne.n	8004b50 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1a:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <HAL_RCC_OscConfig+0x344>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_RCC_OscConfig+0x344>)
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	0049      	lsls	r1, r1, #1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b28:	f7ff fc4c 	bl	80043c4 <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7ff fc47 	bl	80043c4 <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	; 0x64
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e1f5      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_OscConfig+0x344>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10f      	bne.n	8004b78 <HAL_RCC_OscConfig+0x348>
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004b5a:	6a1a      	ldr	r2, [r3, #32]
 8004b5c:	4b02      	ldr	r3, [pc, #8]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 8004b5e:	2101      	movs	r1, #1
 8004b60:	430a      	orrs	r2, r1
 8004b62:	621a      	str	r2, [r3, #32]
 8004b64:	e036      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3a4>
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	fffeffff 	.word	0xfffeffff
 8004b70:	fffbffff 	.word	0xfffbffff
 8004b74:	40007000 	.word	0x40007000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10c      	bne.n	8004b9a <HAL_RCC_OscConfig+0x36a>
 8004b80:	4bca      	ldr	r3, [pc, #808]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004b82:	6a1a      	ldr	r2, [r3, #32]
 8004b84:	4bc9      	ldr	r3, [pc, #804]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	621a      	str	r2, [r3, #32]
 8004b8c:	4bc7      	ldr	r3, [pc, #796]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	4bc6      	ldr	r3, [pc, #792]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004b92:	2104      	movs	r1, #4
 8004b94:	438a      	bics	r2, r1
 8004b96:	621a      	str	r2, [r3, #32]
 8004b98:	e01c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3a4>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x38c>
 8004ba2:	4bc2      	ldr	r3, [pc, #776]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	4bc1      	ldr	r3, [pc, #772]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004ba8:	2104      	movs	r1, #4
 8004baa:	430a      	orrs	r2, r1
 8004bac:	621a      	str	r2, [r3, #32]
 8004bae:	4bbf      	ldr	r3, [pc, #764]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	4bbe      	ldr	r3, [pc, #760]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	621a      	str	r2, [r3, #32]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3a4>
 8004bbc:	4bbb      	ldr	r3, [pc, #748]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	4bba      	ldr	r3, [pc, #744]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	438a      	bics	r2, r1
 8004bc6:	621a      	str	r2, [r3, #32]
 8004bc8:	4bb8      	ldr	r3, [pc, #736]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	4bb7      	ldr	r3, [pc, #732]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004bce:	2104      	movs	r1, #4
 8004bd0:	438a      	bics	r2, r1
 8004bd2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d014      	beq.n	8004c06 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bdc:	f7ff fbf2 	bl	80043c4 <HAL_GetTick>
 8004be0:	0003      	movs	r3, r0
 8004be2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	e009      	b.n	8004bfa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7ff fbed 	bl	80043c4 <HAL_GetTick>
 8004bea:	0002      	movs	r2, r0
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	4aaf      	ldr	r2, [pc, #700]	; (8004eb0 <HAL_RCC_OscConfig+0x680>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e19a      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	4bac      	ldr	r3, [pc, #688]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	4013      	ands	r3, r2
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x3b6>
 8004c04:	e013      	b.n	8004c2e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c06:	f7ff fbdd 	bl	80043c4 <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0e:	e009      	b.n	8004c24 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7ff fbd8 	bl	80043c4 <HAL_GetTick>
 8004c14:	0002      	movs	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	4aa5      	ldr	r2, [pc, #660]	; (8004eb0 <HAL_RCC_OscConfig+0x680>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e185      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	4ba1      	ldr	r3, [pc, #644]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c2e:	231f      	movs	r3, #31
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d105      	bne.n	8004c44 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c38:	4b9c      	ldr	r3, [pc, #624]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	4b9b      	ldr	r3, [pc, #620]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c3e:	499d      	ldr	r1, [pc, #628]	; (8004eb4 <HAL_RCC_OscConfig+0x684>)
 8004c40:	400a      	ands	r2, r1
 8004c42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2210      	movs	r2, #16
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d063      	beq.n	8004d16 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d12a      	bne.n	8004cac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c56:	4b95      	ldr	r3, [pc, #596]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5a:	4b94      	ldr	r3, [pc, #592]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c5c:	2104      	movs	r1, #4
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c62:	4b92      	ldr	r3, [pc, #584]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c66:	4b91      	ldr	r3, [pc, #580]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c68:	2101      	movs	r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6e:	f7ff fba9 	bl	80043c4 <HAL_GetTick>
 8004c72:	0003      	movs	r3, r0
 8004c74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c78:	f7ff fba4 	bl	80043c4 <HAL_GetTick>
 8004c7c:	0002      	movs	r2, r0
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e152      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c8a:	4b88      	ldr	r3, [pc, #544]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	2202      	movs	r2, #2
 8004c90:	4013      	ands	r3, r2
 8004c92:	d0f1      	beq.n	8004c78 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c94:	4b85      	ldr	r3, [pc, #532]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	22f8      	movs	r2, #248	; 0xf8
 8004c9a:	4393      	bics	r3, r2
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	00da      	lsls	r2, r3, #3
 8004ca4:	4b81      	ldr	r3, [pc, #516]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8004caa:	e034      	b.n	8004d16 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	3305      	adds	r3, #5
 8004cb2:	d111      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004cb4:	4b7d      	ldr	r3, [pc, #500]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	4b7c      	ldr	r3, [pc, #496]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004cba:	2104      	movs	r1, #4
 8004cbc:	438a      	bics	r2, r1
 8004cbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cc0:	4b7a      	ldr	r3, [pc, #488]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	22f8      	movs	r2, #248	; 0xf8
 8004cc6:	4393      	bics	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	00da      	lsls	r2, r3, #3
 8004cd0:	4b76      	ldr	r3, [pc, #472]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8004cd6:	e01e      	b.n	8004d16 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004cd8:	4b74      	ldr	r3, [pc, #464]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cdc:	4b73      	ldr	r3, [pc, #460]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004cde:	2104      	movs	r1, #4
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ce4:	4b71      	ldr	r3, [pc, #452]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce8:	4b70      	ldr	r3, [pc, #448]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004cea:	2101      	movs	r1, #1
 8004cec:	438a      	bics	r2, r1
 8004cee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf0:	f7ff fb68 	bl	80043c4 <HAL_GetTick>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004cfa:	f7ff fb63 	bl	80043c4 <HAL_GetTick>
 8004cfe:	0002      	movs	r2, r0
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e111      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d0c:	4b67      	ldr	r3, [pc, #412]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d10:	2202      	movs	r2, #2
 8004d12:	4013      	ands	r3, r2
 8004d14:	d1f1      	bne.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d05c      	beq.n	8004dda <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004d20:	4b62      	ldr	r3, [pc, #392]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	220c      	movs	r2, #12
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	d00e      	beq.n	8004d4a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004d2c:	4b5f      	ldr	r3, [pc, #380]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	220c      	movs	r2, #12
 8004d32:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d114      	bne.n	8004d62 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004d38:	4b5c      	ldr	r3, [pc, #368]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	23c0      	movs	r3, #192	; 0xc0
 8004d3e:	025b      	lsls	r3, r3, #9
 8004d40:	401a      	ands	r2, r3
 8004d42:	23c0      	movs	r3, #192	; 0xc0
 8004d44:	025b      	lsls	r3, r3, #9
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d10b      	bne.n	8004d62 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d4a:	4b58      	ldr	r3, [pc, #352]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	029b      	lsls	r3, r3, #10
 8004d52:	4013      	ands	r3, r2
 8004d54:	d040      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x5a8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d03c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0e6      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01b      	beq.n	8004da2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004d6a:	4b50      	ldr	r3, [pc, #320]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d6e:	4b4f      	ldr	r3, [pc, #316]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d70:	2180      	movs	r1, #128	; 0x80
 8004d72:	0249      	lsls	r1, r1, #9
 8004d74:	430a      	orrs	r2, r1
 8004d76:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7ff fb24 	bl	80043c4 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7ff fb1f 	bl	80043c4 <HAL_GetTick>
 8004d86:	0002      	movs	r2, r0
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0cd      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d94:	4b45      	ldr	r3, [pc, #276]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	029b      	lsls	r3, r3, #10
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x552>
 8004da0:	e01b      	b.n	8004dda <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004da2:	4b42      	ldr	r3, [pc, #264]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da6:	4b41      	ldr	r3, [pc, #260]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004da8:	4943      	ldr	r1, [pc, #268]	; (8004eb8 <HAL_RCC_OscConfig+0x688>)
 8004daa:	400a      	ands	r2, r1
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dae:	f7ff fb09 	bl	80043c4 <HAL_GetTick>
 8004db2:	0003      	movs	r3, r0
 8004db4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db8:	f7ff fb04 	bl	80043c4 <HAL_GetTick>
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e0b2      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x588>
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004dd8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d100      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5b4>
 8004de2:	e0a4      	b.n	8004f2e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de4:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	220c      	movs	r2, #12
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d100      	bne.n	8004df2 <HAL_RCC_OscConfig+0x5c2>
 8004df0:	e078      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d14c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e00:	492e      	ldr	r1, [pc, #184]	; (8004ebc <HAL_RCC_OscConfig+0x68c>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7ff fadd 	bl	80043c4 <HAL_GetTick>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e10:	f7ff fad8 	bl	80043c4 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e086      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	049b      	lsls	r3, r3, #18
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e2e:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	220f      	movs	r2, #15
 8004e34:	4393      	bics	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e42:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_RCC_OscConfig+0x690>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	431a      	orrs	r2, r3
 8004e56:	4b15      	ldr	r3, [pc, #84]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	4b13      	ldr	r3, [pc, #76]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e62:	2180      	movs	r1, #128	; 0x80
 8004e64:	0449      	lsls	r1, r1, #17
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7ff faab 	bl	80043c4 <HAL_GetTick>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7ff faa6 	bl	80043c4 <HAL_GetTick>
 8004e78:	0002      	movs	r2, r0
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e054      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	049b      	lsls	r3, r3, #18
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x644>
 8004e92:	e04c      	b.n	8004f2e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <HAL_RCC_OscConfig+0x67c>)
 8004e9a:	4908      	ldr	r1, [pc, #32]	; (8004ebc <HAL_RCC_OscConfig+0x68c>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7ff fa90 	bl	80043c4 <HAL_GetTick>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea8:	e015      	b.n	8004ed6 <HAL_RCC_OscConfig+0x6a6>
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	00001388 	.word	0x00001388
 8004eb4:	efffffff 	.word	0xefffffff
 8004eb8:	fffeffff 	.word	0xfffeffff
 8004ebc:	feffffff 	.word	0xfeffffff
 8004ec0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7ff fa7e 	bl	80043c4 <HAL_GetTick>
 8004ec8:	0002      	movs	r2, r0
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e02c      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <HAL_RCC_OscConfig+0x708>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	049b      	lsls	r3, r3, #18
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x694>
 8004ee2:	e024      	b.n	8004f2e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e01f      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <HAL_RCC_OscConfig+0x708>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <HAL_RCC_OscConfig+0x708>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	23c0      	movs	r3, #192	; 0xc0
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	401a      	ands	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d10e      	bne.n	8004f2a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	220f      	movs	r2, #15
 8004f10:	401a      	ands	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d107      	bne.n	8004f2a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	23f0      	movs	r3, #240	; 0xf0
 8004f1e:	039b      	lsls	r3, r3, #14
 8004f20:	401a      	ands	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b008      	add	sp, #32
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000

08004f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0bf      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f50:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2201      	movs	r2, #1
 8004f56:	4013      	ands	r3, r2
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d911      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b5e      	ldr	r3, [pc, #376]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2201      	movs	r2, #1
 8004f64:	4393      	bics	r3, r2
 8004f66:	0019      	movs	r1, r3
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f70:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	4013      	ands	r3, r2
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0a6      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2202      	movs	r2, #2
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2204      	movs	r2, #4
 8004f92:	4013      	ands	r3, r2
 8004f94:	d006      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f96:	4b51      	ldr	r3, [pc, #324]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	4b50      	ldr	r3, [pc, #320]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8004f9c:	21e0      	movs	r1, #224	; 0xe0
 8004f9e:	00c9      	lsls	r1, r1, #3
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa4:	4b4d      	ldr	r3, [pc, #308]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	22f0      	movs	r2, #240	; 0xf0
 8004faa:	4393      	bics	r3, r2
 8004fac:	0019      	movs	r1, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	4b4a      	ldr	r3, [pc, #296]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d04c      	beq.n	800505c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d107      	bne.n	8004fda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fca:	4b44      	ldr	r3, [pc, #272]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	029b      	lsls	r3, r3, #10
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d120      	bne.n	8005018 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e07a      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d107      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	049b      	lsls	r3, r3, #18
 8004fea:	4013      	ands	r3, r2
 8004fec:	d114      	bne.n	8005018 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06e      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ffa:	4b38      	ldr	r3, [pc, #224]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8004ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	4013      	ands	r3, r2
 8005004:	d108      	bne.n	8005018 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e062      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500a:	4b34      	ldr	r3, [pc, #208]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2202      	movs	r2, #2
 8005010:	4013      	ands	r3, r2
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e05b      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005018:	4b30      	ldr	r3, [pc, #192]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2203      	movs	r2, #3
 800501e:	4393      	bics	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800502c:	f7ff f9ca 	bl	80043c4 <HAL_GetTick>
 8005030:	0003      	movs	r3, r0
 8005032:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005034:	e009      	b.n	800504a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005036:	f7ff f9c5 	bl	80043c4 <HAL_GetTick>
 800503a:	0002      	movs	r2, r0
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <HAL_RCC_ClockConfig+0x1a4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e042      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	220c      	movs	r2, #12
 8005050:	401a      	ands	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	429a      	cmp	r2, r3
 800505a:	d1ec      	bne.n	8005036 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	4013      	ands	r3, r2
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d211      	bcs.n	800508e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2201      	movs	r2, #1
 8005070:	4393      	bics	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507c:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <HAL_RCC_ClockConfig+0x19c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2201      	movs	r2, #1
 8005082:	4013      	ands	r3, r2
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d001      	beq.n	800508e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e020      	b.n	80050d0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2204      	movs	r2, #4
 8005094:	4013      	ands	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005098:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <HAL_RCC_ClockConfig+0x1a8>)
 800509e:	4013      	ands	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050ac:	f000 f820 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 80050b0:	0001      	movs	r1, r0
 80050b2:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <HAL_RCC_ClockConfig+0x1a0>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	220f      	movs	r2, #15
 80050ba:	4013      	ands	r3, r2
 80050bc:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <HAL_RCC_ClockConfig+0x1ac>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	000a      	movs	r2, r1
 80050c2:	40da      	lsrs	r2, r3
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 80050c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80050c8:	2003      	movs	r0, #3
 80050ca:	f7ff f947 	bl	800435c <HAL_InitTick>
  
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	0018      	movs	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b004      	add	sp, #16
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40022000 	.word	0x40022000
 80050dc:	40021000 	.word	0x40021000
 80050e0:	00001388 	.word	0x00001388
 80050e4:	fffff8ff 	.word	0xfffff8ff
 80050e8:	08008cd0 	.word	0x08008cd0
 80050ec:	20000158 	.word	0x20000158

080050f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	2300      	movs	r3, #0
 8005104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800510a:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	220c      	movs	r2, #12
 8005114:	4013      	ands	r3, r2
 8005116:	2b0c      	cmp	r3, #12
 8005118:	d046      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0xb8>
 800511a:	d848      	bhi.n	80051ae <HAL_RCC_GetSysClockFreq+0xbe>
 800511c:	2b04      	cmp	r3, #4
 800511e:	d002      	beq.n	8005126 <HAL_RCC_GetSysClockFreq+0x36>
 8005120:	2b08      	cmp	r3, #8
 8005122:	d003      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x3c>
 8005124:	e043      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005126:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005128:	613b      	str	r3, [r7, #16]
      break;
 800512a:	e043      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	0c9b      	lsrs	r3, r3, #18
 8005130:	220f      	movs	r2, #15
 8005132:	4013      	ands	r3, r2
 8005134:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005136:	5cd3      	ldrb	r3, [r2, r3]
 8005138:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800513a:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	220f      	movs	r2, #15
 8005140:	4013      	ands	r3, r2
 8005142:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_RCC_GetSysClockFreq+0xdc>)
 8005144:	5cd3      	ldrb	r3, [r2, r3]
 8005146:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	23c0      	movs	r3, #192	; 0xc0
 800514c:	025b      	lsls	r3, r3, #9
 800514e:	401a      	ands	r2, r3
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	025b      	lsls	r3, r3, #9
 8005154:	429a      	cmp	r2, r3
 8005156:	d109      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	481a      	ldr	r0, [pc, #104]	; (80051c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800515c:	f7fa fff0 	bl	8000140 <__udivsi3>
 8005160:	0003      	movs	r3, r0
 8005162:	001a      	movs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4353      	muls	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e01a      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	23c0      	movs	r3, #192	; 0xc0
 8005170:	025b      	lsls	r3, r3, #9
 8005172:	401a      	ands	r2, r3
 8005174:	23c0      	movs	r3, #192	; 0xc0
 8005176:	025b      	lsls	r3, r3, #9
 8005178:	429a      	cmp	r2, r3
 800517a:	d109      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	4814      	ldr	r0, [pc, #80]	; (80051d0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005180:	f7fa ffde 	bl	8000140 <__udivsi3>
 8005184:	0003      	movs	r3, r0
 8005186:	001a      	movs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4353      	muls	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e008      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	480c      	ldr	r0, [pc, #48]	; (80051c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005194:	f7fa ffd4 	bl	8000140 <__udivsi3>
 8005198:	0003      	movs	r3, r0
 800519a:	001a      	movs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4353      	muls	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	613b      	str	r3, [r7, #16]
      break;
 80051a6:	e005      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80051aa:	613b      	str	r3, [r7, #16]
      break;
 80051ac:	e002      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80051b0:	613b      	str	r3, [r7, #16]
      break;
 80051b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80051b4:	693b      	ldr	r3, [r7, #16]
}
 80051b6:	0018      	movs	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b006      	add	sp, #24
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	40021000 	.word	0x40021000
 80051c4:	007a1200 	.word	0x007a1200
 80051c8:	08008ce8 	.word	0x08008ce8
 80051cc:	08008cf8 	.word	0x08008cf8
 80051d0:	02dc6c00 	.word	0x02dc6c00

080051d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	20000158 	.word	0x20000158

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80051ec:	f7ff fff2 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 80051f0:	0001      	movs	r1, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	2207      	movs	r2, #7
 80051fa:	4013      	ands	r3, r2
 80051fc:	4a04      	ldr	r2, [pc, #16]	; (8005210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	40d9      	lsrs	r1, r3
 8005202:	000b      	movs	r3, r1
}    
 8005204:	0018      	movs	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	40021000 	.word	0x40021000
 8005210:	08008ce0 	.word	0x08008ce0

08005214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	025b      	lsls	r3, r3, #9
 800522c:	4013      	ands	r3, r2
 800522e:	d100      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005230:	e08e      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005232:	2017      	movs	r0, #23
 8005234:	183b      	adds	r3, r7, r0
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4b6e      	ldr	r3, [pc, #440]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	055b      	lsls	r3, r3, #21
 8005242:	4013      	ands	r3, r2
 8005244:	d110      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	4b6b      	ldr	r3, [pc, #428]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	4b6a      	ldr	r3, [pc, #424]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	0549      	lsls	r1, r1, #21
 8005250:	430a      	orrs	r2, r1
 8005252:	61da      	str	r2, [r3, #28]
 8005254:	4b67      	ldr	r3, [pc, #412]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	055b      	lsls	r3, r3, #21
 800525c:	4013      	ands	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005262:	183b      	adds	r3, r7, r0
 8005264:	2201      	movs	r2, #1
 8005266:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005268:	4b63      	ldr	r3, [pc, #396]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	4013      	ands	r3, r2
 8005272:	d11a      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005274:	4b60      	ldr	r3, [pc, #384]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b5f      	ldr	r3, [pc, #380]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	0049      	lsls	r1, r1, #1
 800527e:	430a      	orrs	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005282:	f7ff f89f 	bl	80043c4 <HAL_GetTick>
 8005286:	0003      	movs	r3, r0
 8005288:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	e008      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528c:	f7ff f89a 	bl	80043c4 <HAL_GetTick>
 8005290:	0002      	movs	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	; 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0a6      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529e:	4b56      	ldr	r3, [pc, #344]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4013      	ands	r3, r2
 80052a8:	d0f0      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052aa:	4b52      	ldr	r3, [pc, #328]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	23c0      	movs	r3, #192	; 0xc0
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4013      	ands	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d034      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	23c0      	movs	r3, #192	; 0xc0
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4013      	ands	r3, r2
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d02c      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052cc:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052d6:	4b47      	ldr	r3, [pc, #284]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	4b46      	ldr	r3, [pc, #280]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	0249      	lsls	r1, r1, #9
 80052e0:	430a      	orrs	r2, r1
 80052e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052e4:	4b43      	ldr	r3, [pc, #268]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ea:	4945      	ldr	r1, [pc, #276]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80052ec:	400a      	ands	r2, r1
 80052ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052f0:	4b40      	ldr	r3, [pc, #256]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fe:	f7ff f861 	bl	80043c4 <HAL_GetTick>
 8005302:	0003      	movs	r3, r0
 8005304:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005306:	e009      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005308:	f7ff f85c 	bl	80043c4 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	4a3c      	ldr	r2, [pc, #240]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e067      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531c:	4b35      	ldr	r3, [pc, #212]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	2202      	movs	r2, #2
 8005322:	4013      	ands	r3, r2
 8005324:	d0f0      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005326:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	4a34      	ldr	r2, [pc, #208]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800532c:	4013      	ands	r3, r2
 800532e:	0019      	movs	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005336:	430a      	orrs	r2, r1
 8005338:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800533a:	2317      	movs	r3, #23
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005344:	4b2b      	ldr	r3, [pc, #172]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800534a:	492f      	ldr	r1, [pc, #188]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800534c:	400a      	ands	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2201      	movs	r2, #1
 8005356:	4013      	ands	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800535a:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	2203      	movs	r2, #3
 8005360:	4393      	bics	r3, r2
 8005362:	0019      	movs	r1, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800536a:	430a      	orrs	r2, r1
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005378:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a23      	ldr	r2, [pc, #140]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800537e:	4013      	ands	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005388:	430a      	orrs	r2, r1
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2220      	movs	r2, #32
 8005392:	4013      	ands	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005396:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	2210      	movs	r2, #16
 800539c:	4393      	bics	r3, r2
 800539e:	0019      	movs	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053a6:	430a      	orrs	r2, r1
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	029b      	lsls	r3, r3, #10
 80053b2:	4013      	ands	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053b6:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	4393      	bics	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053c6:	430a      	orrs	r2, r1
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4013      	ands	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	2240      	movs	r2, #64	; 0x40
 80053dc:	4393      	bics	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053e6:	430a      	orrs	r2, r1
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b006      	add	sp, #24
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40007000 	.word	0x40007000
 80053fc:	fffffcff 	.word	0xfffffcff
 8005400:	fffeffff 	.word	0xfffeffff
 8005404:	00001388 	.word	0x00001388
 8005408:	efffffff 	.word	0xefffffff
 800540c:	fffcffff 	.word	0xfffcffff

08005410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e044      	b.n	80054ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2278      	movs	r2, #120	; 0x78
 800542e:	2100      	movs	r1, #0
 8005430:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	0018      	movs	r0, r3
 8005436:	f7fe fe33 	bl	80040a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2224      	movs	r2, #36	; 0x24
 800543e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2101      	movs	r1, #1
 800544c:	438a      	bics	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	0018      	movs	r0, r3
 8005454:	f000 f8d0 	bl	80055f8 <UART_SetConfig>
 8005458:	0003      	movs	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e024      	b.n	80054ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f000 fa4b 	bl	8005908 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	490d      	ldr	r1, [pc, #52]	; (80054b4 <HAL_UART_Init+0xa4>)
 800547e:	400a      	ands	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	212a      	movs	r1, #42	; 0x2a
 800548e:	438a      	bics	r2, r1
 8005490:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2101      	movs	r1, #1
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 fae3 	bl	8005a70 <UART_CheckIdleState>
 80054aa:	0003      	movs	r3, r0
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	ffffb7ff 	.word	0xffffb7ff

080054b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	1dbb      	adds	r3, r7, #6
 80054c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d000      	beq.n	80054d2 <HAL_UART_Transmit+0x1a>
 80054d0:	e08d      	b.n	80055ee <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_UART_Transmit+0x28>
 80054d8:	1dbb      	adds	r3, r7, #6
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e085      	b.n	80055f0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	015b      	lsls	r3, r3, #5
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d109      	bne.n	8005504 <HAL_UART_Transmit+0x4c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2201      	movs	r2, #1
 80054fc:	4013      	ands	r3, r2
 80054fe:	d001      	beq.n	8005504 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e075      	b.n	80055f0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2284      	movs	r2, #132	; 0x84
 8005508:	2100      	movs	r1, #0
 800550a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2221      	movs	r2, #33	; 0x21
 8005510:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005512:	f7fe ff57 	bl	80043c4 <HAL_GetTick>
 8005516:	0003      	movs	r3, r0
 8005518:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1dba      	adds	r2, r7, #6
 800551e:	2150      	movs	r1, #80	; 0x50
 8005520:	8812      	ldrh	r2, [r2, #0]
 8005522:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1dba      	adds	r2, r7, #6
 8005528:	2152      	movs	r1, #82	; 0x52
 800552a:	8812      	ldrh	r2, [r2, #0]
 800552c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	015b      	lsls	r3, r3, #5
 8005536:	429a      	cmp	r2, r3
 8005538:	d108      	bne.n	800554c <HAL_UART_Transmit+0x94>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e003      	b.n	8005554 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005554:	e030      	b.n	80055b8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	0013      	movs	r3, r2
 8005560:	2200      	movs	r2, #0
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	f000 fb2c 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d004      	beq.n	8005576 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e03c      	b.n	80055f0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	881a      	ldrh	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	05d2      	lsls	r2, r2, #23
 8005586:	0dd2      	lsrs	r2, r2, #23
 8005588:	b292      	uxth	r2, r2
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	3302      	adds	r3, #2
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e008      	b.n	80055a6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	b292      	uxth	r2, r2
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2252      	movs	r2, #82	; 0x52
 80055aa:	5a9b      	ldrh	r3, [r3, r2]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b299      	uxth	r1, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2252      	movs	r2, #82	; 0x52
 80055b6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2252      	movs	r2, #82	; 0x52
 80055bc:	5a9b      	ldrh	r3, [r3, r2]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1c8      	bne.n	8005556 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	0013      	movs	r3, r2
 80055ce:	2200      	movs	r2, #0
 80055d0:	2140      	movs	r1, #64	; 0x40
 80055d2:	f000 faf5 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 80055d6:	1e03      	subs	r3, r0, #0
 80055d8:	d004      	beq.n	80055e4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e005      	b.n	80055f0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b008      	add	sp, #32
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005600:	231e      	movs	r3, #30
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4aaf      	ldr	r2, [pc, #700]	; (80058e4 <UART_SetConfig+0x2ec>)
 8005628:	4013      	ands	r3, r2
 800562a:	0019      	movs	r1, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4aaa      	ldr	r2, [pc, #680]	; (80058e8 <UART_SetConfig+0x2f0>)
 800563e:	4013      	ands	r3, r2
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4aa1      	ldr	r2, [pc, #644]	; (80058ec <UART_SetConfig+0x2f4>)
 8005666:	4013      	ands	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	430a      	orrs	r2, r1
 8005672:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a9d      	ldr	r2, [pc, #628]	; (80058f0 <UART_SetConfig+0x2f8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d127      	bne.n	80056ce <UART_SetConfig+0xd6>
 800567e:	4b9d      	ldr	r3, [pc, #628]	; (80058f4 <UART_SetConfig+0x2fc>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	2203      	movs	r2, #3
 8005684:	4013      	ands	r3, r2
 8005686:	2b03      	cmp	r3, #3
 8005688:	d00d      	beq.n	80056a6 <UART_SetConfig+0xae>
 800568a:	d81b      	bhi.n	80056c4 <UART_SetConfig+0xcc>
 800568c:	2b02      	cmp	r3, #2
 800568e:	d014      	beq.n	80056ba <UART_SetConfig+0xc2>
 8005690:	d818      	bhi.n	80056c4 <UART_SetConfig+0xcc>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <UART_SetConfig+0xa4>
 8005696:	2b01      	cmp	r3, #1
 8005698:	d00a      	beq.n	80056b0 <UART_SetConfig+0xb8>
 800569a:	e013      	b.n	80056c4 <UART_SetConfig+0xcc>
 800569c:	231f      	movs	r3, #31
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e065      	b.n	8005772 <UART_SetConfig+0x17a>
 80056a6:	231f      	movs	r3, #31
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e060      	b.n	8005772 <UART_SetConfig+0x17a>
 80056b0:	231f      	movs	r3, #31
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	2204      	movs	r2, #4
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e05b      	b.n	8005772 <UART_SetConfig+0x17a>
 80056ba:	231f      	movs	r3, #31
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	2208      	movs	r2, #8
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e056      	b.n	8005772 <UART_SetConfig+0x17a>
 80056c4:	231f      	movs	r3, #31
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2210      	movs	r2, #16
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e051      	b.n	8005772 <UART_SetConfig+0x17a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a89      	ldr	r2, [pc, #548]	; (80058f8 <UART_SetConfig+0x300>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d134      	bne.n	8005742 <UART_SetConfig+0x14a>
 80056d8:	4b86      	ldr	r3, [pc, #536]	; (80058f4 <UART_SetConfig+0x2fc>)
 80056da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056dc:	23c0      	movs	r3, #192	; 0xc0
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	4013      	ands	r3, r2
 80056e2:	22c0      	movs	r2, #192	; 0xc0
 80056e4:	0292      	lsls	r2, r2, #10
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d017      	beq.n	800571a <UART_SetConfig+0x122>
 80056ea:	22c0      	movs	r2, #192	; 0xc0
 80056ec:	0292      	lsls	r2, r2, #10
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d822      	bhi.n	8005738 <UART_SetConfig+0x140>
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	0292      	lsls	r2, r2, #10
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d019      	beq.n	800572e <UART_SetConfig+0x136>
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	0292      	lsls	r2, r2, #10
 80056fe:	4293      	cmp	r3, r2
 8005700:	d81a      	bhi.n	8005738 <UART_SetConfig+0x140>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <UART_SetConfig+0x118>
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	0252      	lsls	r2, r2, #9
 800570a:	4293      	cmp	r3, r2
 800570c:	d00a      	beq.n	8005724 <UART_SetConfig+0x12c>
 800570e:	e013      	b.n	8005738 <UART_SetConfig+0x140>
 8005710:	231f      	movs	r3, #31
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e02b      	b.n	8005772 <UART_SetConfig+0x17a>
 800571a:	231f      	movs	r3, #31
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	2202      	movs	r2, #2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e026      	b.n	8005772 <UART_SetConfig+0x17a>
 8005724:	231f      	movs	r3, #31
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	2204      	movs	r2, #4
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e021      	b.n	8005772 <UART_SetConfig+0x17a>
 800572e:	231f      	movs	r3, #31
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2208      	movs	r2, #8
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e01c      	b.n	8005772 <UART_SetConfig+0x17a>
 8005738:	231f      	movs	r3, #31
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	2210      	movs	r2, #16
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e017      	b.n	8005772 <UART_SetConfig+0x17a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6d      	ldr	r2, [pc, #436]	; (80058fc <UART_SetConfig+0x304>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d104      	bne.n	8005756 <UART_SetConfig+0x15e>
 800574c:	231f      	movs	r3, #31
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	e00d      	b.n	8005772 <UART_SetConfig+0x17a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a69      	ldr	r2, [pc, #420]	; (8005900 <UART_SetConfig+0x308>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d104      	bne.n	800576a <UART_SetConfig+0x172>
 8005760:	231f      	movs	r3, #31
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e003      	b.n	8005772 <UART_SetConfig+0x17a>
 800576a:	231f      	movs	r3, #31
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	2210      	movs	r2, #16
 8005770:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	429a      	cmp	r2, r3
 800577c:	d15c      	bne.n	8005838 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800577e:	231f      	movs	r3, #31
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d015      	beq.n	80057b4 <UART_SetConfig+0x1bc>
 8005788:	dc18      	bgt.n	80057bc <UART_SetConfig+0x1c4>
 800578a:	2b04      	cmp	r3, #4
 800578c:	d00d      	beq.n	80057aa <UART_SetConfig+0x1b2>
 800578e:	dc15      	bgt.n	80057bc <UART_SetConfig+0x1c4>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <UART_SetConfig+0x1a2>
 8005794:	2b02      	cmp	r3, #2
 8005796:	d005      	beq.n	80057a4 <UART_SetConfig+0x1ac>
 8005798:	e010      	b.n	80057bc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800579a:	f7ff fd25 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 800579e:	0003      	movs	r3, r0
 80057a0:	61bb      	str	r3, [r7, #24]
        break;
 80057a2:	e012      	b.n	80057ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a4:	4b57      	ldr	r3, [pc, #348]	; (8005904 <UART_SetConfig+0x30c>)
 80057a6:	61bb      	str	r3, [r7, #24]
        break;
 80057a8:	e00f      	b.n	80057ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057aa:	f7ff fca1 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 80057ae:	0003      	movs	r3, r0
 80057b0:	61bb      	str	r3, [r7, #24]
        break;
 80057b2:	e00a      	b.n	80057ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	61bb      	str	r3, [r7, #24]
        break;
 80057ba:	e006      	b.n	80057ca <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057c0:	231e      	movs	r3, #30
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
        break;
 80057c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d100      	bne.n	80057d2 <UART_SetConfig+0x1da>
 80057d0:	e07a      	b.n	80058c8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	005a      	lsls	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	18d2      	adds	r2, r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	0019      	movs	r1, r3
 80057e4:	0010      	movs	r0, r2
 80057e6:	f7fa fcab 	bl	8000140 <__udivsi3>
 80057ea:	0003      	movs	r3, r0
 80057ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b0f      	cmp	r3, #15
 80057f2:	d91c      	bls.n	800582e <UART_SetConfig+0x236>
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	025b      	lsls	r3, r3, #9
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d217      	bcs.n	800582e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	b29a      	uxth	r2, r3
 8005802:	200e      	movs	r0, #14
 8005804:	183b      	adds	r3, r7, r0
 8005806:	210f      	movs	r1, #15
 8005808:	438a      	bics	r2, r1
 800580a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	2207      	movs	r2, #7
 8005814:	4013      	ands	r3, r2
 8005816:	b299      	uxth	r1, r3
 8005818:	183b      	adds	r3, r7, r0
 800581a:	183a      	adds	r2, r7, r0
 800581c:	8812      	ldrh	r2, [r2, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	183a      	adds	r2, r7, r0
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	60da      	str	r2, [r3, #12]
 800582c:	e04c      	b.n	80058c8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800582e:	231e      	movs	r3, #30
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e047      	b.n	80058c8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005838:	231f      	movs	r3, #31
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b08      	cmp	r3, #8
 8005840:	d015      	beq.n	800586e <UART_SetConfig+0x276>
 8005842:	dc18      	bgt.n	8005876 <UART_SetConfig+0x27e>
 8005844:	2b04      	cmp	r3, #4
 8005846:	d00d      	beq.n	8005864 <UART_SetConfig+0x26c>
 8005848:	dc15      	bgt.n	8005876 <UART_SetConfig+0x27e>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <UART_SetConfig+0x25c>
 800584e:	2b02      	cmp	r3, #2
 8005850:	d005      	beq.n	800585e <UART_SetConfig+0x266>
 8005852:	e010      	b.n	8005876 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7ff fcc8 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8005858:	0003      	movs	r3, r0
 800585a:	61bb      	str	r3, [r7, #24]
        break;
 800585c:	e012      	b.n	8005884 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800585e:	4b29      	ldr	r3, [pc, #164]	; (8005904 <UART_SetConfig+0x30c>)
 8005860:	61bb      	str	r3, [r7, #24]
        break;
 8005862:	e00f      	b.n	8005884 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005864:	f7ff fc44 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 8005868:	0003      	movs	r3, r0
 800586a:	61bb      	str	r3, [r7, #24]
        break;
 800586c:	e00a      	b.n	8005884 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	61bb      	str	r3, [r7, #24]
        break;
 8005874:	e006      	b.n	8005884 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800587a:	231e      	movs	r3, #30
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
        break;
 8005882:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01e      	beq.n	80058c8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085a      	lsrs	r2, r3, #1
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	18d2      	adds	r2, r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	0019      	movs	r1, r3
 800589a:	0010      	movs	r0, r2
 800589c:	f7fa fc50 	bl	8000140 <__udivsi3>
 80058a0:	0003      	movs	r3, r0
 80058a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d90a      	bls.n	80058c0 <UART_SetConfig+0x2c8>
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	025b      	lsls	r3, r3, #9
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d205      	bcs.n	80058c0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	e003      	b.n	80058c8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80058c0:	231e      	movs	r3, #30
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058d4:	231e      	movs	r3, #30
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	781b      	ldrb	r3, [r3, #0]
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b008      	add	sp, #32
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	efff69f3 	.word	0xefff69f3
 80058e8:	ffffcfff 	.word	0xffffcfff
 80058ec:	fffff4ff 	.word	0xfffff4ff
 80058f0:	40013800 	.word	0x40013800
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40004800 	.word	0x40004800
 8005900:	40004c00 	.word	0x40004c00
 8005904:	007a1200 	.word	0x007a1200

08005908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2201      	movs	r2, #1
 8005916:	4013      	ands	r3, r2
 8005918:	d00b      	beq.n	8005932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a4a      	ldr	r2, [pc, #296]	; (8005a4c <UART_AdvFeatureConfig+0x144>)
 8005922:	4013      	ands	r3, r2
 8005924:	0019      	movs	r1, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2202      	movs	r2, #2
 8005938:	4013      	ands	r3, r2
 800593a:	d00b      	beq.n	8005954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4a43      	ldr	r2, [pc, #268]	; (8005a50 <UART_AdvFeatureConfig+0x148>)
 8005944:	4013      	ands	r3, r2
 8005946:	0019      	movs	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2204      	movs	r2, #4
 800595a:	4013      	ands	r3, r2
 800595c:	d00b      	beq.n	8005976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4a3b      	ldr	r2, [pc, #236]	; (8005a54 <UART_AdvFeatureConfig+0x14c>)
 8005966:	4013      	ands	r3, r2
 8005968:	0019      	movs	r1, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2208      	movs	r2, #8
 800597c:	4013      	ands	r3, r2
 800597e:	d00b      	beq.n	8005998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4a34      	ldr	r2, [pc, #208]	; (8005a58 <UART_AdvFeatureConfig+0x150>)
 8005988:	4013      	ands	r3, r2
 800598a:	0019      	movs	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2210      	movs	r2, #16
 800599e:	4013      	ands	r3, r2
 80059a0:	d00b      	beq.n	80059ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	4a2c      	ldr	r2, [pc, #176]	; (8005a5c <UART_AdvFeatureConfig+0x154>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	0019      	movs	r1, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2220      	movs	r2, #32
 80059c0:	4013      	ands	r3, r2
 80059c2:	d00b      	beq.n	80059dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4a25      	ldr	r2, [pc, #148]	; (8005a60 <UART_AdvFeatureConfig+0x158>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	0019      	movs	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	2240      	movs	r2, #64	; 0x40
 80059e2:	4013      	ands	r3, r2
 80059e4:	d01d      	beq.n	8005a22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <UART_AdvFeatureConfig+0x15c>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	0019      	movs	r1, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	035b      	lsls	r3, r3, #13
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d10b      	bne.n	8005a22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <UART_AdvFeatureConfig+0x160>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4a0e      	ldr	r2, [pc, #56]	; (8005a6c <UART_AdvFeatureConfig+0x164>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	0019      	movs	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	fffdffff 	.word	0xfffdffff
 8005a50:	fffeffff 	.word	0xfffeffff
 8005a54:	fffbffff 	.word	0xfffbffff
 8005a58:	ffff7fff 	.word	0xffff7fff
 8005a5c:	ffffefff 	.word	0xffffefff
 8005a60:	ffffdfff 	.word	0xffffdfff
 8005a64:	ffefffff 	.word	0xffefffff
 8005a68:	ff9fffff 	.word	0xff9fffff
 8005a6c:	fff7ffff 	.word	0xfff7ffff

08005a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b092      	sub	sp, #72	; 0x48
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2284      	movs	r2, #132	; 0x84
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a80:	f7fe fca0 	bl	80043c4 <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2208      	movs	r2, #8
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d12c      	bne.n	8005af0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	0391      	lsls	r1, r2, #14
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4a46      	ldr	r2, [pc, #280]	; (8005bb8 <UART_CheckIdleState+0x148>)
 8005aa0:	9200      	str	r2, [sp, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f000 f88c 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 8005aa8:	1e03      	subs	r3, r0, #0
 8005aaa:	d021      	beq.n	8005af0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aac:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	f383 8810 	msr	PRIMASK, r3
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2180      	movs	r1, #128	; 0x80
 8005ace:	438a      	bics	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2278      	movs	r2, #120	; 0x78
 8005ae8:	2100      	movs	r1, #0
 8005aea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e05f      	b.n	8005bb0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2204      	movs	r2, #4
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d146      	bne.n	8005b8c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	03d1      	lsls	r1, r2, #15
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <UART_CheckIdleState+0x148>)
 8005b08:	9200      	str	r2, [sp, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f000 f858 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 8005b10:	1e03      	subs	r3, r0, #0
 8005b12:	d03b      	beq.n	8005b8c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b14:	f3ef 8310 	mrs	r3, PRIMASK
 8005b18:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1e:	2301      	movs	r3, #1
 8005b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f383 8810 	msr	PRIMASK, r3
}
 8005b28:	46c0      	nop			; (mov r8, r8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4921      	ldr	r1, [pc, #132]	; (8005bbc <UART_CheckIdleState+0x14c>)
 8005b36:	400a      	ands	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f383 8810 	msr	PRIMASK, r3
}
 8005b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b46:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b50:	2301      	movs	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f383 8810 	msr	PRIMASK, r3
}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2101      	movs	r1, #1
 8005b68:	438a      	bics	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	f383 8810 	msr	PRIMASK, r3
}
 8005b76:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2278      	movs	r2, #120	; 0x78
 8005b84:	2100      	movs	r1, #0
 8005b86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e011      	b.n	8005bb0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2280      	movs	r2, #128	; 0x80
 8005b96:	2120      	movs	r1, #32
 8005b98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2278      	movs	r2, #120	; 0x78
 8005baa:	2100      	movs	r1, #0
 8005bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b010      	add	sp, #64	; 0x40
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	01ffffff 	.word	0x01ffffff
 8005bbc:	fffffedf 	.word	0xfffffedf

08005bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	1dfb      	adds	r3, r7, #7
 8005bce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd0:	e04b      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	d048      	beq.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd8:	f7fe fbf4 	bl	80043c4 <HAL_GetTick>
 8005bdc:	0002      	movs	r2, r0
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <UART_WaitOnFlagUntilTimeout+0x2e>
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e04b      	b.n	8005c8a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d035      	beq.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	2208      	movs	r2, #8
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d111      	bne.n	8005c30 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2208      	movs	r2, #8
 8005c12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 f83c 	bl	8005c94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2284      	movs	r2, #132	; 0x84
 8005c20:	2108      	movs	r1, #8
 8005c22:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2278      	movs	r2, #120	; 0x78
 8005c28:	2100      	movs	r1, #0
 8005c2a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e02c      	b.n	8005c8a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d112      	bne.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	0112      	lsls	r2, r2, #4
 8005c4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 f81f 	bl	8005c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2284      	movs	r2, #132	; 0x84
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2278      	movs	r2, #120	; 0x78
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e00f      	b.n	8005c8a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	4013      	ands	r3, r2
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	425a      	negs	r2, r3
 8005c7a:	4153      	adcs	r3, r2
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	001a      	movs	r2, r3
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d0a4      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b004      	add	sp, #16
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08e      	sub	sp, #56	; 0x38
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ca2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	46c0      	nop			; (mov r8, r8)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4926      	ldr	r1, [pc, #152]	; (8005d58 <UART_EndRxTransfer+0xc4>)
 8005cbe:	400a      	ands	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f383 8810 	msr	PRIMASK, r3
}
 8005ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cce:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd2:	623b      	str	r3, [r7, #32]
  return(result);
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd8:	2301      	movs	r3, #1
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2101      	movs	r1, #1
 8005cf0:	438a      	bics	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	f383 8810 	msr	PRIMASK, r3
}
 8005cfe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d118      	bne.n	8005d3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d08:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d12:	2301      	movs	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f383 8810 	msr	PRIMASK, r3
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2110      	movs	r1, #16
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	2120      	movs	r1, #32
 8005d40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b00e      	add	sp, #56	; 0x38
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	fffffedf 	.word	0xfffffedf

08005d5c <__cvt>:
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5e:	001e      	movs	r6, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	0014      	movs	r4, r2
 8005d64:	b08b      	sub	sp, #44	; 0x2c
 8005d66:	429e      	cmp	r6, r3
 8005d68:	da04      	bge.n	8005d74 <__cvt+0x18>
 8005d6a:	2180      	movs	r1, #128	; 0x80
 8005d6c:	0609      	lsls	r1, r1, #24
 8005d6e:	1873      	adds	r3, r6, r1
 8005d70:	001e      	movs	r6, r3
 8005d72:	232d      	movs	r3, #45	; 0x2d
 8005d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d76:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d78:	7013      	strb	r3, [r2, #0]
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	439f      	bics	r7, r3
 8005d80:	2f46      	cmp	r7, #70	; 0x46
 8005d82:	d007      	beq.n	8005d94 <__cvt+0x38>
 8005d84:	003b      	movs	r3, r7
 8005d86:	3b45      	subs	r3, #69	; 0x45
 8005d88:	4259      	negs	r1, r3
 8005d8a:	414b      	adcs	r3, r1
 8005d8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	18cb      	adds	r3, r1, r3
 8005d92:	9310      	str	r3, [sp, #64]	; 0x40
 8005d94:	ab09      	add	r3, sp, #36	; 0x24
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	ab08      	add	r3, sp, #32
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d9e:	9200      	str	r2, [sp, #0]
 8005da0:	9302      	str	r3, [sp, #8]
 8005da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005da4:	0022      	movs	r2, r4
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	0033      	movs	r3, r6
 8005daa:	f000 fea7 	bl	8006afc <_dtoa_r>
 8005dae:	0005      	movs	r5, r0
 8005db0:	2f47      	cmp	r7, #71	; 0x47
 8005db2:	d102      	bne.n	8005dba <__cvt+0x5e>
 8005db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005db6:	07db      	lsls	r3, r3, #31
 8005db8:	d528      	bpl.n	8005e0c <__cvt+0xb0>
 8005dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dbc:	18eb      	adds	r3, r5, r3
 8005dbe:	9307      	str	r3, [sp, #28]
 8005dc0:	2f46      	cmp	r7, #70	; 0x46
 8005dc2:	d114      	bne.n	8005dee <__cvt+0x92>
 8005dc4:	782b      	ldrb	r3, [r5, #0]
 8005dc6:	2b30      	cmp	r3, #48	; 0x30
 8005dc8:	d10c      	bne.n	8005de4 <__cvt+0x88>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	0020      	movs	r0, r4
 8005dd0:	0031      	movs	r1, r6
 8005dd2:	f7fa fb3b 	bl	800044c <__aeabi_dcmpeq>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d104      	bne.n	8005de4 <__cvt+0x88>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005de6:	9a07      	ldr	r2, [sp, #28]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	9307      	str	r3, [sp, #28]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2300      	movs	r3, #0
 8005df2:	0020      	movs	r0, r4
 8005df4:	0031      	movs	r1, r6
 8005df6:	f7fa fb29 	bl	800044c <__aeabi_dcmpeq>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d001      	beq.n	8005e02 <__cvt+0xa6>
 8005dfe:	9b07      	ldr	r3, [sp, #28]
 8005e00:	9309      	str	r3, [sp, #36]	; 0x24
 8005e02:	2230      	movs	r2, #48	; 0x30
 8005e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e06:	9907      	ldr	r1, [sp, #28]
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	d306      	bcc.n	8005e1a <__cvt+0xbe>
 8005e0c:	0028      	movs	r0, r5
 8005e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e12:	1b5b      	subs	r3, r3, r5
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	b00b      	add	sp, #44	; 0x2c
 8005e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1a:	1c59      	adds	r1, r3, #1
 8005e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	e7f0      	b.n	8005e04 <__cvt+0xa8>

08005e22 <__exponent>:
 8005e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e24:	1c83      	adds	r3, r0, #2
 8005e26:	b087      	sub	sp, #28
 8005e28:	9303      	str	r3, [sp, #12]
 8005e2a:	0005      	movs	r5, r0
 8005e2c:	000c      	movs	r4, r1
 8005e2e:	232b      	movs	r3, #43	; 0x2b
 8005e30:	7002      	strb	r2, [r0, #0]
 8005e32:	2900      	cmp	r1, #0
 8005e34:	da01      	bge.n	8005e3a <__exponent+0x18>
 8005e36:	424c      	negs	r4, r1
 8005e38:	3302      	adds	r3, #2
 8005e3a:	706b      	strb	r3, [r5, #1]
 8005e3c:	2c09      	cmp	r4, #9
 8005e3e:	dd2f      	ble.n	8005ea0 <__exponent+0x7e>
 8005e40:	270a      	movs	r7, #10
 8005e42:	ab04      	add	r3, sp, #16
 8005e44:	1dde      	adds	r6, r3, #7
 8005e46:	0020      	movs	r0, r4
 8005e48:	0039      	movs	r1, r7
 8005e4a:	9601      	str	r6, [sp, #4]
 8005e4c:	f7fa fae8 	bl	8000420 <__aeabi_idivmod>
 8005e50:	3e01      	subs	r6, #1
 8005e52:	3130      	adds	r1, #48	; 0x30
 8005e54:	0020      	movs	r0, r4
 8005e56:	7031      	strb	r1, [r6, #0]
 8005e58:	0039      	movs	r1, r7
 8005e5a:	9402      	str	r4, [sp, #8]
 8005e5c:	f7fa f9fa 	bl	8000254 <__divsi3>
 8005e60:	9b02      	ldr	r3, [sp, #8]
 8005e62:	0004      	movs	r4, r0
 8005e64:	2b63      	cmp	r3, #99	; 0x63
 8005e66:	dcee      	bgt.n	8005e46 <__exponent+0x24>
 8005e68:	9b01      	ldr	r3, [sp, #4]
 8005e6a:	3430      	adds	r4, #48	; 0x30
 8005e6c:	1e9a      	subs	r2, r3, #2
 8005e6e:	0013      	movs	r3, r2
 8005e70:	9903      	ldr	r1, [sp, #12]
 8005e72:	7014      	strb	r4, [r2, #0]
 8005e74:	a804      	add	r0, sp, #16
 8005e76:	3007      	adds	r0, #7
 8005e78:	4298      	cmp	r0, r3
 8005e7a:	d80c      	bhi.n	8005e96 <__exponent+0x74>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4282      	cmp	r2, r0
 8005e80:	d804      	bhi.n	8005e8c <__exponent+0x6a>
 8005e82:	aa04      	add	r2, sp, #16
 8005e84:	3309      	adds	r3, #9
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	9a01      	ldr	r2, [sp, #4]
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	9a03      	ldr	r2, [sp, #12]
 8005e8e:	18d3      	adds	r3, r2, r3
 8005e90:	1b58      	subs	r0, r3, r5
 8005e92:	b007      	add	sp, #28
 8005e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e96:	7818      	ldrb	r0, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	7008      	strb	r0, [r1, #0]
 8005e9c:	3101      	adds	r1, #1
 8005e9e:	e7e9      	b.n	8005e74 <__exponent+0x52>
 8005ea0:	2330      	movs	r3, #48	; 0x30
 8005ea2:	3430      	adds	r4, #48	; 0x30
 8005ea4:	70ab      	strb	r3, [r5, #2]
 8005ea6:	70ec      	strb	r4, [r5, #3]
 8005ea8:	1d2b      	adds	r3, r5, #4
 8005eaa:	e7f1      	b.n	8005e90 <__exponent+0x6e>

08005eac <_printf_float>:
 8005eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eae:	b095      	sub	sp, #84	; 0x54
 8005eb0:	000c      	movs	r4, r1
 8005eb2:	9208      	str	r2, [sp, #32]
 8005eb4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb8:	0007      	movs	r7, r0
 8005eba:	f000 fd05 	bl	80068c8 <_localeconv_r>
 8005ebe:	6803      	ldr	r3, [r0, #0]
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec4:	f7fa f920 	bl	8000108 <strlen>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	9312      	str	r3, [sp, #72]	; 0x48
 8005ecc:	7e23      	ldrb	r3, [r4, #24]
 8005ece:	2207      	movs	r2, #7
 8005ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	900d      	str	r0, [sp, #52]	; 0x34
 8005ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	05c9      	lsls	r1, r1, #23
 8005ede:	d547      	bpl.n	8005f70 <_printf_float+0xc4>
 8005ee0:	189b      	adds	r3, r3, r2
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	3208      	adds	r2, #8
 8005ee8:	602a      	str	r2, [r5, #0]
 8005eea:	681e      	ldr	r6, [r3, #0]
 8005eec:	685d      	ldr	r5, [r3, #4]
 8005eee:	0032      	movs	r2, r6
 8005ef0:	002b      	movs	r3, r5
 8005ef2:	64a2      	str	r2, [r4, #72]	; 0x48
 8005ef4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	006b      	lsls	r3, r5, #1
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	930e      	str	r3, [sp, #56]	; 0x38
 8005efe:	0030      	movs	r0, r6
 8005f00:	4bab      	ldr	r3, [pc, #684]	; (80061b0 <_printf_float+0x304>)
 8005f02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f04:	4252      	negs	r2, r2
 8005f06:	f7fc fe23 	bl	8002b50 <__aeabi_dcmpun>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d132      	bne.n	8005f74 <_printf_float+0xc8>
 8005f0e:	2201      	movs	r2, #1
 8005f10:	0030      	movs	r0, r6
 8005f12:	4ba7      	ldr	r3, [pc, #668]	; (80061b0 <_printf_float+0x304>)
 8005f14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f16:	4252      	negs	r2, r2
 8005f18:	f7fa faa8 	bl	800046c <__aeabi_dcmple>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d129      	bne.n	8005f74 <_printf_float+0xc8>
 8005f20:	2200      	movs	r2, #0
 8005f22:	2300      	movs	r3, #0
 8005f24:	0030      	movs	r0, r6
 8005f26:	0029      	movs	r1, r5
 8005f28:	f7fa fa96 	bl	8000458 <__aeabi_dcmplt>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d003      	beq.n	8005f38 <_printf_float+0x8c>
 8005f30:	0023      	movs	r3, r4
 8005f32:	222d      	movs	r2, #45	; 0x2d
 8005f34:	3343      	adds	r3, #67	; 0x43
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3a:	4d9e      	ldr	r5, [pc, #632]	; (80061b4 <_printf_float+0x308>)
 8005f3c:	2b47      	cmp	r3, #71	; 0x47
 8005f3e:	d900      	bls.n	8005f42 <_printf_float+0x96>
 8005f40:	4d9d      	ldr	r5, [pc, #628]	; (80061b8 <_printf_float+0x30c>)
 8005f42:	2303      	movs	r3, #3
 8005f44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f46:	6123      	str	r3, [r4, #16]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	439a      	bics	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6022      	str	r2, [r4, #0]
 8005f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f54:	0021      	movs	r1, r4
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	0038      	movs	r0, r7
 8005f5a:	9b08      	ldr	r3, [sp, #32]
 8005f5c:	aa13      	add	r2, sp, #76	; 0x4c
 8005f5e:	f000 f9fb 	bl	8006358 <_printf_common>
 8005f62:	3001      	adds	r0, #1
 8005f64:	d000      	beq.n	8005f68 <_printf_float+0xbc>
 8005f66:	e0a3      	b.n	80060b0 <_printf_float+0x204>
 8005f68:	2001      	movs	r0, #1
 8005f6a:	4240      	negs	r0, r0
 8005f6c:	b015      	add	sp, #84	; 0x54
 8005f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f70:	3307      	adds	r3, #7
 8005f72:	e7b6      	b.n	8005ee2 <_printf_float+0x36>
 8005f74:	0032      	movs	r2, r6
 8005f76:	002b      	movs	r3, r5
 8005f78:	0030      	movs	r0, r6
 8005f7a:	0029      	movs	r1, r5
 8005f7c:	f7fc fde8 	bl	8002b50 <__aeabi_dcmpun>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d00b      	beq.n	8005f9c <_printf_float+0xf0>
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	da03      	bge.n	8005f90 <_printf_float+0xe4>
 8005f88:	0023      	movs	r3, r4
 8005f8a:	222d      	movs	r2, #45	; 0x2d
 8005f8c:	3343      	adds	r3, #67	; 0x43
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f92:	4d8a      	ldr	r5, [pc, #552]	; (80061bc <_printf_float+0x310>)
 8005f94:	2b47      	cmp	r3, #71	; 0x47
 8005f96:	d9d4      	bls.n	8005f42 <_printf_float+0x96>
 8005f98:	4d89      	ldr	r5, [pc, #548]	; (80061c0 <_printf_float+0x314>)
 8005f9a:	e7d2      	b.n	8005f42 <_printf_float+0x96>
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005fa0:	6863      	ldr	r3, [r4, #4]
 8005fa2:	4391      	bics	r1, r2
 8005fa4:	910e      	str	r1, [sp, #56]	; 0x38
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	d14a      	bne.n	8006040 <_printf_float+0x194>
 8005faa:	3307      	adds	r3, #7
 8005fac:	6063      	str	r3, [r4, #4]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	9206      	str	r2, [sp, #24]
 8005fba:	aa12      	add	r2, sp, #72	; 0x48
 8005fbc:	9205      	str	r2, [sp, #20]
 8005fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	9204      	str	r2, [sp, #16]
 8005fc4:	aa11      	add	r2, sp, #68	; 0x44
 8005fc6:	9203      	str	r2, [sp, #12]
 8005fc8:	2223      	movs	r2, #35	; 0x23
 8005fca:	a908      	add	r1, sp, #32
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	1852      	adds	r2, r2, r1
 8005fd2:	9202      	str	r2, [sp, #8]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	0032      	movs	r2, r6
 8005fd8:	002b      	movs	r3, r5
 8005fda:	0038      	movs	r0, r7
 8005fdc:	f7ff febe 	bl	8005d5c <__cvt>
 8005fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fe2:	0005      	movs	r5, r0
 8005fe4:	2b47      	cmp	r3, #71	; 0x47
 8005fe6:	d109      	bne.n	8005ffc <_printf_float+0x150>
 8005fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fea:	1cda      	adds	r2, r3, #3
 8005fec:	db02      	blt.n	8005ff4 <_printf_float+0x148>
 8005fee:	6862      	ldr	r2, [r4, #4]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	dd49      	ble.n	8006088 <_printf_float+0x1dc>
 8005ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff6:	3b02      	subs	r3, #2
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006000:	2b65      	cmp	r3, #101	; 0x65
 8006002:	d824      	bhi.n	800604e <_printf_float+0x1a2>
 8006004:	0020      	movs	r0, r4
 8006006:	001a      	movs	r2, r3
 8006008:	3901      	subs	r1, #1
 800600a:	3050      	adds	r0, #80	; 0x50
 800600c:	9111      	str	r1, [sp, #68]	; 0x44
 800600e:	f7ff ff08 	bl	8005e22 <__exponent>
 8006012:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006014:	900b      	str	r0, [sp, #44]	; 0x2c
 8006016:	1813      	adds	r3, r2, r0
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	2a01      	cmp	r2, #1
 800601c:	dc02      	bgt.n	8006024 <_printf_float+0x178>
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	07d2      	lsls	r2, r2, #31
 8006022:	d501      	bpl.n	8006028 <_printf_float+0x17c>
 8006024:	3301      	adds	r3, #1
 8006026:	6123      	str	r3, [r4, #16]
 8006028:	2323      	movs	r3, #35	; 0x23
 800602a:	aa08      	add	r2, sp, #32
 800602c:	189b      	adds	r3, r3, r2
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d100      	bne.n	8006036 <_printf_float+0x18a>
 8006034:	e78d      	b.n	8005f52 <_printf_float+0xa6>
 8006036:	0023      	movs	r3, r4
 8006038:	222d      	movs	r2, #45	; 0x2d
 800603a:	3343      	adds	r3, #67	; 0x43
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e788      	b.n	8005f52 <_printf_float+0xa6>
 8006040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006042:	2a47      	cmp	r2, #71	; 0x47
 8006044:	d1b3      	bne.n	8005fae <_printf_float+0x102>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1b1      	bne.n	8005fae <_printf_float+0x102>
 800604a:	3301      	adds	r3, #1
 800604c:	e7ae      	b.n	8005fac <_printf_float+0x100>
 800604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006050:	2b66      	cmp	r3, #102	; 0x66
 8006052:	d11b      	bne.n	800608c <_printf_float+0x1e0>
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	2900      	cmp	r1, #0
 8006058:	dd09      	ble.n	800606e <_printf_float+0x1c2>
 800605a:	6121      	str	r1, [r4, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <_printf_float+0x1ba>
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	07d2      	lsls	r2, r2, #31
 8006064:	d50b      	bpl.n	800607e <_printf_float+0x1d2>
 8006066:	3301      	adds	r3, #1
 8006068:	185b      	adds	r3, r3, r1
 800606a:	6123      	str	r3, [r4, #16]
 800606c:	e007      	b.n	800607e <_printf_float+0x1d2>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <_printf_float+0x1ce>
 8006072:	2201      	movs	r2, #1
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	4211      	tst	r1, r2
 8006078:	d000      	beq.n	800607c <_printf_float+0x1d0>
 800607a:	1c9a      	adds	r2, r3, #2
 800607c:	6122      	str	r2, [r4, #16]
 800607e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006080:	65a3      	str	r3, [r4, #88]	; 0x58
 8006082:	2300      	movs	r3, #0
 8006084:	930b      	str	r3, [sp, #44]	; 0x2c
 8006086:	e7cf      	b.n	8006028 <_printf_float+0x17c>
 8006088:	2367      	movs	r3, #103	; 0x67
 800608a:	930a      	str	r3, [sp, #40]	; 0x28
 800608c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800608e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006090:	4299      	cmp	r1, r3
 8006092:	db06      	blt.n	80060a2 <_printf_float+0x1f6>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	6121      	str	r1, [r4, #16]
 8006098:	07db      	lsls	r3, r3, #31
 800609a:	d5f0      	bpl.n	800607e <_printf_float+0x1d2>
 800609c:	3101      	adds	r1, #1
 800609e:	6121      	str	r1, [r4, #16]
 80060a0:	e7ed      	b.n	800607e <_printf_float+0x1d2>
 80060a2:	2201      	movs	r2, #1
 80060a4:	2900      	cmp	r1, #0
 80060a6:	dc01      	bgt.n	80060ac <_printf_float+0x200>
 80060a8:	1892      	adds	r2, r2, r2
 80060aa:	1a52      	subs	r2, r2, r1
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	e7dc      	b.n	800606a <_printf_float+0x1be>
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	0553      	lsls	r3, r2, #21
 80060b4:	d408      	bmi.n	80060c8 <_printf_float+0x21c>
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	002a      	movs	r2, r5
 80060ba:	0038      	movs	r0, r7
 80060bc:	9908      	ldr	r1, [sp, #32]
 80060be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80060c0:	47a8      	blx	r5
 80060c2:	3001      	adds	r0, #1
 80060c4:	d12a      	bne.n	800611c <_printf_float+0x270>
 80060c6:	e74f      	b.n	8005f68 <_printf_float+0xbc>
 80060c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ca:	2b65      	cmp	r3, #101	; 0x65
 80060cc:	d800      	bhi.n	80060d0 <_printf_float+0x224>
 80060ce:	e0ec      	b.n	80062aa <_printf_float+0x3fe>
 80060d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80060d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80060d4:	2200      	movs	r2, #0
 80060d6:	2300      	movs	r3, #0
 80060d8:	f7fa f9b8 	bl	800044c <__aeabi_dcmpeq>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d034      	beq.n	800614a <_printf_float+0x29e>
 80060e0:	2301      	movs	r3, #1
 80060e2:	0038      	movs	r0, r7
 80060e4:	4a37      	ldr	r2, [pc, #220]	; (80061c4 <_printf_float+0x318>)
 80060e6:	9908      	ldr	r1, [sp, #32]
 80060e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80060ea:	47a8      	blx	r5
 80060ec:	3001      	adds	r0, #1
 80060ee:	d100      	bne.n	80060f2 <_printf_float+0x246>
 80060f0:	e73a      	b.n	8005f68 <_printf_float+0xbc>
 80060f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060f6:	429a      	cmp	r2, r3
 80060f8:	db02      	blt.n	8006100 <_printf_float+0x254>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	07db      	lsls	r3, r3, #31
 80060fe:	d50d      	bpl.n	800611c <_printf_float+0x270>
 8006100:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006102:	0038      	movs	r0, r7
 8006104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006108:	9908      	ldr	r1, [sp, #32]
 800610a:	47a8      	blx	r5
 800610c:	2500      	movs	r5, #0
 800610e:	3001      	adds	r0, #1
 8006110:	d100      	bne.n	8006114 <_printf_float+0x268>
 8006112:	e729      	b.n	8005f68 <_printf_float+0xbc>
 8006114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006116:	3b01      	subs	r3, #1
 8006118:	42ab      	cmp	r3, r5
 800611a:	dc0a      	bgt.n	8006132 <_printf_float+0x286>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	079b      	lsls	r3, r3, #30
 8006120:	d500      	bpl.n	8006124 <_printf_float+0x278>
 8006122:	e116      	b.n	8006352 <_printf_float+0x4a6>
 8006124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006126:	68e0      	ldr	r0, [r4, #12]
 8006128:	4298      	cmp	r0, r3
 800612a:	db00      	blt.n	800612e <_printf_float+0x282>
 800612c:	e71e      	b.n	8005f6c <_printf_float+0xc0>
 800612e:	0018      	movs	r0, r3
 8006130:	e71c      	b.n	8005f6c <_printf_float+0xc0>
 8006132:	0022      	movs	r2, r4
 8006134:	2301      	movs	r3, #1
 8006136:	0038      	movs	r0, r7
 8006138:	9908      	ldr	r1, [sp, #32]
 800613a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800613c:	321a      	adds	r2, #26
 800613e:	47b0      	blx	r6
 8006140:	3001      	adds	r0, #1
 8006142:	d100      	bne.n	8006146 <_printf_float+0x29a>
 8006144:	e710      	b.n	8005f68 <_printf_float+0xbc>
 8006146:	3501      	adds	r5, #1
 8006148:	e7e4      	b.n	8006114 <_printf_float+0x268>
 800614a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800614c:	2b00      	cmp	r3, #0
 800614e:	dc3b      	bgt.n	80061c8 <_printf_float+0x31c>
 8006150:	2301      	movs	r3, #1
 8006152:	0038      	movs	r0, r7
 8006154:	4a1b      	ldr	r2, [pc, #108]	; (80061c4 <_printf_float+0x318>)
 8006156:	9908      	ldr	r1, [sp, #32]
 8006158:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800615a:	47b0      	blx	r6
 800615c:	3001      	adds	r0, #1
 800615e:	d100      	bne.n	8006162 <_printf_float+0x2b6>
 8006160:	e702      	b.n	8005f68 <_printf_float+0xbc>
 8006162:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006166:	4313      	orrs	r3, r2
 8006168:	d102      	bne.n	8006170 <_printf_float+0x2c4>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	07db      	lsls	r3, r3, #31
 800616e:	d5d5      	bpl.n	800611c <_printf_float+0x270>
 8006170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006172:	0038      	movs	r0, r7
 8006174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006176:	9908      	ldr	r1, [sp, #32]
 8006178:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800617a:	47b0      	blx	r6
 800617c:	2300      	movs	r3, #0
 800617e:	3001      	adds	r0, #1
 8006180:	d100      	bne.n	8006184 <_printf_float+0x2d8>
 8006182:	e6f1      	b.n	8005f68 <_printf_float+0xbc>
 8006184:	930a      	str	r3, [sp, #40]	; 0x28
 8006186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618a:	425b      	negs	r3, r3
 800618c:	4293      	cmp	r3, r2
 800618e:	dc01      	bgt.n	8006194 <_printf_float+0x2e8>
 8006190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006192:	e791      	b.n	80060b8 <_printf_float+0x20c>
 8006194:	0022      	movs	r2, r4
 8006196:	2301      	movs	r3, #1
 8006198:	0038      	movs	r0, r7
 800619a:	9908      	ldr	r1, [sp, #32]
 800619c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800619e:	321a      	adds	r2, #26
 80061a0:	47b0      	blx	r6
 80061a2:	3001      	adds	r0, #1
 80061a4:	d100      	bne.n	80061a8 <_printf_float+0x2fc>
 80061a6:	e6df      	b.n	8005f68 <_printf_float+0xbc>
 80061a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061aa:	3301      	adds	r3, #1
 80061ac:	e7ea      	b.n	8006184 <_printf_float+0x2d8>
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	7fefffff 	.word	0x7fefffff
 80061b4:	08008d08 	.word	0x08008d08
 80061b8:	08008d0c 	.word	0x08008d0c
 80061bc:	08008d10 	.word	0x08008d10
 80061c0:	08008d14 	.word	0x08008d14
 80061c4:	08008d18 	.word	0x08008d18
 80061c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061cc:	920a      	str	r2, [sp, #40]	; 0x28
 80061ce:	429a      	cmp	r2, r3
 80061d0:	dd00      	ble.n	80061d4 <_printf_float+0x328>
 80061d2:	930a      	str	r3, [sp, #40]	; 0x28
 80061d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dc3d      	bgt.n	8006256 <_printf_float+0x3aa>
 80061da:	2300      	movs	r3, #0
 80061dc:	930e      	str	r3, [sp, #56]	; 0x38
 80061de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e0:	43db      	mvns	r3, r3
 80061e2:	17db      	asrs	r3, r3, #31
 80061e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061ee:	4013      	ands	r3, r2
 80061f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f6:	4293      	cmp	r3, r2
 80061f8:	dc36      	bgt.n	8006268 <_printf_float+0x3bc>
 80061fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80061fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061fe:	429a      	cmp	r2, r3
 8006200:	db40      	blt.n	8006284 <_printf_float+0x3d8>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	07db      	lsls	r3, r3, #31
 8006206:	d43d      	bmi.n	8006284 <_printf_float+0x3d8>
 8006208:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800620a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800620c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800620e:	1af3      	subs	r3, r6, r3
 8006210:	1ab6      	subs	r6, r6, r2
 8006212:	429e      	cmp	r6, r3
 8006214:	dd00      	ble.n	8006218 <_printf_float+0x36c>
 8006216:	001e      	movs	r6, r3
 8006218:	2e00      	cmp	r6, #0
 800621a:	dc3c      	bgt.n	8006296 <_printf_float+0x3ea>
 800621c:	2300      	movs	r3, #0
 800621e:	930a      	str	r3, [sp, #40]	; 0x28
 8006220:	43f3      	mvns	r3, r6
 8006222:	17db      	asrs	r3, r3, #31
 8006224:	930b      	str	r3, [sp, #44]	; 0x2c
 8006226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800622e:	4032      	ands	r2, r6
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006234:	4293      	cmp	r3, r2
 8006236:	dc00      	bgt.n	800623a <_printf_float+0x38e>
 8006238:	e770      	b.n	800611c <_printf_float+0x270>
 800623a:	0022      	movs	r2, r4
 800623c:	2301      	movs	r3, #1
 800623e:	0038      	movs	r0, r7
 8006240:	9908      	ldr	r1, [sp, #32]
 8006242:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006244:	321a      	adds	r2, #26
 8006246:	47a8      	blx	r5
 8006248:	3001      	adds	r0, #1
 800624a:	d100      	bne.n	800624e <_printf_float+0x3a2>
 800624c:	e68c      	b.n	8005f68 <_printf_float+0xbc>
 800624e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006250:	3301      	adds	r3, #1
 8006252:	930a      	str	r3, [sp, #40]	; 0x28
 8006254:	e7e7      	b.n	8006226 <_printf_float+0x37a>
 8006256:	002a      	movs	r2, r5
 8006258:	0038      	movs	r0, r7
 800625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625c:	9908      	ldr	r1, [sp, #32]
 800625e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006260:	47b0      	blx	r6
 8006262:	3001      	adds	r0, #1
 8006264:	d1b9      	bne.n	80061da <_printf_float+0x32e>
 8006266:	e67f      	b.n	8005f68 <_printf_float+0xbc>
 8006268:	0022      	movs	r2, r4
 800626a:	2301      	movs	r3, #1
 800626c:	0038      	movs	r0, r7
 800626e:	9908      	ldr	r1, [sp, #32]
 8006270:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006272:	321a      	adds	r2, #26
 8006274:	47b0      	blx	r6
 8006276:	3001      	adds	r0, #1
 8006278:	d100      	bne.n	800627c <_printf_float+0x3d0>
 800627a:	e675      	b.n	8005f68 <_printf_float+0xbc>
 800627c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627e:	3301      	adds	r3, #1
 8006280:	930e      	str	r3, [sp, #56]	; 0x38
 8006282:	e7b0      	b.n	80061e6 <_printf_float+0x33a>
 8006284:	0038      	movs	r0, r7
 8006286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800628a:	9908      	ldr	r1, [sp, #32]
 800628c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800628e:	47b0      	blx	r6
 8006290:	3001      	adds	r0, #1
 8006292:	d1b9      	bne.n	8006208 <_printf_float+0x35c>
 8006294:	e668      	b.n	8005f68 <_printf_float+0xbc>
 8006296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006298:	0038      	movs	r0, r7
 800629a:	18ea      	adds	r2, r5, r3
 800629c:	9908      	ldr	r1, [sp, #32]
 800629e:	0033      	movs	r3, r6
 80062a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80062a2:	47a8      	blx	r5
 80062a4:	3001      	adds	r0, #1
 80062a6:	d1b9      	bne.n	800621c <_printf_float+0x370>
 80062a8:	e65e      	b.n	8005f68 <_printf_float+0xbc>
 80062aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	dc02      	bgt.n	80062b6 <_printf_float+0x40a>
 80062b0:	2301      	movs	r3, #1
 80062b2:	421a      	tst	r2, r3
 80062b4:	d03a      	beq.n	800632c <_printf_float+0x480>
 80062b6:	2301      	movs	r3, #1
 80062b8:	002a      	movs	r2, r5
 80062ba:	0038      	movs	r0, r7
 80062bc:	9908      	ldr	r1, [sp, #32]
 80062be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80062c0:	47b0      	blx	r6
 80062c2:	3001      	adds	r0, #1
 80062c4:	d100      	bne.n	80062c8 <_printf_float+0x41c>
 80062c6:	e64f      	b.n	8005f68 <_printf_float+0xbc>
 80062c8:	0038      	movs	r0, r7
 80062ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062ce:	9908      	ldr	r1, [sp, #32]
 80062d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80062d2:	47b0      	blx	r6
 80062d4:	3001      	adds	r0, #1
 80062d6:	d100      	bne.n	80062da <_printf_float+0x42e>
 80062d8:	e646      	b.n	8005f68 <_printf_float+0xbc>
 80062da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80062dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80062de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062e0:	2200      	movs	r2, #0
 80062e2:	001e      	movs	r6, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	f7fa f8b1 	bl	800044c <__aeabi_dcmpeq>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d11c      	bne.n	8006328 <_printf_float+0x47c>
 80062ee:	0033      	movs	r3, r6
 80062f0:	1c6a      	adds	r2, r5, #1
 80062f2:	3b01      	subs	r3, #1
 80062f4:	0038      	movs	r0, r7
 80062f6:	9908      	ldr	r1, [sp, #32]
 80062f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80062fa:	47a8      	blx	r5
 80062fc:	3001      	adds	r0, #1
 80062fe:	d10f      	bne.n	8006320 <_printf_float+0x474>
 8006300:	e632      	b.n	8005f68 <_printf_float+0xbc>
 8006302:	0022      	movs	r2, r4
 8006304:	2301      	movs	r3, #1
 8006306:	0038      	movs	r0, r7
 8006308:	9908      	ldr	r1, [sp, #32]
 800630a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800630c:	321a      	adds	r2, #26
 800630e:	47b0      	blx	r6
 8006310:	3001      	adds	r0, #1
 8006312:	d100      	bne.n	8006316 <_printf_float+0x46a>
 8006314:	e628      	b.n	8005f68 <_printf_float+0xbc>
 8006316:	3501      	adds	r5, #1
 8006318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800631a:	3b01      	subs	r3, #1
 800631c:	42ab      	cmp	r3, r5
 800631e:	dcf0      	bgt.n	8006302 <_printf_float+0x456>
 8006320:	0022      	movs	r2, r4
 8006322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006324:	3250      	adds	r2, #80	; 0x50
 8006326:	e6c8      	b.n	80060ba <_printf_float+0x20e>
 8006328:	2500      	movs	r5, #0
 800632a:	e7f5      	b.n	8006318 <_printf_float+0x46c>
 800632c:	002a      	movs	r2, r5
 800632e:	e7e1      	b.n	80062f4 <_printf_float+0x448>
 8006330:	0022      	movs	r2, r4
 8006332:	2301      	movs	r3, #1
 8006334:	0038      	movs	r0, r7
 8006336:	9908      	ldr	r1, [sp, #32]
 8006338:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800633a:	3219      	adds	r2, #25
 800633c:	47b0      	blx	r6
 800633e:	3001      	adds	r0, #1
 8006340:	d100      	bne.n	8006344 <_printf_float+0x498>
 8006342:	e611      	b.n	8005f68 <_printf_float+0xbc>
 8006344:	3501      	adds	r5, #1
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	42ab      	cmp	r3, r5
 800634e:	dcef      	bgt.n	8006330 <_printf_float+0x484>
 8006350:	e6e8      	b.n	8006124 <_printf_float+0x278>
 8006352:	2500      	movs	r5, #0
 8006354:	e7f7      	b.n	8006346 <_printf_float+0x49a>
 8006356:	46c0      	nop			; (mov r8, r8)

08006358 <_printf_common>:
 8006358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800635a:	0016      	movs	r6, r2
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	688a      	ldr	r2, [r1, #8]
 8006360:	690b      	ldr	r3, [r1, #16]
 8006362:	000c      	movs	r4, r1
 8006364:	9000      	str	r0, [sp, #0]
 8006366:	4293      	cmp	r3, r2
 8006368:	da00      	bge.n	800636c <_printf_common+0x14>
 800636a:	0013      	movs	r3, r2
 800636c:	0022      	movs	r2, r4
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	3243      	adds	r2, #67	; 0x43
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	2a00      	cmp	r2, #0
 8006376:	d001      	beq.n	800637c <_printf_common+0x24>
 8006378:	3301      	adds	r3, #1
 800637a:	6033      	str	r3, [r6, #0]
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	069b      	lsls	r3, r3, #26
 8006380:	d502      	bpl.n	8006388 <_printf_common+0x30>
 8006382:	6833      	ldr	r3, [r6, #0]
 8006384:	3302      	adds	r3, #2
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	2306      	movs	r3, #6
 800638c:	0015      	movs	r5, r2
 800638e:	401d      	ands	r5, r3
 8006390:	421a      	tst	r2, r3
 8006392:	d027      	beq.n	80063e4 <_printf_common+0x8c>
 8006394:	0023      	movs	r3, r4
 8006396:	3343      	adds	r3, #67	; 0x43
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	1e5a      	subs	r2, r3, #1
 800639c:	4193      	sbcs	r3, r2
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	0692      	lsls	r2, r2, #26
 80063a2:	d430      	bmi.n	8006406 <_printf_common+0xae>
 80063a4:	0022      	movs	r2, r4
 80063a6:	9901      	ldr	r1, [sp, #4]
 80063a8:	9800      	ldr	r0, [sp, #0]
 80063aa:	9d08      	ldr	r5, [sp, #32]
 80063ac:	3243      	adds	r2, #67	; 0x43
 80063ae:	47a8      	blx	r5
 80063b0:	3001      	adds	r0, #1
 80063b2:	d025      	beq.n	8006400 <_printf_common+0xa8>
 80063b4:	2206      	movs	r2, #6
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	2500      	movs	r5, #0
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d105      	bne.n	80063cc <_printf_common+0x74>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	68e5      	ldr	r5, [r4, #12]
 80063c4:	1aed      	subs	r5, r5, r3
 80063c6:	43eb      	mvns	r3, r5
 80063c8:	17db      	asrs	r3, r3, #31
 80063ca:	401d      	ands	r5, r3
 80063cc:	68a3      	ldr	r3, [r4, #8]
 80063ce:	6922      	ldr	r2, [r4, #16]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	dd01      	ble.n	80063d8 <_printf_common+0x80>
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	18ed      	adds	r5, r5, r3
 80063d8:	2600      	movs	r6, #0
 80063da:	42b5      	cmp	r5, r6
 80063dc:	d120      	bne.n	8006420 <_printf_common+0xc8>
 80063de:	2000      	movs	r0, #0
 80063e0:	e010      	b.n	8006404 <_printf_common+0xac>
 80063e2:	3501      	adds	r5, #1
 80063e4:	68e3      	ldr	r3, [r4, #12]
 80063e6:	6832      	ldr	r2, [r6, #0]
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	42ab      	cmp	r3, r5
 80063ec:	ddd2      	ble.n	8006394 <_printf_common+0x3c>
 80063ee:	0022      	movs	r2, r4
 80063f0:	2301      	movs	r3, #1
 80063f2:	9901      	ldr	r1, [sp, #4]
 80063f4:	9800      	ldr	r0, [sp, #0]
 80063f6:	9f08      	ldr	r7, [sp, #32]
 80063f8:	3219      	adds	r2, #25
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	d1f0      	bne.n	80063e2 <_printf_common+0x8a>
 8006400:	2001      	movs	r0, #1
 8006402:	4240      	negs	r0, r0
 8006404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006406:	2030      	movs	r0, #48	; 0x30
 8006408:	18e1      	adds	r1, r4, r3
 800640a:	3143      	adds	r1, #67	; 0x43
 800640c:	7008      	strb	r0, [r1, #0]
 800640e:	0021      	movs	r1, r4
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	3145      	adds	r1, #69	; 0x45
 8006414:	7809      	ldrb	r1, [r1, #0]
 8006416:	18a2      	adds	r2, r4, r2
 8006418:	3243      	adds	r2, #67	; 0x43
 800641a:	3302      	adds	r3, #2
 800641c:	7011      	strb	r1, [r2, #0]
 800641e:	e7c1      	b.n	80063a4 <_printf_common+0x4c>
 8006420:	0022      	movs	r2, r4
 8006422:	2301      	movs	r3, #1
 8006424:	9901      	ldr	r1, [sp, #4]
 8006426:	9800      	ldr	r0, [sp, #0]
 8006428:	9f08      	ldr	r7, [sp, #32]
 800642a:	321a      	adds	r2, #26
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	d0e6      	beq.n	8006400 <_printf_common+0xa8>
 8006432:	3601      	adds	r6, #1
 8006434:	e7d1      	b.n	80063da <_printf_common+0x82>
	...

08006438 <_printf_i>:
 8006438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643a:	b08b      	sub	sp, #44	; 0x2c
 800643c:	9206      	str	r2, [sp, #24]
 800643e:	000a      	movs	r2, r1
 8006440:	3243      	adds	r2, #67	; 0x43
 8006442:	9307      	str	r3, [sp, #28]
 8006444:	9005      	str	r0, [sp, #20]
 8006446:	9204      	str	r2, [sp, #16]
 8006448:	7e0a      	ldrb	r2, [r1, #24]
 800644a:	000c      	movs	r4, r1
 800644c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800644e:	2a78      	cmp	r2, #120	; 0x78
 8006450:	d809      	bhi.n	8006466 <_printf_i+0x2e>
 8006452:	2a62      	cmp	r2, #98	; 0x62
 8006454:	d80b      	bhi.n	800646e <_printf_i+0x36>
 8006456:	2a00      	cmp	r2, #0
 8006458:	d100      	bne.n	800645c <_printf_i+0x24>
 800645a:	e0be      	b.n	80065da <_printf_i+0x1a2>
 800645c:	497c      	ldr	r1, [pc, #496]	; (8006650 <_printf_i+0x218>)
 800645e:	9103      	str	r1, [sp, #12]
 8006460:	2a58      	cmp	r2, #88	; 0x58
 8006462:	d100      	bne.n	8006466 <_printf_i+0x2e>
 8006464:	e093      	b.n	800658e <_printf_i+0x156>
 8006466:	0026      	movs	r6, r4
 8006468:	3642      	adds	r6, #66	; 0x42
 800646a:	7032      	strb	r2, [r6, #0]
 800646c:	e022      	b.n	80064b4 <_printf_i+0x7c>
 800646e:	0010      	movs	r0, r2
 8006470:	3863      	subs	r0, #99	; 0x63
 8006472:	2815      	cmp	r0, #21
 8006474:	d8f7      	bhi.n	8006466 <_printf_i+0x2e>
 8006476:	f7f9 fe59 	bl	800012c <__gnu_thumb1_case_shi>
 800647a:	0016      	.short	0x0016
 800647c:	fff6001f 	.word	0xfff6001f
 8006480:	fff6fff6 	.word	0xfff6fff6
 8006484:	001ffff6 	.word	0x001ffff6
 8006488:	fff6fff6 	.word	0xfff6fff6
 800648c:	fff6fff6 	.word	0xfff6fff6
 8006490:	003600a3 	.word	0x003600a3
 8006494:	fff60083 	.word	0xfff60083
 8006498:	00b4fff6 	.word	0x00b4fff6
 800649c:	0036fff6 	.word	0x0036fff6
 80064a0:	fff6fff6 	.word	0xfff6fff6
 80064a4:	0087      	.short	0x0087
 80064a6:	0026      	movs	r6, r4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	3642      	adds	r6, #66	; 0x42
 80064ac:	1d11      	adds	r1, r2, #4
 80064ae:	6019      	str	r1, [r3, #0]
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	7033      	strb	r3, [r6, #0]
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0a2      	b.n	80065fe <_printf_i+0x1c6>
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	6809      	ldr	r1, [r1, #0]
 80064bc:	1d02      	adds	r2, r0, #4
 80064be:	060d      	lsls	r5, r1, #24
 80064c0:	d50b      	bpl.n	80064da <_printf_i+0xa2>
 80064c2:	6805      	ldr	r5, [r0, #0]
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	da03      	bge.n	80064d2 <_printf_i+0x9a>
 80064ca:	232d      	movs	r3, #45	; 0x2d
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	426d      	negs	r5, r5
 80064d0:	7013      	strb	r3, [r2, #0]
 80064d2:	4b5f      	ldr	r3, [pc, #380]	; (8006650 <_printf_i+0x218>)
 80064d4:	270a      	movs	r7, #10
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	e01b      	b.n	8006512 <_printf_i+0xda>
 80064da:	6805      	ldr	r5, [r0, #0]
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	0649      	lsls	r1, r1, #25
 80064e0:	d5f1      	bpl.n	80064c6 <_printf_i+0x8e>
 80064e2:	b22d      	sxth	r5, r5
 80064e4:	e7ef      	b.n	80064c6 <_printf_i+0x8e>
 80064e6:	680d      	ldr	r5, [r1, #0]
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	1d08      	adds	r0, r1, #4
 80064ec:	6018      	str	r0, [r3, #0]
 80064ee:	062e      	lsls	r6, r5, #24
 80064f0:	d501      	bpl.n	80064f6 <_printf_i+0xbe>
 80064f2:	680d      	ldr	r5, [r1, #0]
 80064f4:	e003      	b.n	80064fe <_printf_i+0xc6>
 80064f6:	066d      	lsls	r5, r5, #25
 80064f8:	d5fb      	bpl.n	80064f2 <_printf_i+0xba>
 80064fa:	680d      	ldr	r5, [r1, #0]
 80064fc:	b2ad      	uxth	r5, r5
 80064fe:	4b54      	ldr	r3, [pc, #336]	; (8006650 <_printf_i+0x218>)
 8006500:	2708      	movs	r7, #8
 8006502:	9303      	str	r3, [sp, #12]
 8006504:	2a6f      	cmp	r2, #111	; 0x6f
 8006506:	d000      	beq.n	800650a <_printf_i+0xd2>
 8006508:	3702      	adds	r7, #2
 800650a:	0023      	movs	r3, r4
 800650c:	2200      	movs	r2, #0
 800650e:	3343      	adds	r3, #67	; 0x43
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	6863      	ldr	r3, [r4, #4]
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	db03      	blt.n	8006522 <_printf_i+0xea>
 800651a:	2104      	movs	r1, #4
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	438a      	bics	r2, r1
 8006520:	6022      	str	r2, [r4, #0]
 8006522:	2d00      	cmp	r5, #0
 8006524:	d102      	bne.n	800652c <_printf_i+0xf4>
 8006526:	9e04      	ldr	r6, [sp, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00c      	beq.n	8006546 <_printf_i+0x10e>
 800652c:	9e04      	ldr	r6, [sp, #16]
 800652e:	0028      	movs	r0, r5
 8006530:	0039      	movs	r1, r7
 8006532:	f7f9 fe8b 	bl	800024c <__aeabi_uidivmod>
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	3e01      	subs	r6, #1
 800653a:	5c5b      	ldrb	r3, [r3, r1]
 800653c:	7033      	strb	r3, [r6, #0]
 800653e:	002b      	movs	r3, r5
 8006540:	0005      	movs	r5, r0
 8006542:	429f      	cmp	r7, r3
 8006544:	d9f3      	bls.n	800652e <_printf_i+0xf6>
 8006546:	2f08      	cmp	r7, #8
 8006548:	d109      	bne.n	800655e <_printf_i+0x126>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	07db      	lsls	r3, r3, #31
 800654e:	d506      	bpl.n	800655e <_printf_i+0x126>
 8006550:	6862      	ldr	r2, [r4, #4]
 8006552:	6923      	ldr	r3, [r4, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	dc02      	bgt.n	800655e <_printf_i+0x126>
 8006558:	2330      	movs	r3, #48	; 0x30
 800655a:	3e01      	subs	r6, #1
 800655c:	7033      	strb	r3, [r6, #0]
 800655e:	9b04      	ldr	r3, [sp, #16]
 8006560:	1b9b      	subs	r3, r3, r6
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	9b07      	ldr	r3, [sp, #28]
 8006566:	0021      	movs	r1, r4
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	9805      	ldr	r0, [sp, #20]
 800656c:	9b06      	ldr	r3, [sp, #24]
 800656e:	aa09      	add	r2, sp, #36	; 0x24
 8006570:	f7ff fef2 	bl	8006358 <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	d147      	bne.n	8006608 <_printf_i+0x1d0>
 8006578:	2001      	movs	r0, #1
 800657a:	4240      	negs	r0, r0
 800657c:	b00b      	add	sp, #44	; 0x2c
 800657e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006580:	2220      	movs	r2, #32
 8006582:	6809      	ldr	r1, [r1, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	6022      	str	r2, [r4, #0]
 8006588:	2278      	movs	r2, #120	; 0x78
 800658a:	4932      	ldr	r1, [pc, #200]	; (8006654 <_printf_i+0x21c>)
 800658c:	9103      	str	r1, [sp, #12]
 800658e:	0021      	movs	r1, r4
 8006590:	3145      	adds	r1, #69	; 0x45
 8006592:	700a      	strb	r2, [r1, #0]
 8006594:	6819      	ldr	r1, [r3, #0]
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	c920      	ldmia	r1!, {r5}
 800659a:	0610      	lsls	r0, r2, #24
 800659c:	d402      	bmi.n	80065a4 <_printf_i+0x16c>
 800659e:	0650      	lsls	r0, r2, #25
 80065a0:	d500      	bpl.n	80065a4 <_printf_i+0x16c>
 80065a2:	b2ad      	uxth	r5, r5
 80065a4:	6019      	str	r1, [r3, #0]
 80065a6:	07d3      	lsls	r3, r2, #31
 80065a8:	d502      	bpl.n	80065b0 <_printf_i+0x178>
 80065aa:	2320      	movs	r3, #32
 80065ac:	4313      	orrs	r3, r2
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	2710      	movs	r7, #16
 80065b2:	2d00      	cmp	r5, #0
 80065b4:	d1a9      	bne.n	800650a <_printf_i+0xd2>
 80065b6:	2220      	movs	r2, #32
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	4393      	bics	r3, r2
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	e7a4      	b.n	800650a <_printf_i+0xd2>
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	680d      	ldr	r5, [r1, #0]
 80065c4:	1d10      	adds	r0, r2, #4
 80065c6:	6949      	ldr	r1, [r1, #20]
 80065c8:	6018      	str	r0, [r3, #0]
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	062e      	lsls	r6, r5, #24
 80065ce:	d501      	bpl.n	80065d4 <_printf_i+0x19c>
 80065d0:	6019      	str	r1, [r3, #0]
 80065d2:	e002      	b.n	80065da <_printf_i+0x1a2>
 80065d4:	066d      	lsls	r5, r5, #25
 80065d6:	d5fb      	bpl.n	80065d0 <_printf_i+0x198>
 80065d8:	8019      	strh	r1, [r3, #0]
 80065da:	2300      	movs	r3, #0
 80065dc:	9e04      	ldr	r6, [sp, #16]
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	e7c0      	b.n	8006564 <_printf_i+0x12c>
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	1d11      	adds	r1, r2, #4
 80065e6:	6019      	str	r1, [r3, #0]
 80065e8:	6816      	ldr	r6, [r2, #0]
 80065ea:	2100      	movs	r1, #0
 80065ec:	0030      	movs	r0, r6
 80065ee:	6862      	ldr	r2, [r4, #4]
 80065f0:	f000 f9e9 	bl	80069c6 <memchr>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d001      	beq.n	80065fc <_printf_i+0x1c4>
 80065f8:	1b80      	subs	r0, r0, r6
 80065fa:	6060      	str	r0, [r4, #4]
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	2300      	movs	r3, #0
 8006602:	9a04      	ldr	r2, [sp, #16]
 8006604:	7013      	strb	r3, [r2, #0]
 8006606:	e7ad      	b.n	8006564 <_printf_i+0x12c>
 8006608:	0032      	movs	r2, r6
 800660a:	6923      	ldr	r3, [r4, #16]
 800660c:	9906      	ldr	r1, [sp, #24]
 800660e:	9805      	ldr	r0, [sp, #20]
 8006610:	9d07      	ldr	r5, [sp, #28]
 8006612:	47a8      	blx	r5
 8006614:	3001      	adds	r0, #1
 8006616:	d0af      	beq.n	8006578 <_printf_i+0x140>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	079b      	lsls	r3, r3, #30
 800661c:	d415      	bmi.n	800664a <_printf_i+0x212>
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	68e0      	ldr	r0, [r4, #12]
 8006622:	4298      	cmp	r0, r3
 8006624:	daaa      	bge.n	800657c <_printf_i+0x144>
 8006626:	0018      	movs	r0, r3
 8006628:	e7a8      	b.n	800657c <_printf_i+0x144>
 800662a:	0022      	movs	r2, r4
 800662c:	2301      	movs	r3, #1
 800662e:	9906      	ldr	r1, [sp, #24]
 8006630:	9805      	ldr	r0, [sp, #20]
 8006632:	9e07      	ldr	r6, [sp, #28]
 8006634:	3219      	adds	r2, #25
 8006636:	47b0      	blx	r6
 8006638:	3001      	adds	r0, #1
 800663a:	d09d      	beq.n	8006578 <_printf_i+0x140>
 800663c:	3501      	adds	r5, #1
 800663e:	68e3      	ldr	r3, [r4, #12]
 8006640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	42ab      	cmp	r3, r5
 8006646:	dcf0      	bgt.n	800662a <_printf_i+0x1f2>
 8006648:	e7e9      	b.n	800661e <_printf_i+0x1e6>
 800664a:	2500      	movs	r5, #0
 800664c:	e7f7      	b.n	800663e <_printf_i+0x206>
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	08008d1a 	.word	0x08008d1a
 8006654:	08008d2b 	.word	0x08008d2b

08006658 <std>:
 8006658:	2300      	movs	r3, #0
 800665a:	b510      	push	{r4, lr}
 800665c:	0004      	movs	r4, r0
 800665e:	6003      	str	r3, [r0, #0]
 8006660:	6043      	str	r3, [r0, #4]
 8006662:	6083      	str	r3, [r0, #8]
 8006664:	8181      	strh	r1, [r0, #12]
 8006666:	6643      	str	r3, [r0, #100]	; 0x64
 8006668:	81c2      	strh	r2, [r0, #14]
 800666a:	6103      	str	r3, [r0, #16]
 800666c:	6143      	str	r3, [r0, #20]
 800666e:	6183      	str	r3, [r0, #24]
 8006670:	0019      	movs	r1, r3
 8006672:	2208      	movs	r2, #8
 8006674:	305c      	adds	r0, #92	; 0x5c
 8006676:	f000 f91f 	bl	80068b8 <memset>
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <std+0x50>)
 800667c:	6224      	str	r4, [r4, #32]
 800667e:	6263      	str	r3, [r4, #36]	; 0x24
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <std+0x54>)
 8006682:	62a3      	str	r3, [r4, #40]	; 0x28
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <std+0x58>)
 8006686:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006688:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <std+0x5c>)
 800668a:	6323      	str	r3, [r4, #48]	; 0x30
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <std+0x60>)
 800668e:	429c      	cmp	r4, r3
 8006690:	d005      	beq.n	800669e <std+0x46>
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <std+0x64>)
 8006694:	429c      	cmp	r4, r3
 8006696:	d002      	beq.n	800669e <std+0x46>
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <std+0x68>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d103      	bne.n	80066a6 <std+0x4e>
 800669e:	0020      	movs	r0, r4
 80066a0:	3058      	adds	r0, #88	; 0x58
 80066a2:	f000 f98d 	bl	80069c0 <__retarget_lock_init_recursive>
 80066a6:	bd10      	pop	{r4, pc}
 80066a8:	08006821 	.word	0x08006821
 80066ac:	08006849 	.word	0x08006849
 80066b0:	08006881 	.word	0x08006881
 80066b4:	080068ad 	.word	0x080068ad
 80066b8:	200005c8 	.word	0x200005c8
 80066bc:	20000630 	.word	0x20000630
 80066c0:	20000698 	.word	0x20000698

080066c4 <stdio_exit_handler>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4a03      	ldr	r2, [pc, #12]	; (80066d4 <stdio_exit_handler+0x10>)
 80066c8:	4903      	ldr	r1, [pc, #12]	; (80066d8 <stdio_exit_handler+0x14>)
 80066ca:	4804      	ldr	r0, [pc, #16]	; (80066dc <stdio_exit_handler+0x18>)
 80066cc:	f000 f86c 	bl	80067a8 <_fwalk_sglue>
 80066d0:	bd10      	pop	{r4, pc}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	20000164 	.word	0x20000164
 80066d8:	08008435 	.word	0x08008435
 80066dc:	20000170 	.word	0x20000170

080066e0 <cleanup_stdio>:
 80066e0:	6841      	ldr	r1, [r0, #4]
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <cleanup_stdio+0x30>)
 80066e4:	b510      	push	{r4, lr}
 80066e6:	0004      	movs	r4, r0
 80066e8:	4299      	cmp	r1, r3
 80066ea:	d001      	beq.n	80066f0 <cleanup_stdio+0x10>
 80066ec:	f001 fea2 	bl	8008434 <_fflush_r>
 80066f0:	68a1      	ldr	r1, [r4, #8]
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <cleanup_stdio+0x34>)
 80066f4:	4299      	cmp	r1, r3
 80066f6:	d002      	beq.n	80066fe <cleanup_stdio+0x1e>
 80066f8:	0020      	movs	r0, r4
 80066fa:	f001 fe9b 	bl	8008434 <_fflush_r>
 80066fe:	68e1      	ldr	r1, [r4, #12]
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <cleanup_stdio+0x38>)
 8006702:	4299      	cmp	r1, r3
 8006704:	d002      	beq.n	800670c <cleanup_stdio+0x2c>
 8006706:	0020      	movs	r0, r4
 8006708:	f001 fe94 	bl	8008434 <_fflush_r>
 800670c:	bd10      	pop	{r4, pc}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	200005c8 	.word	0x200005c8
 8006714:	20000630 	.word	0x20000630
 8006718:	20000698 	.word	0x20000698

0800671c <global_stdio_init.part.0>:
 800671c:	b510      	push	{r4, lr}
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <global_stdio_init.part.0+0x28>)
 8006720:	4a09      	ldr	r2, [pc, #36]	; (8006748 <global_stdio_init.part.0+0x2c>)
 8006722:	2104      	movs	r1, #4
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	4809      	ldr	r0, [pc, #36]	; (800674c <global_stdio_init.part.0+0x30>)
 8006728:	2200      	movs	r2, #0
 800672a:	f7ff ff95 	bl	8006658 <std>
 800672e:	2201      	movs	r2, #1
 8006730:	2109      	movs	r1, #9
 8006732:	4807      	ldr	r0, [pc, #28]	; (8006750 <global_stdio_init.part.0+0x34>)
 8006734:	f7ff ff90 	bl	8006658 <std>
 8006738:	2202      	movs	r2, #2
 800673a:	2112      	movs	r1, #18
 800673c:	4805      	ldr	r0, [pc, #20]	; (8006754 <global_stdio_init.part.0+0x38>)
 800673e:	f7ff ff8b 	bl	8006658 <std>
 8006742:	bd10      	pop	{r4, pc}
 8006744:	20000700 	.word	0x20000700
 8006748:	080066c5 	.word	0x080066c5
 800674c:	200005c8 	.word	0x200005c8
 8006750:	20000630 	.word	0x20000630
 8006754:	20000698 	.word	0x20000698

08006758 <__sfp_lock_acquire>:
 8006758:	b510      	push	{r4, lr}
 800675a:	4802      	ldr	r0, [pc, #8]	; (8006764 <__sfp_lock_acquire+0xc>)
 800675c:	f000 f931 	bl	80069c2 <__retarget_lock_acquire_recursive>
 8006760:	bd10      	pop	{r4, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20000709 	.word	0x20000709

08006768 <__sfp_lock_release>:
 8006768:	b510      	push	{r4, lr}
 800676a:	4802      	ldr	r0, [pc, #8]	; (8006774 <__sfp_lock_release+0xc>)
 800676c:	f000 f92a 	bl	80069c4 <__retarget_lock_release_recursive>
 8006770:	bd10      	pop	{r4, pc}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	20000709 	.word	0x20000709

08006778 <__sinit>:
 8006778:	b510      	push	{r4, lr}
 800677a:	0004      	movs	r4, r0
 800677c:	f7ff ffec 	bl	8006758 <__sfp_lock_acquire>
 8006780:	6a23      	ldr	r3, [r4, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <__sinit+0x14>
 8006786:	f7ff ffef 	bl	8006768 <__sfp_lock_release>
 800678a:	bd10      	pop	{r4, pc}
 800678c:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <__sinit+0x28>)
 800678e:	6223      	str	r3, [r4, #32]
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <__sinit+0x2c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f6      	bne.n	8006786 <__sinit+0xe>
 8006798:	f7ff ffc0 	bl	800671c <global_stdio_init.part.0>
 800679c:	e7f3      	b.n	8006786 <__sinit+0xe>
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	080066e1 	.word	0x080066e1
 80067a4:	20000700 	.word	0x20000700

080067a8 <_fwalk_sglue>:
 80067a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067aa:	0014      	movs	r4, r2
 80067ac:	2600      	movs	r6, #0
 80067ae:	9000      	str	r0, [sp, #0]
 80067b0:	9101      	str	r1, [sp, #4]
 80067b2:	68a5      	ldr	r5, [r4, #8]
 80067b4:	6867      	ldr	r7, [r4, #4]
 80067b6:	3f01      	subs	r7, #1
 80067b8:	d504      	bpl.n	80067c4 <_fwalk_sglue+0x1c>
 80067ba:	6824      	ldr	r4, [r4, #0]
 80067bc:	2c00      	cmp	r4, #0
 80067be:	d1f8      	bne.n	80067b2 <_fwalk_sglue+0xa>
 80067c0:	0030      	movs	r0, r6
 80067c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067c4:	89ab      	ldrh	r3, [r5, #12]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d908      	bls.n	80067dc <_fwalk_sglue+0x34>
 80067ca:	220e      	movs	r2, #14
 80067cc:	5eab      	ldrsh	r3, [r5, r2]
 80067ce:	3301      	adds	r3, #1
 80067d0:	d004      	beq.n	80067dc <_fwalk_sglue+0x34>
 80067d2:	0029      	movs	r1, r5
 80067d4:	9800      	ldr	r0, [sp, #0]
 80067d6:	9b01      	ldr	r3, [sp, #4]
 80067d8:	4798      	blx	r3
 80067da:	4306      	orrs	r6, r0
 80067dc:	3568      	adds	r5, #104	; 0x68
 80067de:	e7ea      	b.n	80067b6 <_fwalk_sglue+0xe>

080067e0 <siprintf>:
 80067e0:	b40e      	push	{r1, r2, r3}
 80067e2:	b500      	push	{lr}
 80067e4:	490b      	ldr	r1, [pc, #44]	; (8006814 <siprintf+0x34>)
 80067e6:	b09c      	sub	sp, #112	; 0x70
 80067e8:	ab1d      	add	r3, sp, #116	; 0x74
 80067ea:	9002      	str	r0, [sp, #8]
 80067ec:	9006      	str	r0, [sp, #24]
 80067ee:	9107      	str	r1, [sp, #28]
 80067f0:	9104      	str	r1, [sp, #16]
 80067f2:	4809      	ldr	r0, [pc, #36]	; (8006818 <siprintf+0x38>)
 80067f4:	4909      	ldr	r1, [pc, #36]	; (800681c <siprintf+0x3c>)
 80067f6:	cb04      	ldmia	r3!, {r2}
 80067f8:	9105      	str	r1, [sp, #20]
 80067fa:	6800      	ldr	r0, [r0, #0]
 80067fc:	a902      	add	r1, sp, #8
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	f001 fc8e 	bl	8008120 <_svfiprintf_r>
 8006804:	2200      	movs	r2, #0
 8006806:	9b02      	ldr	r3, [sp, #8]
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	b01c      	add	sp, #112	; 0x70
 800680c:	bc08      	pop	{r3}
 800680e:	b003      	add	sp, #12
 8006810:	4718      	bx	r3
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	7fffffff 	.word	0x7fffffff
 8006818:	200001bc 	.word	0x200001bc
 800681c:	ffff0208 	.word	0xffff0208

08006820 <__sread>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	000c      	movs	r4, r1
 8006824:	250e      	movs	r5, #14
 8006826:	5f49      	ldrsh	r1, [r1, r5]
 8006828:	f000 f878 	bl	800691c <_read_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	db03      	blt.n	8006838 <__sread+0x18>
 8006830:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006832:	181b      	adds	r3, r3, r0
 8006834:	6563      	str	r3, [r4, #84]	; 0x54
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	4a02      	ldr	r2, [pc, #8]	; (8006844 <__sread+0x24>)
 800683c:	4013      	ands	r3, r2
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	e7f9      	b.n	8006836 <__sread+0x16>
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	ffffefff 	.word	0xffffefff

08006848 <__swrite>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	001f      	movs	r7, r3
 800684c:	898b      	ldrh	r3, [r1, #12]
 800684e:	0005      	movs	r5, r0
 8006850:	000c      	movs	r4, r1
 8006852:	0016      	movs	r6, r2
 8006854:	05db      	lsls	r3, r3, #23
 8006856:	d505      	bpl.n	8006864 <__swrite+0x1c>
 8006858:	230e      	movs	r3, #14
 800685a:	5ec9      	ldrsh	r1, [r1, r3]
 800685c:	2200      	movs	r2, #0
 800685e:	2302      	movs	r3, #2
 8006860:	f000 f848 	bl	80068f4 <_lseek_r>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	4a05      	ldr	r2, [pc, #20]	; (800687c <__swrite+0x34>)
 8006868:	0028      	movs	r0, r5
 800686a:	4013      	ands	r3, r2
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	0032      	movs	r2, r6
 8006870:	230e      	movs	r3, #14
 8006872:	5ee1      	ldrsh	r1, [r4, r3]
 8006874:	003b      	movs	r3, r7
 8006876:	f000 f865 	bl	8006944 <_write_r>
 800687a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800687c:	ffffefff 	.word	0xffffefff

08006880 <__sseek>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	000c      	movs	r4, r1
 8006884:	250e      	movs	r5, #14
 8006886:	5f49      	ldrsh	r1, [r1, r5]
 8006888:	f000 f834 	bl	80068f4 <_lseek_r>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	1c42      	adds	r2, r0, #1
 8006890:	d103      	bne.n	800689a <__sseek+0x1a>
 8006892:	4a05      	ldr	r2, [pc, #20]	; (80068a8 <__sseek+0x28>)
 8006894:	4013      	ands	r3, r2
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	bd70      	pop	{r4, r5, r6, pc}
 800689a:	2280      	movs	r2, #128	; 0x80
 800689c:	0152      	lsls	r2, r2, #5
 800689e:	4313      	orrs	r3, r2
 80068a0:	81a3      	strh	r3, [r4, #12]
 80068a2:	6560      	str	r0, [r4, #84]	; 0x54
 80068a4:	e7f8      	b.n	8006898 <__sseek+0x18>
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	ffffefff 	.word	0xffffefff

080068ac <__sclose>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	230e      	movs	r3, #14
 80068b0:	5ec9      	ldrsh	r1, [r1, r3]
 80068b2:	f000 f80d 	bl	80068d0 <_close_r>
 80068b6:	bd10      	pop	{r4, pc}

080068b8 <memset>:
 80068b8:	0003      	movs	r3, r0
 80068ba:	1882      	adds	r2, r0, r2
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	7019      	strb	r1, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <_localeconv_r>:
 80068c8:	4800      	ldr	r0, [pc, #0]	; (80068cc <_localeconv_r+0x4>)
 80068ca:	4770      	bx	lr
 80068cc:	200002b0 	.word	0x200002b0

080068d0 <_close_r>:
 80068d0:	2300      	movs	r3, #0
 80068d2:	b570      	push	{r4, r5, r6, lr}
 80068d4:	4d06      	ldr	r5, [pc, #24]	; (80068f0 <_close_r+0x20>)
 80068d6:	0004      	movs	r4, r0
 80068d8:	0008      	movs	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fd fc97 	bl	800420e <_close>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d103      	bne.n	80068ec <_close_r+0x1c>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d000      	beq.n	80068ec <_close_r+0x1c>
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	20000704 	.word	0x20000704

080068f4 <_lseek_r>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	0004      	movs	r4, r0
 80068f8:	0008      	movs	r0, r1
 80068fa:	0011      	movs	r1, r2
 80068fc:	001a      	movs	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	4d05      	ldr	r5, [pc, #20]	; (8006918 <_lseek_r+0x24>)
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	f7fd fca4 	bl	8004250 <_lseek>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d103      	bne.n	8006914 <_lseek_r+0x20>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d000      	beq.n	8006914 <_lseek_r+0x20>
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	20000704 	.word	0x20000704

0800691c <_read_r>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	0004      	movs	r4, r0
 8006920:	0008      	movs	r0, r1
 8006922:	0011      	movs	r1, r2
 8006924:	001a      	movs	r2, r3
 8006926:	2300      	movs	r3, #0
 8006928:	4d05      	ldr	r5, [pc, #20]	; (8006940 <_read_r+0x24>)
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fd fc36 	bl	800419c <_read>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d103      	bne.n	800693c <_read_r+0x20>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d000      	beq.n	800693c <_read_r+0x20>
 800693a:	6023      	str	r3, [r4, #0]
 800693c:	bd70      	pop	{r4, r5, r6, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	20000704 	.word	0x20000704

08006944 <_write_r>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	0004      	movs	r4, r0
 8006948:	0008      	movs	r0, r1
 800694a:	0011      	movs	r1, r2
 800694c:	001a      	movs	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	4d05      	ldr	r5, [pc, #20]	; (8006968 <_write_r+0x24>)
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	f7fd fc3f 	bl	80041d6 <_write>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d103      	bne.n	8006964 <_write_r+0x20>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d000      	beq.n	8006964 <_write_r+0x20>
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	20000704 	.word	0x20000704

0800696c <__errno>:
 800696c:	4b01      	ldr	r3, [pc, #4]	; (8006974 <__errno+0x8>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	4770      	bx	lr
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	200001bc 	.word	0x200001bc

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	2600      	movs	r6, #0
 800697c:	4c0c      	ldr	r4, [pc, #48]	; (80069b0 <__libc_init_array+0x38>)
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x3c>)
 8006980:	1b64      	subs	r4, r4, r5
 8006982:	10a4      	asrs	r4, r4, #2
 8006984:	42a6      	cmp	r6, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	2600      	movs	r6, #0
 800698a:	f002 f923 	bl	8008bd4 <_init>
 800698e:	4c0a      	ldr	r4, [pc, #40]	; (80069b8 <__libc_init_array+0x40>)
 8006990:	4d0a      	ldr	r5, [pc, #40]	; (80069bc <__libc_init_array+0x44>)
 8006992:	1b64      	subs	r4, r4, r5
 8006994:	10a4      	asrs	r4, r4, #2
 8006996:	42a6      	cmp	r6, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	00b3      	lsls	r3, r6, #2
 800699e:	58eb      	ldr	r3, [r5, r3]
 80069a0:	4798      	blx	r3
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	00b3      	lsls	r3, r6, #2
 80069a8:	58eb      	ldr	r3, [r5, r3]
 80069aa:	4798      	blx	r3
 80069ac:	3601      	adds	r6, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	0800907c 	.word	0x0800907c
 80069b4:	0800907c 	.word	0x0800907c
 80069b8:	08009080 	.word	0x08009080
 80069bc:	0800907c 	.word	0x0800907c

080069c0 <__retarget_lock_init_recursive>:
 80069c0:	4770      	bx	lr

080069c2 <__retarget_lock_acquire_recursive>:
 80069c2:	4770      	bx	lr

080069c4 <__retarget_lock_release_recursive>:
 80069c4:	4770      	bx	lr

080069c6 <memchr>:
 80069c6:	b2c9      	uxtb	r1, r1
 80069c8:	1882      	adds	r2, r0, r2
 80069ca:	4290      	cmp	r0, r2
 80069cc:	d101      	bne.n	80069d2 <memchr+0xc>
 80069ce:	2000      	movs	r0, #0
 80069d0:	4770      	bx	lr
 80069d2:	7803      	ldrb	r3, [r0, #0]
 80069d4:	428b      	cmp	r3, r1
 80069d6:	d0fb      	beq.n	80069d0 <memchr+0xa>
 80069d8:	3001      	adds	r0, #1
 80069da:	e7f6      	b.n	80069ca <memchr+0x4>

080069dc <quorem>:
 80069dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069de:	6902      	ldr	r2, [r0, #16]
 80069e0:	690b      	ldr	r3, [r1, #16]
 80069e2:	b089      	sub	sp, #36	; 0x24
 80069e4:	0007      	movs	r7, r0
 80069e6:	9104      	str	r1, [sp, #16]
 80069e8:	2000      	movs	r0, #0
 80069ea:	429a      	cmp	r2, r3
 80069ec:	db69      	blt.n	8006ac2 <quorem+0xe6>
 80069ee:	3b01      	subs	r3, #1
 80069f0:	009c      	lsls	r4, r3, #2
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	000b      	movs	r3, r1
 80069f6:	3314      	adds	r3, #20
 80069f8:	9306      	str	r3, [sp, #24]
 80069fa:	191b      	adds	r3, r3, r4
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	003b      	movs	r3, r7
 8006a00:	3314      	adds	r3, #20
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	191c      	adds	r4, r3, r4
 8006a06:	9b05      	ldr	r3, [sp, #20]
 8006a08:	6826      	ldr	r6, [r4, #0]
 8006a0a:	681d      	ldr	r5, [r3, #0]
 8006a0c:	0030      	movs	r0, r6
 8006a0e:	3501      	adds	r5, #1
 8006a10:	0029      	movs	r1, r5
 8006a12:	f7f9 fb95 	bl	8000140 <__udivsi3>
 8006a16:	9002      	str	r0, [sp, #8]
 8006a18:	42ae      	cmp	r6, r5
 8006a1a:	d329      	bcc.n	8006a70 <quorem+0x94>
 8006a1c:	9b06      	ldr	r3, [sp, #24]
 8006a1e:	2600      	movs	r6, #0
 8006a20:	469c      	mov	ip, r3
 8006a22:	9d03      	ldr	r5, [sp, #12]
 8006a24:	9606      	str	r6, [sp, #24]
 8006a26:	4662      	mov	r2, ip
 8006a28:	ca08      	ldmia	r2!, {r3}
 8006a2a:	6828      	ldr	r0, [r5, #0]
 8006a2c:	4694      	mov	ip, r2
 8006a2e:	9a02      	ldr	r2, [sp, #8]
 8006a30:	b299      	uxth	r1, r3
 8006a32:	4351      	muls	r1, r2
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	4353      	muls	r3, r2
 8006a38:	1989      	adds	r1, r1, r6
 8006a3a:	0c0a      	lsrs	r2, r1, #16
 8006a3c:	189b      	adds	r3, r3, r2
 8006a3e:	9307      	str	r3, [sp, #28]
 8006a40:	0c1e      	lsrs	r6, r3, #16
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	b282      	uxth	r2, r0
 8006a46:	18d2      	adds	r2, r2, r3
 8006a48:	466b      	mov	r3, sp
 8006a4a:	b289      	uxth	r1, r1
 8006a4c:	8b9b      	ldrh	r3, [r3, #28]
 8006a4e:	1a52      	subs	r2, r2, r1
 8006a50:	0c01      	lsrs	r1, r0, #16
 8006a52:	1ac9      	subs	r1, r1, r3
 8006a54:	1413      	asrs	r3, r2, #16
 8006a56:	18cb      	adds	r3, r1, r3
 8006a58:	1419      	asrs	r1, r3, #16
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	c508      	stmia	r5!, {r3}
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	9106      	str	r1, [sp, #24]
 8006a66:	4563      	cmp	r3, ip
 8006a68:	d2dd      	bcs.n	8006a26 <quorem+0x4a>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d030      	beq.n	8006ad2 <quorem+0xf6>
 8006a70:	0038      	movs	r0, r7
 8006a72:	9904      	ldr	r1, [sp, #16]
 8006a74:	f001 f9de 	bl	8007e34 <__mcmp>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	db21      	blt.n	8006ac0 <quorem+0xe4>
 8006a7c:	0038      	movs	r0, r7
 8006a7e:	2600      	movs	r6, #0
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	9c04      	ldr	r4, [sp, #16]
 8006a84:	3301      	adds	r3, #1
 8006a86:	9302      	str	r3, [sp, #8]
 8006a88:	3014      	adds	r0, #20
 8006a8a:	3414      	adds	r4, #20
 8006a8c:	6803      	ldr	r3, [r0, #0]
 8006a8e:	cc02      	ldmia	r4!, {r1}
 8006a90:	b29d      	uxth	r5, r3
 8006a92:	19ad      	adds	r5, r5, r6
 8006a94:	b28a      	uxth	r2, r1
 8006a96:	1aaa      	subs	r2, r5, r2
 8006a98:	0c09      	lsrs	r1, r1, #16
 8006a9a:	0c1b      	lsrs	r3, r3, #16
 8006a9c:	1a5b      	subs	r3, r3, r1
 8006a9e:	1411      	asrs	r1, r2, #16
 8006aa0:	185b      	adds	r3, r3, r1
 8006aa2:	141e      	asrs	r6, r3, #16
 8006aa4:	b292      	uxth	r2, r2
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	c008      	stmia	r0!, {r3}
 8006aac:	9b05      	ldr	r3, [sp, #20]
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	d2ec      	bcs.n	8006a8c <quorem+0xb0>
 8006ab2:	9b01      	ldr	r3, [sp, #4]
 8006ab4:	9a03      	ldr	r2, [sp, #12]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	18d3      	adds	r3, r2, r3
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	2a00      	cmp	r2, #0
 8006abe:	d015      	beq.n	8006aec <quorem+0x110>
 8006ac0:	9802      	ldr	r0, [sp, #8]
 8006ac2:	b009      	add	sp, #36	; 0x24
 8006ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <quorem+0xfe>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	9301      	str	r3, [sp, #4]
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	3c04      	subs	r4, #4
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	d3f5      	bcc.n	8006ac6 <quorem+0xea>
 8006ada:	9b01      	ldr	r3, [sp, #4]
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e7c7      	b.n	8006a70 <quorem+0x94>
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	d106      	bne.n	8006af4 <quorem+0x118>
 8006ae6:	9a01      	ldr	r2, [sp, #4]
 8006ae8:	3a01      	subs	r2, #1
 8006aea:	9201      	str	r2, [sp, #4]
 8006aec:	9a03      	ldr	r2, [sp, #12]
 8006aee:	3b04      	subs	r3, #4
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d3f5      	bcc.n	8006ae0 <quorem+0x104>
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	e7e2      	b.n	8006ac0 <quorem+0xe4>
	...

08006afc <_dtoa_r>:
 8006afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afe:	0014      	movs	r4, r2
 8006b00:	001d      	movs	r5, r3
 8006b02:	69c6      	ldr	r6, [r0, #28]
 8006b04:	b09d      	sub	sp, #116	; 0x74
 8006b06:	9408      	str	r4, [sp, #32]
 8006b08:	9509      	str	r5, [sp, #36]	; 0x24
 8006b0a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006b0c:	9004      	str	r0, [sp, #16]
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	d10f      	bne.n	8006b32 <_dtoa_r+0x36>
 8006b12:	2010      	movs	r0, #16
 8006b14:	f000 fe4a 	bl	80077ac <malloc>
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	1e02      	subs	r2, r0, #0
 8006b1c:	61d8      	str	r0, [r3, #28]
 8006b1e:	d104      	bne.n	8006b2a <_dtoa_r+0x2e>
 8006b20:	21ef      	movs	r1, #239	; 0xef
 8006b22:	4bc6      	ldr	r3, [pc, #792]	; (8006e3c <_dtoa_r+0x340>)
 8006b24:	48c6      	ldr	r0, [pc, #792]	; (8006e40 <_dtoa_r+0x344>)
 8006b26:	f001 fcdf 	bl	80084e8 <__assert_func>
 8006b2a:	6046      	str	r6, [r0, #4]
 8006b2c:	6086      	str	r6, [r0, #8]
 8006b2e:	6006      	str	r6, [r0, #0]
 8006b30:	60c6      	str	r6, [r0, #12]
 8006b32:	9b04      	ldr	r3, [sp, #16]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	6819      	ldr	r1, [r3, #0]
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	d00b      	beq.n	8006b54 <_dtoa_r+0x58>
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4093      	lsls	r3, r2
 8006b42:	604a      	str	r2, [r1, #4]
 8006b44:	608b      	str	r3, [r1, #8]
 8006b46:	9804      	ldr	r0, [sp, #16]
 8006b48:	f000 ff32 	bl	80079b0 <_Bfree>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	2d00      	cmp	r5, #0
 8006b56:	da1e      	bge.n	8006b96 <_dtoa_r+0x9a>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	006b      	lsls	r3, r5, #1
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b64:	4bb7      	ldr	r3, [pc, #732]	; (8006e44 <_dtoa_r+0x348>)
 8006b66:	4ab7      	ldr	r2, [pc, #732]	; (8006e44 <_dtoa_r+0x348>)
 8006b68:	403b      	ands	r3, r7
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d116      	bne.n	8006b9c <_dtoa_r+0xa0>
 8006b6e:	4bb6      	ldr	r3, [pc, #728]	; (8006e48 <_dtoa_r+0x34c>)
 8006b70:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	033b      	lsls	r3, r7, #12
 8006b76:	0b1b      	lsrs	r3, r3, #12
 8006b78:	4323      	orrs	r3, r4
 8006b7a:	d101      	bne.n	8006b80 <_dtoa_r+0x84>
 8006b7c:	f000 fdb5 	bl	80076ea <_dtoa_r+0xbee>
 8006b80:	4bb2      	ldr	r3, [pc, #712]	; (8006e4c <_dtoa_r+0x350>)
 8006b82:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b84:	9306      	str	r3, [sp, #24]
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	d002      	beq.n	8006b90 <_dtoa_r+0x94>
 8006b8a:	4bb1      	ldr	r3, [pc, #708]	; (8006e50 <_dtoa_r+0x354>)
 8006b8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	9806      	ldr	r0, [sp, #24]
 8006b92:	b01d      	add	sp, #116	; 0x74
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	2300      	movs	r3, #0
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	e7e2      	b.n	8006b62 <_dtoa_r+0x66>
 8006b9c:	9a08      	ldr	r2, [sp, #32]
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	9210      	str	r2, [sp, #64]	; 0x40
 8006ba2:	9311      	str	r3, [sp, #68]	; 0x44
 8006ba4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006ba6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	f7f9 fc4e 	bl	800044c <__aeabi_dcmpeq>
 8006bb0:	1e06      	subs	r6, r0, #0
 8006bb2:	d009      	beq.n	8006bc8 <_dtoa_r+0xcc>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4ba6      	ldr	r3, [pc, #664]	; (8006e54 <_dtoa_r+0x358>)
 8006bbc:	9306      	str	r3, [sp, #24]
 8006bbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0e5      	beq.n	8006b90 <_dtoa_r+0x94>
 8006bc4:	4ba4      	ldr	r3, [pc, #656]	; (8006e58 <_dtoa_r+0x35c>)
 8006bc6:	e7e1      	b.n	8006b8c <_dtoa_r+0x90>
 8006bc8:	ab1a      	add	r3, sp, #104	; 0x68
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	ab1b      	add	r3, sp, #108	; 0x6c
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	9804      	ldr	r0, [sp, #16]
 8006bd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bd6:	f001 f9e1 	bl	8007f9c <__d2b>
 8006bda:	007a      	lsls	r2, r7, #1
 8006bdc:	9005      	str	r0, [sp, #20]
 8006bde:	0d52      	lsrs	r2, r2, #21
 8006be0:	d100      	bne.n	8006be4 <_dtoa_r+0xe8>
 8006be2:	e07b      	b.n	8006cdc <_dtoa_r+0x1e0>
 8006be4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006be6:	9617      	str	r6, [sp, #92]	; 0x5c
 8006be8:	0319      	lsls	r1, r3, #12
 8006bea:	4b9c      	ldr	r3, [pc, #624]	; (8006e5c <_dtoa_r+0x360>)
 8006bec:	0b09      	lsrs	r1, r1, #12
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	499b      	ldr	r1, [pc, #620]	; (8006e60 <_dtoa_r+0x364>)
 8006bf2:	1857      	adds	r7, r2, r1
 8006bf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006bf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006bf8:	0019      	movs	r1, r3
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4b99      	ldr	r3, [pc, #612]	; (8006e64 <_dtoa_r+0x368>)
 8006bfe:	f7fb fc25 	bl	800244c <__aeabi_dsub>
 8006c02:	4a99      	ldr	r2, [pc, #612]	; (8006e68 <_dtoa_r+0x36c>)
 8006c04:	4b99      	ldr	r3, [pc, #612]	; (8006e6c <_dtoa_r+0x370>)
 8006c06:	f7fb f95f 	bl	8001ec8 <__aeabi_dmul>
 8006c0a:	4a99      	ldr	r2, [pc, #612]	; (8006e70 <_dtoa_r+0x374>)
 8006c0c:	4b99      	ldr	r3, [pc, #612]	; (8006e74 <_dtoa_r+0x378>)
 8006c0e:	f7fa fa01 	bl	8001014 <__aeabi_dadd>
 8006c12:	0004      	movs	r4, r0
 8006c14:	0038      	movs	r0, r7
 8006c16:	000d      	movs	r5, r1
 8006c18:	f7fb ffee 	bl	8002bf8 <__aeabi_i2d>
 8006c1c:	4a96      	ldr	r2, [pc, #600]	; (8006e78 <_dtoa_r+0x37c>)
 8006c1e:	4b97      	ldr	r3, [pc, #604]	; (8006e7c <_dtoa_r+0x380>)
 8006c20:	f7fb f952 	bl	8001ec8 <__aeabi_dmul>
 8006c24:	0002      	movs	r2, r0
 8006c26:	000b      	movs	r3, r1
 8006c28:	0020      	movs	r0, r4
 8006c2a:	0029      	movs	r1, r5
 8006c2c:	f7fa f9f2 	bl	8001014 <__aeabi_dadd>
 8006c30:	0004      	movs	r4, r0
 8006c32:	000d      	movs	r5, r1
 8006c34:	f7fb ffaa 	bl	8002b8c <__aeabi_d2iz>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	9003      	str	r0, [sp, #12]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	0020      	movs	r0, r4
 8006c40:	0029      	movs	r1, r5
 8006c42:	f7f9 fc09 	bl	8000458 <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d00b      	beq.n	8006c62 <_dtoa_r+0x166>
 8006c4a:	9803      	ldr	r0, [sp, #12]
 8006c4c:	f7fb ffd4 	bl	8002bf8 <__aeabi_i2d>
 8006c50:	002b      	movs	r3, r5
 8006c52:	0022      	movs	r2, r4
 8006c54:	f7f9 fbfa 	bl	800044c <__aeabi_dcmpeq>
 8006c58:	4243      	negs	r3, r0
 8006c5a:	4158      	adcs	r0, r3
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	1a1b      	subs	r3, r3, r0
 8006c60:	9303      	str	r3, [sp, #12]
 8006c62:	2301      	movs	r3, #1
 8006c64:	9316      	str	r3, [sp, #88]	; 0x58
 8006c66:	9b03      	ldr	r3, [sp, #12]
 8006c68:	2b16      	cmp	r3, #22
 8006c6a:	d810      	bhi.n	8006c8e <_dtoa_r+0x192>
 8006c6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006c6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c70:	9a03      	ldr	r2, [sp, #12]
 8006c72:	4b83      	ldr	r3, [pc, #524]	; (8006e80 <_dtoa_r+0x384>)
 8006c74:	00d2      	lsls	r2, r2, #3
 8006c76:	189b      	adds	r3, r3, r2
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f7f9 fbec 	bl	8000458 <__aeabi_dcmplt>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d047      	beq.n	8006d14 <_dtoa_r+0x218>
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	9303      	str	r3, [sp, #12]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9316      	str	r3, [sp, #88]	; 0x58
 8006c8e:	2200      	movs	r2, #0
 8006c90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c92:	920a      	str	r2, [sp, #40]	; 0x28
 8006c94:	1bdb      	subs	r3, r3, r7
 8006c96:	1e5a      	subs	r2, r3, #1
 8006c98:	d53e      	bpl.n	8006d18 <_dtoa_r+0x21c>
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	db38      	blt.n	8006d1c <_dtoa_r+0x220>
 8006caa:	9a03      	ldr	r2, [sp, #12]
 8006cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cae:	4694      	mov	ip, r2
 8006cb0:	4463      	add	r3, ip
 8006cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cb8:	930d      	str	r3, [sp, #52]	; 0x34
 8006cba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cbc:	2401      	movs	r4, #1
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d867      	bhi.n	8006d92 <_dtoa_r+0x296>
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	dd02      	ble.n	8006ccc <_dtoa_r+0x1d0>
 8006cc6:	2400      	movs	r4, #0
 8006cc8:	3b04      	subs	r3, #4
 8006cca:	9322      	str	r3, [sp, #136]	; 0x88
 8006ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cce:	1e98      	subs	r0, r3, #2
 8006cd0:	2803      	cmp	r0, #3
 8006cd2:	d867      	bhi.n	8006da4 <_dtoa_r+0x2a8>
 8006cd4:	f7f9 fa20 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006cd8:	5b383a2b 	.word	0x5b383a2b
 8006cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cde:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006ce0:	18f6      	adds	r6, r6, r3
 8006ce2:	4b68      	ldr	r3, [pc, #416]	; (8006e84 <_dtoa_r+0x388>)
 8006ce4:	18f2      	adds	r2, r6, r3
 8006ce6:	2a20      	cmp	r2, #32
 8006ce8:	dd0f      	ble.n	8006d0a <_dtoa_r+0x20e>
 8006cea:	2340      	movs	r3, #64	; 0x40
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	409f      	lsls	r7, r3
 8006cf0:	4b65      	ldr	r3, [pc, #404]	; (8006e88 <_dtoa_r+0x38c>)
 8006cf2:	0038      	movs	r0, r7
 8006cf4:	18f3      	adds	r3, r6, r3
 8006cf6:	40dc      	lsrs	r4, r3
 8006cf8:	4320      	orrs	r0, r4
 8006cfa:	f7fb ffad 	bl	8002c58 <__aeabi_ui2d>
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4b62      	ldr	r3, [pc, #392]	; (8006e8c <_dtoa_r+0x390>)
 8006d02:	1e77      	subs	r7, r6, #1
 8006d04:	18cb      	adds	r3, r1, r3
 8006d06:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d08:	e776      	b.n	8006bf8 <_dtoa_r+0xfc>
 8006d0a:	2320      	movs	r3, #32
 8006d0c:	0020      	movs	r0, r4
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	4098      	lsls	r0, r3
 8006d12:	e7f2      	b.n	8006cfa <_dtoa_r+0x1fe>
 8006d14:	9016      	str	r0, [sp, #88]	; 0x58
 8006d16:	e7ba      	b.n	8006c8e <_dtoa_r+0x192>
 8006d18:	920c      	str	r2, [sp, #48]	; 0x30
 8006d1a:	e7c3      	b.n	8006ca4 <_dtoa_r+0x1a8>
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	9a03      	ldr	r2, [sp, #12]
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	930a      	str	r3, [sp, #40]	; 0x28
 8006d24:	4253      	negs	r3, r2
 8006d26:	930d      	str	r3, [sp, #52]	; 0x34
 8006d28:	2300      	movs	r3, #0
 8006d2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d2c:	e7c5      	b.n	8006cba <_dtoa_r+0x1be>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dc13      	bgt.n	8006d64 <_dtoa_r+0x268>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	001a      	movs	r2, r3
 8006d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d42:	9307      	str	r3, [sp, #28]
 8006d44:	9223      	str	r2, [sp, #140]	; 0x8c
 8006d46:	e00d      	b.n	8006d64 <_dtoa_r+0x268>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e7f1      	b.n	8006d30 <_dtoa_r+0x234>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d52:	4694      	mov	ip, r2
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	4463      	add	r3, ip
 8006d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	9307      	str	r3, [sp, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	dc00      	bgt.n	8006d64 <_dtoa_r+0x268>
 8006d62:	2301      	movs	r3, #1
 8006d64:	9a04      	ldr	r2, [sp, #16]
 8006d66:	2100      	movs	r1, #0
 8006d68:	69d0      	ldr	r0, [r2, #28]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	0015      	movs	r5, r2
 8006d6e:	3514      	adds	r5, #20
 8006d70:	429d      	cmp	r5, r3
 8006d72:	d91b      	bls.n	8006dac <_dtoa_r+0x2b0>
 8006d74:	6041      	str	r1, [r0, #4]
 8006d76:	9804      	ldr	r0, [sp, #16]
 8006d78:	f000 fdd6 	bl	8007928 <_Balloc>
 8006d7c:	9006      	str	r0, [sp, #24]
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d117      	bne.n	8006db2 <_dtoa_r+0x2b6>
 8006d82:	21b0      	movs	r1, #176	; 0xb0
 8006d84:	4b42      	ldr	r3, [pc, #264]	; (8006e90 <_dtoa_r+0x394>)
 8006d86:	482e      	ldr	r0, [pc, #184]	; (8006e40 <_dtoa_r+0x344>)
 8006d88:	9a06      	ldr	r2, [sp, #24]
 8006d8a:	31ff      	adds	r1, #255	; 0xff
 8006d8c:	e6cb      	b.n	8006b26 <_dtoa_r+0x2a>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e7dd      	b.n	8006d4e <_dtoa_r+0x252>
 8006d92:	2300      	movs	r3, #0
 8006d94:	940f      	str	r4, [sp, #60]	; 0x3c
 8006d96:	9322      	str	r3, [sp, #136]	; 0x88
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d9c:	9307      	str	r3, [sp, #28]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	3313      	adds	r3, #19
 8006da2:	e7cf      	b.n	8006d44 <_dtoa_r+0x248>
 8006da4:	2301      	movs	r3, #1
 8006da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006da8:	3b02      	subs	r3, #2
 8006daa:	e7f6      	b.n	8006d9a <_dtoa_r+0x29e>
 8006dac:	3101      	adds	r1, #1
 8006dae:	0052      	lsls	r2, r2, #1
 8006db0:	e7dc      	b.n	8006d6c <_dtoa_r+0x270>
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	9a06      	ldr	r2, [sp, #24]
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	9b07      	ldr	r3, [sp, #28]
 8006dbc:	2b0e      	cmp	r3, #14
 8006dbe:	d900      	bls.n	8006dc2 <_dtoa_r+0x2c6>
 8006dc0:	e0e5      	b.n	8006f8e <_dtoa_r+0x492>
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	d100      	bne.n	8006dc8 <_dtoa_r+0x2cc>
 8006dc6:	e0e2      	b.n	8006f8e <_dtoa_r+0x492>
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dd64      	ble.n	8006e98 <_dtoa_r+0x39c>
 8006dce:	210f      	movs	r1, #15
 8006dd0:	9a03      	ldr	r2, [sp, #12]
 8006dd2:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <_dtoa_r+0x384>)
 8006dd4:	400a      	ands	r2, r1
 8006dd6:	00d2      	lsls	r2, r2, #3
 8006dd8:	189b      	adds	r3, r3, r2
 8006dda:	681e      	ldr	r6, [r3, #0]
 8006ddc:	685f      	ldr	r7, [r3, #4]
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	2402      	movs	r4, #2
 8006de2:	111d      	asrs	r5, r3, #4
 8006de4:	05db      	lsls	r3, r3, #23
 8006de6:	d50a      	bpl.n	8006dfe <_dtoa_r+0x302>
 8006de8:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <_dtoa_r+0x398>)
 8006dea:	400d      	ands	r5, r1
 8006dec:	6a1a      	ldr	r2, [r3, #32]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006df2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006df4:	f7fa fc6e 	bl	80016d4 <__aeabi_ddiv>
 8006df8:	9008      	str	r0, [sp, #32]
 8006dfa:	9109      	str	r1, [sp, #36]	; 0x24
 8006dfc:	3401      	adds	r4, #1
 8006dfe:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <_dtoa_r+0x398>)
 8006e00:	930e      	str	r3, [sp, #56]	; 0x38
 8006e02:	2d00      	cmp	r5, #0
 8006e04:	d108      	bne.n	8006e18 <_dtoa_r+0x31c>
 8006e06:	9808      	ldr	r0, [sp, #32]
 8006e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e0a:	0032      	movs	r2, r6
 8006e0c:	003b      	movs	r3, r7
 8006e0e:	f7fa fc61 	bl	80016d4 <__aeabi_ddiv>
 8006e12:	9008      	str	r0, [sp, #32]
 8006e14:	9109      	str	r1, [sp, #36]	; 0x24
 8006e16:	e05a      	b.n	8006ece <_dtoa_r+0x3d2>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	421d      	tst	r5, r3
 8006e1c:	d009      	beq.n	8006e32 <_dtoa_r+0x336>
 8006e1e:	18e4      	adds	r4, r4, r3
 8006e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e22:	0030      	movs	r0, r6
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	0039      	movs	r1, r7
 8006e2a:	f7fb f84d 	bl	8001ec8 <__aeabi_dmul>
 8006e2e:	0006      	movs	r6, r0
 8006e30:	000f      	movs	r7, r1
 8006e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e34:	106d      	asrs	r5, r5, #1
 8006e36:	3308      	adds	r3, #8
 8006e38:	e7e2      	b.n	8006e00 <_dtoa_r+0x304>
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	08008d49 	.word	0x08008d49
 8006e40:	08008d60 	.word	0x08008d60
 8006e44:	7ff00000 	.word	0x7ff00000
 8006e48:	0000270f 	.word	0x0000270f
 8006e4c:	08008d45 	.word	0x08008d45
 8006e50:	08008d48 	.word	0x08008d48
 8006e54:	08008d18 	.word	0x08008d18
 8006e58:	08008d19 	.word	0x08008d19
 8006e5c:	3ff00000 	.word	0x3ff00000
 8006e60:	fffffc01 	.word	0xfffffc01
 8006e64:	3ff80000 	.word	0x3ff80000
 8006e68:	636f4361 	.word	0x636f4361
 8006e6c:	3fd287a7 	.word	0x3fd287a7
 8006e70:	8b60c8b3 	.word	0x8b60c8b3
 8006e74:	3fc68a28 	.word	0x3fc68a28
 8006e78:	509f79fb 	.word	0x509f79fb
 8006e7c:	3fd34413 	.word	0x3fd34413
 8006e80:	08008e50 	.word	0x08008e50
 8006e84:	00000432 	.word	0x00000432
 8006e88:	00000412 	.word	0x00000412
 8006e8c:	fe100000 	.word	0xfe100000
 8006e90:	08008db8 	.word	0x08008db8
 8006e94:	08008e28 	.word	0x08008e28
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	2402      	movs	r4, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d016      	beq.n	8006ece <_dtoa_r+0x3d2>
 8006ea0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006ea2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ea4:	220f      	movs	r2, #15
 8006ea6:	425d      	negs	r5, r3
 8006ea8:	402a      	ands	r2, r5
 8006eaa:	4bdd      	ldr	r3, [pc, #884]	; (8007220 <_dtoa_r+0x724>)
 8006eac:	00d2      	lsls	r2, r2, #3
 8006eae:	189b      	adds	r3, r3, r2
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f7fb f808 	bl	8001ec8 <__aeabi_dmul>
 8006eb8:	2701      	movs	r7, #1
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9008      	str	r0, [sp, #32]
 8006ebe:	9109      	str	r1, [sp, #36]	; 0x24
 8006ec0:	4ed8      	ldr	r6, [pc, #864]	; (8007224 <_dtoa_r+0x728>)
 8006ec2:	112d      	asrs	r5, r5, #4
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	d000      	beq.n	8006eca <_dtoa_r+0x3ce>
 8006ec8:	e091      	b.n	8006fee <_dtoa_r+0x4f2>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1a1      	bne.n	8006e12 <_dtoa_r+0x316>
 8006ece:	9e08      	ldr	r6, [sp, #32]
 8006ed0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ed2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d100      	bne.n	8006eda <_dtoa_r+0x3de>
 8006ed8:	e094      	b.n	8007004 <_dtoa_r+0x508>
 8006eda:	2200      	movs	r2, #0
 8006edc:	0030      	movs	r0, r6
 8006ede:	0039      	movs	r1, r7
 8006ee0:	4bd1      	ldr	r3, [pc, #836]	; (8007228 <_dtoa_r+0x72c>)
 8006ee2:	f7f9 fab9 	bl	8000458 <__aeabi_dcmplt>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d100      	bne.n	8006eec <_dtoa_r+0x3f0>
 8006eea:	e08b      	b.n	8007004 <_dtoa_r+0x508>
 8006eec:	9b07      	ldr	r3, [sp, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d100      	bne.n	8006ef4 <_dtoa_r+0x3f8>
 8006ef2:	e087      	b.n	8007004 <_dtoa_r+0x508>
 8006ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd45      	ble.n	8006f86 <_dtoa_r+0x48a>
 8006efa:	9b03      	ldr	r3, [sp, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	3b01      	subs	r3, #1
 8006f00:	930e      	str	r3, [sp, #56]	; 0x38
 8006f02:	0030      	movs	r0, r6
 8006f04:	4bc9      	ldr	r3, [pc, #804]	; (800722c <_dtoa_r+0x730>)
 8006f06:	0039      	movs	r1, r7
 8006f08:	f7fa ffde 	bl	8001ec8 <__aeabi_dmul>
 8006f0c:	9008      	str	r0, [sp, #32]
 8006f0e:	9109      	str	r1, [sp, #36]	; 0x24
 8006f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f12:	3401      	adds	r4, #1
 8006f14:	0020      	movs	r0, r4
 8006f16:	9e08      	ldr	r6, [sp, #32]
 8006f18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f1a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f1c:	f7fb fe6c 	bl	8002bf8 <__aeabi_i2d>
 8006f20:	0032      	movs	r2, r6
 8006f22:	003b      	movs	r3, r7
 8006f24:	f7fa ffd0 	bl	8001ec8 <__aeabi_dmul>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4bc1      	ldr	r3, [pc, #772]	; (8007230 <_dtoa_r+0x734>)
 8006f2c:	f7fa f872 	bl	8001014 <__aeabi_dadd>
 8006f30:	4ac0      	ldr	r2, [pc, #768]	; (8007234 <_dtoa_r+0x738>)
 8006f32:	9014      	str	r0, [sp, #80]	; 0x50
 8006f34:	9115      	str	r1, [sp, #84]	; 0x54
 8006f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8006f3a:	4694      	mov	ip, r2
 8006f3c:	9308      	str	r3, [sp, #32]
 8006f3e:	9409      	str	r4, [sp, #36]	; 0x24
 8006f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f42:	4463      	add	r3, ip
 8006f44:	9318      	str	r3, [sp, #96]	; 0x60
 8006f46:	9309      	str	r3, [sp, #36]	; 0x24
 8006f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d15e      	bne.n	800700c <_dtoa_r+0x510>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	4bb9      	ldr	r3, [pc, #740]	; (8007238 <_dtoa_r+0x73c>)
 8006f52:	0030      	movs	r0, r6
 8006f54:	0039      	movs	r1, r7
 8006f56:	f7fb fa79 	bl	800244c <__aeabi_dsub>
 8006f5a:	9a08      	ldr	r2, [sp, #32]
 8006f5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006f5e:	0004      	movs	r4, r0
 8006f60:	000d      	movs	r5, r1
 8006f62:	f7f9 fa8d 	bl	8000480 <__aeabi_dcmpgt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d000      	beq.n	8006f6c <_dtoa_r+0x470>
 8006f6a:	e2b3      	b.n	80074d4 <_dtoa_r+0x9d8>
 8006f6c:	48b3      	ldr	r0, [pc, #716]	; (800723c <_dtoa_r+0x740>)
 8006f6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006f70:	4684      	mov	ip, r0
 8006f72:	4461      	add	r1, ip
 8006f74:	000b      	movs	r3, r1
 8006f76:	0020      	movs	r0, r4
 8006f78:	0029      	movs	r1, r5
 8006f7a:	9a08      	ldr	r2, [sp, #32]
 8006f7c:	f7f9 fa6c 	bl	8000458 <__aeabi_dcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d000      	beq.n	8006f86 <_dtoa_r+0x48a>
 8006f84:	e2a3      	b.n	80074ce <_dtoa_r+0x9d2>
 8006f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f88:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	9409      	str	r4, [sp, #36]	; 0x24
 8006f8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da00      	bge.n	8006f96 <_dtoa_r+0x49a>
 8006f94:	e179      	b.n	800728a <_dtoa_r+0x78e>
 8006f96:	9a03      	ldr	r2, [sp, #12]
 8006f98:	2a0e      	cmp	r2, #14
 8006f9a:	dd00      	ble.n	8006f9e <_dtoa_r+0x4a2>
 8006f9c:	e175      	b.n	800728a <_dtoa_r+0x78e>
 8006f9e:	4ba0      	ldr	r3, [pc, #640]	; (8007220 <_dtoa_r+0x724>)
 8006fa0:	00d2      	lsls	r2, r2, #3
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	681e      	ldr	r6, [r3, #0]
 8006fa6:	685f      	ldr	r7, [r3, #4]
 8006fa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	db00      	blt.n	8006fb0 <_dtoa_r+0x4b4>
 8006fae:	e0e5      	b.n	800717c <_dtoa_r+0x680>
 8006fb0:	9b07      	ldr	r3, [sp, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dd00      	ble.n	8006fb8 <_dtoa_r+0x4bc>
 8006fb6:	e0e1      	b.n	800717c <_dtoa_r+0x680>
 8006fb8:	d000      	beq.n	8006fbc <_dtoa_r+0x4c0>
 8006fba:	e288      	b.n	80074ce <_dtoa_r+0x9d2>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	0030      	movs	r0, r6
 8006fc0:	0039      	movs	r1, r7
 8006fc2:	4b9d      	ldr	r3, [pc, #628]	; (8007238 <_dtoa_r+0x73c>)
 8006fc4:	f7fa ff80 	bl	8001ec8 <__aeabi_dmul>
 8006fc8:	9a08      	ldr	r2, [sp, #32]
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	f7f9 fa62 	bl	8000494 <__aeabi_dcmpge>
 8006fd0:	9e07      	ldr	r6, [sp, #28]
 8006fd2:	0037      	movs	r7, r6
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d000      	beq.n	8006fda <_dtoa_r+0x4de>
 8006fd8:	e25f      	b.n	800749a <_dtoa_r+0x99e>
 8006fda:	9b06      	ldr	r3, [sp, #24]
 8006fdc:	9a06      	ldr	r2, [sp, #24]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	9308      	str	r3, [sp, #32]
 8006fe2:	2331      	movs	r3, #49	; 0x31
 8006fe4:	7013      	strb	r3, [r2, #0]
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	9303      	str	r3, [sp, #12]
 8006fec:	e25a      	b.n	80074a4 <_dtoa_r+0x9a8>
 8006fee:	423d      	tst	r5, r7
 8006ff0:	d005      	beq.n	8006ffe <_dtoa_r+0x502>
 8006ff2:	6832      	ldr	r2, [r6, #0]
 8006ff4:	6873      	ldr	r3, [r6, #4]
 8006ff6:	f7fa ff67 	bl	8001ec8 <__aeabi_dmul>
 8006ffa:	003b      	movs	r3, r7
 8006ffc:	3401      	adds	r4, #1
 8006ffe:	106d      	asrs	r5, r5, #1
 8007000:	3608      	adds	r6, #8
 8007002:	e75f      	b.n	8006ec4 <_dtoa_r+0x3c8>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	930e      	str	r3, [sp, #56]	; 0x38
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	e783      	b.n	8006f14 <_dtoa_r+0x418>
 800700c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800700e:	4b84      	ldr	r3, [pc, #528]	; (8007220 <_dtoa_r+0x724>)
 8007010:	3a01      	subs	r2, #1
 8007012:	00d2      	lsls	r2, r2, #3
 8007014:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007016:	189b      	adds	r3, r3, r2
 8007018:	9c08      	ldr	r4, [sp, #32]
 800701a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	2900      	cmp	r1, #0
 8007022:	d051      	beq.n	80070c8 <_dtoa_r+0x5cc>
 8007024:	2000      	movs	r0, #0
 8007026:	4986      	ldr	r1, [pc, #536]	; (8007240 <_dtoa_r+0x744>)
 8007028:	f7fa fb54 	bl	80016d4 <__aeabi_ddiv>
 800702c:	0022      	movs	r2, r4
 800702e:	002b      	movs	r3, r5
 8007030:	f7fb fa0c 	bl	800244c <__aeabi_dsub>
 8007034:	9a06      	ldr	r2, [sp, #24]
 8007036:	0004      	movs	r4, r0
 8007038:	4694      	mov	ip, r2
 800703a:	000d      	movs	r5, r1
 800703c:	9b06      	ldr	r3, [sp, #24]
 800703e:	9314      	str	r3, [sp, #80]	; 0x50
 8007040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007042:	4463      	add	r3, ip
 8007044:	9318      	str	r3, [sp, #96]	; 0x60
 8007046:	0039      	movs	r1, r7
 8007048:	0030      	movs	r0, r6
 800704a:	f7fb fd9f 	bl	8002b8c <__aeabi_d2iz>
 800704e:	9012      	str	r0, [sp, #72]	; 0x48
 8007050:	f7fb fdd2 	bl	8002bf8 <__aeabi_i2d>
 8007054:	0002      	movs	r2, r0
 8007056:	000b      	movs	r3, r1
 8007058:	0030      	movs	r0, r6
 800705a:	0039      	movs	r1, r7
 800705c:	f7fb f9f6 	bl	800244c <__aeabi_dsub>
 8007060:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007062:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007064:	3301      	adds	r3, #1
 8007066:	9308      	str	r3, [sp, #32]
 8007068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800706a:	0006      	movs	r6, r0
 800706c:	3330      	adds	r3, #48	; 0x30
 800706e:	7013      	strb	r3, [r2, #0]
 8007070:	0022      	movs	r2, r4
 8007072:	002b      	movs	r3, r5
 8007074:	000f      	movs	r7, r1
 8007076:	f7f9 f9ef 	bl	8000458 <__aeabi_dcmplt>
 800707a:	2800      	cmp	r0, #0
 800707c:	d174      	bne.n	8007168 <_dtoa_r+0x66c>
 800707e:	0032      	movs	r2, r6
 8007080:	003b      	movs	r3, r7
 8007082:	2000      	movs	r0, #0
 8007084:	4968      	ldr	r1, [pc, #416]	; (8007228 <_dtoa_r+0x72c>)
 8007086:	f7fb f9e1 	bl	800244c <__aeabi_dsub>
 800708a:	0022      	movs	r2, r4
 800708c:	002b      	movs	r3, r5
 800708e:	f7f9 f9e3 	bl	8000458 <__aeabi_dcmplt>
 8007092:	2800      	cmp	r0, #0
 8007094:	d000      	beq.n	8007098 <_dtoa_r+0x59c>
 8007096:	e0d7      	b.n	8007248 <_dtoa_r+0x74c>
 8007098:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800709a:	9a08      	ldr	r2, [sp, #32]
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <_dtoa_r+0x5a6>
 80070a0:	e771      	b.n	8006f86 <_dtoa_r+0x48a>
 80070a2:	2200      	movs	r2, #0
 80070a4:	0020      	movs	r0, r4
 80070a6:	0029      	movs	r1, r5
 80070a8:	4b60      	ldr	r3, [pc, #384]	; (800722c <_dtoa_r+0x730>)
 80070aa:	f7fa ff0d 	bl	8001ec8 <__aeabi_dmul>
 80070ae:	4b5f      	ldr	r3, [pc, #380]	; (800722c <_dtoa_r+0x730>)
 80070b0:	0004      	movs	r4, r0
 80070b2:	000d      	movs	r5, r1
 80070b4:	0030      	movs	r0, r6
 80070b6:	0039      	movs	r1, r7
 80070b8:	2200      	movs	r2, #0
 80070ba:	f7fa ff05 	bl	8001ec8 <__aeabi_dmul>
 80070be:	9b08      	ldr	r3, [sp, #32]
 80070c0:	0006      	movs	r6, r0
 80070c2:	000f      	movs	r7, r1
 80070c4:	9314      	str	r3, [sp, #80]	; 0x50
 80070c6:	e7be      	b.n	8007046 <_dtoa_r+0x54a>
 80070c8:	0020      	movs	r0, r4
 80070ca:	0029      	movs	r1, r5
 80070cc:	f7fa fefc 	bl	8001ec8 <__aeabi_dmul>
 80070d0:	9a06      	ldr	r2, [sp, #24]
 80070d2:	9b06      	ldr	r3, [sp, #24]
 80070d4:	4694      	mov	ip, r2
 80070d6:	9308      	str	r3, [sp, #32]
 80070d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070da:	9014      	str	r0, [sp, #80]	; 0x50
 80070dc:	9115      	str	r1, [sp, #84]	; 0x54
 80070de:	4463      	add	r3, ip
 80070e0:	9319      	str	r3, [sp, #100]	; 0x64
 80070e2:	0030      	movs	r0, r6
 80070e4:	0039      	movs	r1, r7
 80070e6:	f7fb fd51 	bl	8002b8c <__aeabi_d2iz>
 80070ea:	9018      	str	r0, [sp, #96]	; 0x60
 80070ec:	f7fb fd84 	bl	8002bf8 <__aeabi_i2d>
 80070f0:	0002      	movs	r2, r0
 80070f2:	000b      	movs	r3, r1
 80070f4:	0030      	movs	r0, r6
 80070f6:	0039      	movs	r1, r7
 80070f8:	f7fb f9a8 	bl	800244c <__aeabi_dsub>
 80070fc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80070fe:	9b08      	ldr	r3, [sp, #32]
 8007100:	3630      	adds	r6, #48	; 0x30
 8007102:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007104:	701e      	strb	r6, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	0004      	movs	r4, r0
 800710a:	000d      	movs	r5, r1
 800710c:	9308      	str	r3, [sp, #32]
 800710e:	4293      	cmp	r3, r2
 8007110:	d12d      	bne.n	800716e <_dtoa_r+0x672>
 8007112:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007114:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007116:	9a06      	ldr	r2, [sp, #24]
 8007118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800711a:	4694      	mov	ip, r2
 800711c:	4463      	add	r3, ip
 800711e:	2200      	movs	r2, #0
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	4b47      	ldr	r3, [pc, #284]	; (8007240 <_dtoa_r+0x744>)
 8007124:	f7f9 ff76 	bl	8001014 <__aeabi_dadd>
 8007128:	0002      	movs	r2, r0
 800712a:	000b      	movs	r3, r1
 800712c:	0020      	movs	r0, r4
 800712e:	0029      	movs	r1, r5
 8007130:	f7f9 f9a6 	bl	8000480 <__aeabi_dcmpgt>
 8007134:	2800      	cmp	r0, #0
 8007136:	d000      	beq.n	800713a <_dtoa_r+0x63e>
 8007138:	e086      	b.n	8007248 <_dtoa_r+0x74c>
 800713a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800713c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800713e:	2000      	movs	r0, #0
 8007140:	493f      	ldr	r1, [pc, #252]	; (8007240 <_dtoa_r+0x744>)
 8007142:	f7fb f983 	bl	800244c <__aeabi_dsub>
 8007146:	0002      	movs	r2, r0
 8007148:	000b      	movs	r3, r1
 800714a:	0020      	movs	r0, r4
 800714c:	0029      	movs	r1, r5
 800714e:	f7f9 f983 	bl	8000458 <__aeabi_dcmplt>
 8007152:	2800      	cmp	r0, #0
 8007154:	d100      	bne.n	8007158 <_dtoa_r+0x65c>
 8007156:	e716      	b.n	8006f86 <_dtoa_r+0x48a>
 8007158:	9b08      	ldr	r3, [sp, #32]
 800715a:	001a      	movs	r2, r3
 800715c:	3a01      	subs	r2, #1
 800715e:	9208      	str	r2, [sp, #32]
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	2a30      	cmp	r2, #48	; 0x30
 8007164:	d0f8      	beq.n	8007158 <_dtoa_r+0x65c>
 8007166:	9308      	str	r3, [sp, #32]
 8007168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800716a:	9303      	str	r3, [sp, #12]
 800716c:	e046      	b.n	80071fc <_dtoa_r+0x700>
 800716e:	2200      	movs	r2, #0
 8007170:	4b2e      	ldr	r3, [pc, #184]	; (800722c <_dtoa_r+0x730>)
 8007172:	f7fa fea9 	bl	8001ec8 <__aeabi_dmul>
 8007176:	0006      	movs	r6, r0
 8007178:	000f      	movs	r7, r1
 800717a:	e7b2      	b.n	80070e2 <_dtoa_r+0x5e6>
 800717c:	9b06      	ldr	r3, [sp, #24]
 800717e:	9a06      	ldr	r2, [sp, #24]
 8007180:	930a      	str	r3, [sp, #40]	; 0x28
 8007182:	9b07      	ldr	r3, [sp, #28]
 8007184:	9c08      	ldr	r4, [sp, #32]
 8007186:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007188:	3b01      	subs	r3, #1
 800718a:	189b      	adds	r3, r3, r2
 800718c:	930b      	str	r3, [sp, #44]	; 0x2c
 800718e:	0032      	movs	r2, r6
 8007190:	003b      	movs	r3, r7
 8007192:	0020      	movs	r0, r4
 8007194:	0029      	movs	r1, r5
 8007196:	f7fa fa9d 	bl	80016d4 <__aeabi_ddiv>
 800719a:	f7fb fcf7 	bl	8002b8c <__aeabi_d2iz>
 800719e:	9007      	str	r0, [sp, #28]
 80071a0:	f7fb fd2a 	bl	8002bf8 <__aeabi_i2d>
 80071a4:	0032      	movs	r2, r6
 80071a6:	003b      	movs	r3, r7
 80071a8:	f7fa fe8e 	bl	8001ec8 <__aeabi_dmul>
 80071ac:	0002      	movs	r2, r0
 80071ae:	000b      	movs	r3, r1
 80071b0:	0020      	movs	r0, r4
 80071b2:	0029      	movs	r1, r5
 80071b4:	f7fb f94a 	bl	800244c <__aeabi_dsub>
 80071b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ba:	001a      	movs	r2, r3
 80071bc:	3201      	adds	r2, #1
 80071be:	920a      	str	r2, [sp, #40]	; 0x28
 80071c0:	9208      	str	r2, [sp, #32]
 80071c2:	9a07      	ldr	r2, [sp, #28]
 80071c4:	3230      	adds	r2, #48	; 0x30
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d14f      	bne.n	800726e <_dtoa_r+0x772>
 80071ce:	0002      	movs	r2, r0
 80071d0:	000b      	movs	r3, r1
 80071d2:	f7f9 ff1f 	bl	8001014 <__aeabi_dadd>
 80071d6:	0032      	movs	r2, r6
 80071d8:	003b      	movs	r3, r7
 80071da:	0004      	movs	r4, r0
 80071dc:	000d      	movs	r5, r1
 80071de:	f7f9 f94f 	bl	8000480 <__aeabi_dcmpgt>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d12e      	bne.n	8007244 <_dtoa_r+0x748>
 80071e6:	0032      	movs	r2, r6
 80071e8:	003b      	movs	r3, r7
 80071ea:	0020      	movs	r0, r4
 80071ec:	0029      	movs	r1, r5
 80071ee:	f7f9 f92d 	bl	800044c <__aeabi_dcmpeq>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d002      	beq.n	80071fc <_dtoa_r+0x700>
 80071f6:	9b07      	ldr	r3, [sp, #28]
 80071f8:	07de      	lsls	r6, r3, #31
 80071fa:	d423      	bmi.n	8007244 <_dtoa_r+0x748>
 80071fc:	9905      	ldr	r1, [sp, #20]
 80071fe:	9804      	ldr	r0, [sp, #16]
 8007200:	f000 fbd6 	bl	80079b0 <_Bfree>
 8007204:	2300      	movs	r3, #0
 8007206:	9a08      	ldr	r2, [sp, #32]
 8007208:	7013      	strb	r3, [r2, #0]
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800720e:	3301      	adds	r3, #1
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007214:	2b00      	cmp	r3, #0
 8007216:	d100      	bne.n	800721a <_dtoa_r+0x71e>
 8007218:	e4ba      	b.n	8006b90 <_dtoa_r+0x94>
 800721a:	9a08      	ldr	r2, [sp, #32]
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e4b7      	b.n	8006b90 <_dtoa_r+0x94>
 8007220:	08008e50 	.word	0x08008e50
 8007224:	08008e28 	.word	0x08008e28
 8007228:	3ff00000 	.word	0x3ff00000
 800722c:	40240000 	.word	0x40240000
 8007230:	401c0000 	.word	0x401c0000
 8007234:	fcc00000 	.word	0xfcc00000
 8007238:	40140000 	.word	0x40140000
 800723c:	7cc00000 	.word	0x7cc00000
 8007240:	3fe00000 	.word	0x3fe00000
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	930e      	str	r3, [sp, #56]	; 0x38
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	9308      	str	r3, [sp, #32]
 800724c:	3b01      	subs	r3, #1
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	2a39      	cmp	r2, #57	; 0x39
 8007252:	d108      	bne.n	8007266 <_dtoa_r+0x76a>
 8007254:	9a06      	ldr	r2, [sp, #24]
 8007256:	429a      	cmp	r2, r3
 8007258:	d1f7      	bne.n	800724a <_dtoa_r+0x74e>
 800725a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800725c:	9906      	ldr	r1, [sp, #24]
 800725e:	3201      	adds	r2, #1
 8007260:	920e      	str	r2, [sp, #56]	; 0x38
 8007262:	2230      	movs	r2, #48	; 0x30
 8007264:	700a      	strb	r2, [r1, #0]
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	3201      	adds	r2, #1
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e77c      	b.n	8007168 <_dtoa_r+0x66c>
 800726e:	2200      	movs	r2, #0
 8007270:	4ba9      	ldr	r3, [pc, #676]	; (8007518 <_dtoa_r+0xa1c>)
 8007272:	f7fa fe29 	bl	8001ec8 <__aeabi_dmul>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	0004      	movs	r4, r0
 800727c:	000d      	movs	r5, r1
 800727e:	f7f9 f8e5 	bl	800044c <__aeabi_dcmpeq>
 8007282:	2800      	cmp	r0, #0
 8007284:	d100      	bne.n	8007288 <_dtoa_r+0x78c>
 8007286:	e782      	b.n	800718e <_dtoa_r+0x692>
 8007288:	e7b8      	b.n	80071fc <_dtoa_r+0x700>
 800728a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800728c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800728e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007290:	2f00      	cmp	r7, #0
 8007292:	d012      	beq.n	80072ba <_dtoa_r+0x7be>
 8007294:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007296:	2a01      	cmp	r2, #1
 8007298:	dc6e      	bgt.n	8007378 <_dtoa_r+0x87c>
 800729a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800729c:	2a00      	cmp	r2, #0
 800729e:	d065      	beq.n	800736c <_dtoa_r+0x870>
 80072a0:	4a9e      	ldr	r2, [pc, #632]	; (800751c <_dtoa_r+0xa20>)
 80072a2:	189b      	adds	r3, r3, r2
 80072a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072a6:	2101      	movs	r1, #1
 80072a8:	18d2      	adds	r2, r2, r3
 80072aa:	920a      	str	r2, [sp, #40]	; 0x28
 80072ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ae:	9804      	ldr	r0, [sp, #16]
 80072b0:	18d3      	adds	r3, r2, r3
 80072b2:	930c      	str	r3, [sp, #48]	; 0x30
 80072b4:	f000 fc2c 	bl	8007b10 <__i2b>
 80072b8:	0007      	movs	r7, r0
 80072ba:	2c00      	cmp	r4, #0
 80072bc:	d00e      	beq.n	80072dc <_dtoa_r+0x7e0>
 80072be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	dd0b      	ble.n	80072dc <_dtoa_r+0x7e0>
 80072c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c6:	0023      	movs	r3, r4
 80072c8:	4294      	cmp	r4, r2
 80072ca:	dd00      	ble.n	80072ce <_dtoa_r+0x7d2>
 80072cc:	0013      	movs	r3, r2
 80072ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072d0:	1ae4      	subs	r4, r4, r3
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	920a      	str	r2, [sp, #40]	; 0x28
 80072d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	930c      	str	r3, [sp, #48]	; 0x30
 80072dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01e      	beq.n	8007320 <_dtoa_r+0x824>
 80072e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d05c      	beq.n	80073a2 <_dtoa_r+0x8a6>
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	dd10      	ble.n	800730e <_dtoa_r+0x812>
 80072ec:	0039      	movs	r1, r7
 80072ee:	002a      	movs	r2, r5
 80072f0:	9804      	ldr	r0, [sp, #16]
 80072f2:	f000 fcd5 	bl	8007ca0 <__pow5mult>
 80072f6:	9a05      	ldr	r2, [sp, #20]
 80072f8:	0001      	movs	r1, r0
 80072fa:	0007      	movs	r7, r0
 80072fc:	9804      	ldr	r0, [sp, #16]
 80072fe:	f000 fc1f 	bl	8007b40 <__multiply>
 8007302:	0006      	movs	r6, r0
 8007304:	9905      	ldr	r1, [sp, #20]
 8007306:	9804      	ldr	r0, [sp, #16]
 8007308:	f000 fb52 	bl	80079b0 <_Bfree>
 800730c:	9605      	str	r6, [sp, #20]
 800730e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007310:	1b5a      	subs	r2, r3, r5
 8007312:	42ab      	cmp	r3, r5
 8007314:	d004      	beq.n	8007320 <_dtoa_r+0x824>
 8007316:	9905      	ldr	r1, [sp, #20]
 8007318:	9804      	ldr	r0, [sp, #16]
 800731a:	f000 fcc1 	bl	8007ca0 <__pow5mult>
 800731e:	9005      	str	r0, [sp, #20]
 8007320:	2101      	movs	r1, #1
 8007322:	9804      	ldr	r0, [sp, #16]
 8007324:	f000 fbf4 	bl	8007b10 <__i2b>
 8007328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800732a:	0006      	movs	r6, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd3a      	ble.n	80073a6 <_dtoa_r+0x8aa>
 8007330:	001a      	movs	r2, r3
 8007332:	0001      	movs	r1, r0
 8007334:	9804      	ldr	r0, [sp, #16]
 8007336:	f000 fcb3 	bl	8007ca0 <__pow5mult>
 800733a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800733c:	0006      	movs	r6, r0
 800733e:	2500      	movs	r5, #0
 8007340:	2b01      	cmp	r3, #1
 8007342:	dc38      	bgt.n	80073b6 <_dtoa_r+0x8ba>
 8007344:	2500      	movs	r5, #0
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	42ab      	cmp	r3, r5
 800734a:	d130      	bne.n	80073ae <_dtoa_r+0x8b2>
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	031b      	lsls	r3, r3, #12
 8007350:	42ab      	cmp	r3, r5
 8007352:	d12c      	bne.n	80073ae <_dtoa_r+0x8b2>
 8007354:	4b72      	ldr	r3, [pc, #456]	; (8007520 <_dtoa_r+0xa24>)
 8007356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007358:	4213      	tst	r3, r2
 800735a:	d028      	beq.n	80073ae <_dtoa_r+0x8b2>
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	3501      	adds	r5, #1
 8007360:	3301      	adds	r3, #1
 8007362:	930a      	str	r3, [sp, #40]	; 0x28
 8007364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007366:	3301      	adds	r3, #1
 8007368:	930c      	str	r3, [sp, #48]	; 0x30
 800736a:	e020      	b.n	80073ae <_dtoa_r+0x8b2>
 800736c:	2336      	movs	r3, #54	; 0x36
 800736e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007370:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007372:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	e795      	b.n	80072a4 <_dtoa_r+0x7a8>
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	1e5d      	subs	r5, r3, #1
 800737c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800737e:	42ab      	cmp	r3, r5
 8007380:	db07      	blt.n	8007392 <_dtoa_r+0x896>
 8007382:	1b5d      	subs	r5, r3, r5
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007388:	2b00      	cmp	r3, #0
 800738a:	da8b      	bge.n	80072a4 <_dtoa_r+0x7a8>
 800738c:	1ae4      	subs	r4, r4, r3
 800738e:	2300      	movs	r3, #0
 8007390:	e788      	b.n	80072a4 <_dtoa_r+0x7a8>
 8007392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007394:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007396:	1aeb      	subs	r3, r5, r3
 8007398:	18d3      	adds	r3, r2, r3
 800739a:	950d      	str	r5, [sp, #52]	; 0x34
 800739c:	9313      	str	r3, [sp, #76]	; 0x4c
 800739e:	2500      	movs	r5, #0
 80073a0:	e7f0      	b.n	8007384 <_dtoa_r+0x888>
 80073a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073a4:	e7b7      	b.n	8007316 <_dtoa_r+0x81a>
 80073a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073a8:	2500      	movs	r5, #0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	ddca      	ble.n	8007344 <_dtoa_r+0x848>
 80073ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073b0:	2001      	movs	r0, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d008      	beq.n	80073c8 <_dtoa_r+0x8cc>
 80073b6:	6933      	ldr	r3, [r6, #16]
 80073b8:	3303      	adds	r3, #3
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	18f3      	adds	r3, r6, r3
 80073be:	6858      	ldr	r0, [r3, #4]
 80073c0:	f000 fb5e 	bl	8007a80 <__hi0bits>
 80073c4:	2320      	movs	r3, #32
 80073c6:	1a18      	subs	r0, r3, r0
 80073c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ca:	1818      	adds	r0, r3, r0
 80073cc:	0002      	movs	r2, r0
 80073ce:	231f      	movs	r3, #31
 80073d0:	401a      	ands	r2, r3
 80073d2:	4218      	tst	r0, r3
 80073d4:	d047      	beq.n	8007466 <_dtoa_r+0x96a>
 80073d6:	3301      	adds	r3, #1
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	2b04      	cmp	r3, #4
 80073dc:	dd3f      	ble.n	800745e <_dtoa_r+0x962>
 80073de:	231c      	movs	r3, #28
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e4:	18e4      	adds	r4, r4, r3
 80073e6:	18d2      	adds	r2, r2, r3
 80073e8:	920a      	str	r2, [sp, #40]	; 0x28
 80073ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ec:	18d3      	adds	r3, r2, r3
 80073ee:	930c      	str	r3, [sp, #48]	; 0x30
 80073f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd05      	ble.n	8007402 <_dtoa_r+0x906>
 80073f6:	001a      	movs	r2, r3
 80073f8:	9905      	ldr	r1, [sp, #20]
 80073fa:	9804      	ldr	r0, [sp, #16]
 80073fc:	f000 fcac 	bl	8007d58 <__lshift>
 8007400:	9005      	str	r0, [sp, #20]
 8007402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007404:	2b00      	cmp	r3, #0
 8007406:	dd05      	ble.n	8007414 <_dtoa_r+0x918>
 8007408:	0031      	movs	r1, r6
 800740a:	001a      	movs	r2, r3
 800740c:	9804      	ldr	r0, [sp, #16]
 800740e:	f000 fca3 	bl	8007d58 <__lshift>
 8007412:	0006      	movs	r6, r0
 8007414:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007416:	2b00      	cmp	r3, #0
 8007418:	d027      	beq.n	800746a <_dtoa_r+0x96e>
 800741a:	0031      	movs	r1, r6
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	f000 fd09 	bl	8007e34 <__mcmp>
 8007422:	2800      	cmp	r0, #0
 8007424:	da21      	bge.n	800746a <_dtoa_r+0x96e>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	220a      	movs	r2, #10
 800742a:	3b01      	subs	r3, #1
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	9905      	ldr	r1, [sp, #20]
 8007430:	2300      	movs	r3, #0
 8007432:	9804      	ldr	r0, [sp, #16]
 8007434:	f000 fae0 	bl	80079f8 <__multadd>
 8007438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800743a:	9005      	str	r0, [sp, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d100      	bne.n	8007442 <_dtoa_r+0x946>
 8007440:	e15d      	b.n	80076fe <_dtoa_r+0xc02>
 8007442:	2300      	movs	r3, #0
 8007444:	0039      	movs	r1, r7
 8007446:	220a      	movs	r2, #10
 8007448:	9804      	ldr	r0, [sp, #16]
 800744a:	f000 fad5 	bl	80079f8 <__multadd>
 800744e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007450:	0007      	movs	r7, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	dc49      	bgt.n	80074ea <_dtoa_r+0x9ee>
 8007456:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007458:	2b02      	cmp	r3, #2
 800745a:	dc0e      	bgt.n	800747a <_dtoa_r+0x97e>
 800745c:	e045      	b.n	80074ea <_dtoa_r+0x9ee>
 800745e:	2b04      	cmp	r3, #4
 8007460:	d0c6      	beq.n	80073f0 <_dtoa_r+0x8f4>
 8007462:	331c      	adds	r3, #28
 8007464:	e7bd      	b.n	80073e2 <_dtoa_r+0x8e6>
 8007466:	0013      	movs	r3, r2
 8007468:	e7fb      	b.n	8007462 <_dtoa_r+0x966>
 800746a:	9b07      	ldr	r3, [sp, #28]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dc36      	bgt.n	80074de <_dtoa_r+0x9e2>
 8007470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007472:	2b02      	cmp	r3, #2
 8007474:	dd33      	ble.n	80074de <_dtoa_r+0x9e2>
 8007476:	9b07      	ldr	r3, [sp, #28]
 8007478:	930b      	str	r3, [sp, #44]	; 0x2c
 800747a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10c      	bne.n	800749a <_dtoa_r+0x99e>
 8007480:	0031      	movs	r1, r6
 8007482:	2205      	movs	r2, #5
 8007484:	9804      	ldr	r0, [sp, #16]
 8007486:	f000 fab7 	bl	80079f8 <__multadd>
 800748a:	0006      	movs	r6, r0
 800748c:	0001      	movs	r1, r0
 800748e:	9805      	ldr	r0, [sp, #20]
 8007490:	f000 fcd0 	bl	8007e34 <__mcmp>
 8007494:	2800      	cmp	r0, #0
 8007496:	dd00      	ble.n	800749a <_dtoa_r+0x99e>
 8007498:	e59f      	b.n	8006fda <_dtoa_r+0x4de>
 800749a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800749c:	43db      	mvns	r3, r3
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	9b06      	ldr	r3, [sp, #24]
 80074a2:	9308      	str	r3, [sp, #32]
 80074a4:	2500      	movs	r5, #0
 80074a6:	0031      	movs	r1, r6
 80074a8:	9804      	ldr	r0, [sp, #16]
 80074aa:	f000 fa81 	bl	80079b0 <_Bfree>
 80074ae:	2f00      	cmp	r7, #0
 80074b0:	d100      	bne.n	80074b4 <_dtoa_r+0x9b8>
 80074b2:	e6a3      	b.n	80071fc <_dtoa_r+0x700>
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	d005      	beq.n	80074c4 <_dtoa_r+0x9c8>
 80074b8:	42bd      	cmp	r5, r7
 80074ba:	d003      	beq.n	80074c4 <_dtoa_r+0x9c8>
 80074bc:	0029      	movs	r1, r5
 80074be:	9804      	ldr	r0, [sp, #16]
 80074c0:	f000 fa76 	bl	80079b0 <_Bfree>
 80074c4:	0039      	movs	r1, r7
 80074c6:	9804      	ldr	r0, [sp, #16]
 80074c8:	f000 fa72 	bl	80079b0 <_Bfree>
 80074cc:	e696      	b.n	80071fc <_dtoa_r+0x700>
 80074ce:	2600      	movs	r6, #0
 80074d0:	0037      	movs	r7, r6
 80074d2:	e7e2      	b.n	800749a <_dtoa_r+0x99e>
 80074d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80074d8:	9303      	str	r3, [sp, #12]
 80074da:	0037      	movs	r7, r6
 80074dc:	e57d      	b.n	8006fda <_dtoa_r+0x4de>
 80074de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d100      	bne.n	80074e6 <_dtoa_r+0x9ea>
 80074e4:	e0c3      	b.n	800766e <_dtoa_r+0xb72>
 80074e6:	9b07      	ldr	r3, [sp, #28]
 80074e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ea:	2c00      	cmp	r4, #0
 80074ec:	dd05      	ble.n	80074fa <_dtoa_r+0x9fe>
 80074ee:	0039      	movs	r1, r7
 80074f0:	0022      	movs	r2, r4
 80074f2:	9804      	ldr	r0, [sp, #16]
 80074f4:	f000 fc30 	bl	8007d58 <__lshift>
 80074f8:	0007      	movs	r7, r0
 80074fa:	0038      	movs	r0, r7
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	d024      	beq.n	800754a <_dtoa_r+0xa4e>
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	9804      	ldr	r0, [sp, #16]
 8007504:	f000 fa10 	bl	8007928 <_Balloc>
 8007508:	1e04      	subs	r4, r0, #0
 800750a:	d111      	bne.n	8007530 <_dtoa_r+0xa34>
 800750c:	0022      	movs	r2, r4
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <_dtoa_r+0xa28>)
 8007510:	4805      	ldr	r0, [pc, #20]	; (8007528 <_dtoa_r+0xa2c>)
 8007512:	4906      	ldr	r1, [pc, #24]	; (800752c <_dtoa_r+0xa30>)
 8007514:	f7ff fb07 	bl	8006b26 <_dtoa_r+0x2a>
 8007518:	40240000 	.word	0x40240000
 800751c:	00000433 	.word	0x00000433
 8007520:	7ff00000 	.word	0x7ff00000
 8007524:	08008db8 	.word	0x08008db8
 8007528:	08008d60 	.word	0x08008d60
 800752c:	000002ef 	.word	0x000002ef
 8007530:	0039      	movs	r1, r7
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	310c      	adds	r1, #12
 8007536:	3202      	adds	r2, #2
 8007538:	0092      	lsls	r2, r2, #2
 800753a:	300c      	adds	r0, #12
 800753c:	f000 ffca 	bl	80084d4 <memcpy>
 8007540:	2201      	movs	r2, #1
 8007542:	0021      	movs	r1, r4
 8007544:	9804      	ldr	r0, [sp, #16]
 8007546:	f000 fc07 	bl	8007d58 <__lshift>
 800754a:	9b06      	ldr	r3, [sp, #24]
 800754c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	3b01      	subs	r3, #1
 8007552:	189b      	adds	r3, r3, r2
 8007554:	2201      	movs	r2, #1
 8007556:	003d      	movs	r5, r7
 8007558:	0007      	movs	r7, r0
 800755a:	930e      	str	r3, [sp, #56]	; 0x38
 800755c:	9b08      	ldr	r3, [sp, #32]
 800755e:	4013      	ands	r3, r2
 8007560:	930d      	str	r3, [sp, #52]	; 0x34
 8007562:	0031      	movs	r1, r6
 8007564:	9805      	ldr	r0, [sp, #20]
 8007566:	f7ff fa39 	bl	80069dc <quorem>
 800756a:	0029      	movs	r1, r5
 800756c:	0004      	movs	r4, r0
 800756e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007570:	9805      	ldr	r0, [sp, #20]
 8007572:	f000 fc5f 	bl	8007e34 <__mcmp>
 8007576:	003a      	movs	r2, r7
 8007578:	900c      	str	r0, [sp, #48]	; 0x30
 800757a:	0031      	movs	r1, r6
 800757c:	9804      	ldr	r0, [sp, #16]
 800757e:	f000 fc75 	bl	8007e6c <__mdiff>
 8007582:	2201      	movs	r2, #1
 8007584:	68c3      	ldr	r3, [r0, #12]
 8007586:	3430      	adds	r4, #48	; 0x30
 8007588:	9008      	str	r0, [sp, #32]
 800758a:	920a      	str	r2, [sp, #40]	; 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <_dtoa_r+0xa9e>
 8007590:	0001      	movs	r1, r0
 8007592:	9805      	ldr	r0, [sp, #20]
 8007594:	f000 fc4e 	bl	8007e34 <__mcmp>
 8007598:	900a      	str	r0, [sp, #40]	; 0x28
 800759a:	9908      	ldr	r1, [sp, #32]
 800759c:	9804      	ldr	r0, [sp, #16]
 800759e:	f000 fa07 	bl	80079b0 <_Bfree>
 80075a2:	9b07      	ldr	r3, [sp, #28]
 80075a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075a6:	3301      	adds	r3, #1
 80075a8:	9308      	str	r3, [sp, #32]
 80075aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ac:	4313      	orrs	r3, r2
 80075ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d109      	bne.n	80075c8 <_dtoa_r+0xacc>
 80075b4:	2c39      	cmp	r4, #57	; 0x39
 80075b6:	d022      	beq.n	80075fe <_dtoa_r+0xb02>
 80075b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dd01      	ble.n	80075c2 <_dtoa_r+0xac6>
 80075be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80075c0:	3431      	adds	r4, #49	; 0x31
 80075c2:	9b07      	ldr	r3, [sp, #28]
 80075c4:	701c      	strb	r4, [r3, #0]
 80075c6:	e76e      	b.n	80074a6 <_dtoa_r+0x9aa>
 80075c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	db04      	blt.n	80075d8 <_dtoa_r+0xadc>
 80075ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075d0:	4313      	orrs	r3, r2
 80075d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075d4:	4313      	orrs	r3, r2
 80075d6:	d11e      	bne.n	8007616 <_dtoa_r+0xb1a>
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	2b00      	cmp	r3, #0
 80075dc:	ddf1      	ble.n	80075c2 <_dtoa_r+0xac6>
 80075de:	9905      	ldr	r1, [sp, #20]
 80075e0:	2201      	movs	r2, #1
 80075e2:	9804      	ldr	r0, [sp, #16]
 80075e4:	f000 fbb8 	bl	8007d58 <__lshift>
 80075e8:	0031      	movs	r1, r6
 80075ea:	9005      	str	r0, [sp, #20]
 80075ec:	f000 fc22 	bl	8007e34 <__mcmp>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	dc02      	bgt.n	80075fa <_dtoa_r+0xafe>
 80075f4:	d1e5      	bne.n	80075c2 <_dtoa_r+0xac6>
 80075f6:	07e3      	lsls	r3, r4, #31
 80075f8:	d5e3      	bpl.n	80075c2 <_dtoa_r+0xac6>
 80075fa:	2c39      	cmp	r4, #57	; 0x39
 80075fc:	d1df      	bne.n	80075be <_dtoa_r+0xac2>
 80075fe:	2339      	movs	r3, #57	; 0x39
 8007600:	9a07      	ldr	r2, [sp, #28]
 8007602:	7013      	strb	r3, [r2, #0]
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	9308      	str	r3, [sp, #32]
 8007608:	3b01      	subs	r3, #1
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	2a39      	cmp	r2, #57	; 0x39
 800760e:	d063      	beq.n	80076d8 <_dtoa_r+0xbdc>
 8007610:	3201      	adds	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e747      	b.n	80074a6 <_dtoa_r+0x9aa>
 8007616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007618:	2b00      	cmp	r3, #0
 800761a:	dd03      	ble.n	8007624 <_dtoa_r+0xb28>
 800761c:	2c39      	cmp	r4, #57	; 0x39
 800761e:	d0ee      	beq.n	80075fe <_dtoa_r+0xb02>
 8007620:	3401      	adds	r4, #1
 8007622:	e7ce      	b.n	80075c2 <_dtoa_r+0xac6>
 8007624:	9b07      	ldr	r3, [sp, #28]
 8007626:	9a07      	ldr	r2, [sp, #28]
 8007628:	701c      	strb	r4, [r3, #0]
 800762a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800762c:	4293      	cmp	r3, r2
 800762e:	d03e      	beq.n	80076ae <_dtoa_r+0xbb2>
 8007630:	2300      	movs	r3, #0
 8007632:	220a      	movs	r2, #10
 8007634:	9905      	ldr	r1, [sp, #20]
 8007636:	9804      	ldr	r0, [sp, #16]
 8007638:	f000 f9de 	bl	80079f8 <__multadd>
 800763c:	2300      	movs	r3, #0
 800763e:	9005      	str	r0, [sp, #20]
 8007640:	220a      	movs	r2, #10
 8007642:	0029      	movs	r1, r5
 8007644:	9804      	ldr	r0, [sp, #16]
 8007646:	42bd      	cmp	r5, r7
 8007648:	d106      	bne.n	8007658 <_dtoa_r+0xb5c>
 800764a:	f000 f9d5 	bl	80079f8 <__multadd>
 800764e:	0005      	movs	r5, r0
 8007650:	0007      	movs	r7, r0
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	9307      	str	r3, [sp, #28]
 8007656:	e784      	b.n	8007562 <_dtoa_r+0xa66>
 8007658:	f000 f9ce 	bl	80079f8 <__multadd>
 800765c:	0039      	movs	r1, r7
 800765e:	0005      	movs	r5, r0
 8007660:	2300      	movs	r3, #0
 8007662:	220a      	movs	r2, #10
 8007664:	9804      	ldr	r0, [sp, #16]
 8007666:	f000 f9c7 	bl	80079f8 <__multadd>
 800766a:	0007      	movs	r7, r0
 800766c:	e7f1      	b.n	8007652 <_dtoa_r+0xb56>
 800766e:	9b07      	ldr	r3, [sp, #28]
 8007670:	930b      	str	r3, [sp, #44]	; 0x2c
 8007672:	2500      	movs	r5, #0
 8007674:	0031      	movs	r1, r6
 8007676:	9805      	ldr	r0, [sp, #20]
 8007678:	f7ff f9b0 	bl	80069dc <quorem>
 800767c:	9b06      	ldr	r3, [sp, #24]
 800767e:	3030      	adds	r0, #48	; 0x30
 8007680:	5558      	strb	r0, [r3, r5]
 8007682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007684:	3501      	adds	r5, #1
 8007686:	0004      	movs	r4, r0
 8007688:	42ab      	cmp	r3, r5
 800768a:	dd07      	ble.n	800769c <_dtoa_r+0xba0>
 800768c:	2300      	movs	r3, #0
 800768e:	220a      	movs	r2, #10
 8007690:	9905      	ldr	r1, [sp, #20]
 8007692:	9804      	ldr	r0, [sp, #16]
 8007694:	f000 f9b0 	bl	80079f8 <__multadd>
 8007698:	9005      	str	r0, [sp, #20]
 800769a:	e7eb      	b.n	8007674 <_dtoa_r+0xb78>
 800769c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800769e:	2301      	movs	r3, #1
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	dd00      	ble.n	80076a6 <_dtoa_r+0xbaa>
 80076a4:	0013      	movs	r3, r2
 80076a6:	2500      	movs	r5, #0
 80076a8:	9a06      	ldr	r2, [sp, #24]
 80076aa:	18d3      	adds	r3, r2, r3
 80076ac:	9308      	str	r3, [sp, #32]
 80076ae:	9905      	ldr	r1, [sp, #20]
 80076b0:	2201      	movs	r2, #1
 80076b2:	9804      	ldr	r0, [sp, #16]
 80076b4:	f000 fb50 	bl	8007d58 <__lshift>
 80076b8:	0031      	movs	r1, r6
 80076ba:	9005      	str	r0, [sp, #20]
 80076bc:	f000 fbba 	bl	8007e34 <__mcmp>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	dc9f      	bgt.n	8007604 <_dtoa_r+0xb08>
 80076c4:	d101      	bne.n	80076ca <_dtoa_r+0xbce>
 80076c6:	07e4      	lsls	r4, r4, #31
 80076c8:	d49c      	bmi.n	8007604 <_dtoa_r+0xb08>
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	9308      	str	r3, [sp, #32]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	2a30      	cmp	r2, #48	; 0x30
 80076d4:	d0fa      	beq.n	80076cc <_dtoa_r+0xbd0>
 80076d6:	e6e6      	b.n	80074a6 <_dtoa_r+0x9aa>
 80076d8:	9a06      	ldr	r2, [sp, #24]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d193      	bne.n	8007606 <_dtoa_r+0xb0a>
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	9303      	str	r3, [sp, #12]
 80076e4:	2331      	movs	r3, #49	; 0x31
 80076e6:	7013      	strb	r3, [r2, #0]
 80076e8:	e6dd      	b.n	80074a6 <_dtoa_r+0x9aa>
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <_dtoa_r+0xc14>)
 80076ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076ee:	9306      	str	r3, [sp, #24]
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <_dtoa_r+0xc18>)
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	d001      	beq.n	80076fa <_dtoa_r+0xbfe>
 80076f6:	f7ff fa49 	bl	8006b8c <_dtoa_r+0x90>
 80076fa:	f7ff fa49 	bl	8006b90 <_dtoa_r+0x94>
 80076fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007700:	2b00      	cmp	r3, #0
 8007702:	dcb6      	bgt.n	8007672 <_dtoa_r+0xb76>
 8007704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007706:	2b02      	cmp	r3, #2
 8007708:	dd00      	ble.n	800770c <_dtoa_r+0xc10>
 800770a:	e6b6      	b.n	800747a <_dtoa_r+0x97e>
 800770c:	e7b1      	b.n	8007672 <_dtoa_r+0xb76>
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	08008d3c 	.word	0x08008d3c
 8007714:	08008d44 	.word	0x08008d44

08007718 <_free_r>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	0005      	movs	r5, r0
 800771c:	2900      	cmp	r1, #0
 800771e:	d010      	beq.n	8007742 <_free_r+0x2a>
 8007720:	1f0c      	subs	r4, r1, #4
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	da00      	bge.n	800772a <_free_r+0x12>
 8007728:	18e4      	adds	r4, r4, r3
 800772a:	0028      	movs	r0, r5
 800772c:	f000 f8ec 	bl	8007908 <__malloc_lock>
 8007730:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <_free_r+0x90>)
 8007732:	6813      	ldr	r3, [r2, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <_free_r+0x2c>
 8007738:	6063      	str	r3, [r4, #4]
 800773a:	6014      	str	r4, [r2, #0]
 800773c:	0028      	movs	r0, r5
 800773e:	f000 f8eb 	bl	8007918 <__malloc_unlock>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	42a3      	cmp	r3, r4
 8007746:	d908      	bls.n	800775a <_free_r+0x42>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	1821      	adds	r1, r4, r0
 800774c:	428b      	cmp	r3, r1
 800774e:	d1f3      	bne.n	8007738 <_free_r+0x20>
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	1809      	adds	r1, r1, r0
 8007756:	6021      	str	r1, [r4, #0]
 8007758:	e7ee      	b.n	8007738 <_free_r+0x20>
 800775a:	001a      	movs	r2, r3
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <_free_r+0x4e>
 8007762:	42a3      	cmp	r3, r4
 8007764:	d9f9      	bls.n	800775a <_free_r+0x42>
 8007766:	6811      	ldr	r1, [r2, #0]
 8007768:	1850      	adds	r0, r2, r1
 800776a:	42a0      	cmp	r0, r4
 800776c:	d10b      	bne.n	8007786 <_free_r+0x6e>
 800776e:	6820      	ldr	r0, [r4, #0]
 8007770:	1809      	adds	r1, r1, r0
 8007772:	1850      	adds	r0, r2, r1
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	4283      	cmp	r3, r0
 8007778:	d1e0      	bne.n	800773c <_free_r+0x24>
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	1841      	adds	r1, r0, r1
 8007780:	6011      	str	r1, [r2, #0]
 8007782:	6053      	str	r3, [r2, #4]
 8007784:	e7da      	b.n	800773c <_free_r+0x24>
 8007786:	42a0      	cmp	r0, r4
 8007788:	d902      	bls.n	8007790 <_free_r+0x78>
 800778a:	230c      	movs	r3, #12
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	e7d5      	b.n	800773c <_free_r+0x24>
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	1821      	adds	r1, r4, r0
 8007794:	428b      	cmp	r3, r1
 8007796:	d103      	bne.n	80077a0 <_free_r+0x88>
 8007798:	6819      	ldr	r1, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	1809      	adds	r1, r1, r0
 800779e:	6021      	str	r1, [r4, #0]
 80077a0:	6063      	str	r3, [r4, #4]
 80077a2:	6054      	str	r4, [r2, #4]
 80077a4:	e7ca      	b.n	800773c <_free_r+0x24>
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	2000070c 	.word	0x2000070c

080077ac <malloc>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	4b03      	ldr	r3, [pc, #12]	; (80077bc <malloc+0x10>)
 80077b0:	0001      	movs	r1, r0
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	f000 f826 	bl	8007804 <_malloc_r>
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	200001bc 	.word	0x200001bc

080077c0 <sbrk_aligned>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4e0f      	ldr	r6, [pc, #60]	; (8007800 <sbrk_aligned+0x40>)
 80077c4:	000d      	movs	r5, r1
 80077c6:	6831      	ldr	r1, [r6, #0]
 80077c8:	0004      	movs	r4, r0
 80077ca:	2900      	cmp	r1, #0
 80077cc:	d102      	bne.n	80077d4 <sbrk_aligned+0x14>
 80077ce:	f000 fe6f 	bl	80084b0 <_sbrk_r>
 80077d2:	6030      	str	r0, [r6, #0]
 80077d4:	0029      	movs	r1, r5
 80077d6:	0020      	movs	r0, r4
 80077d8:	f000 fe6a 	bl	80084b0 <_sbrk_r>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d00a      	beq.n	80077f6 <sbrk_aligned+0x36>
 80077e0:	2303      	movs	r3, #3
 80077e2:	1cc5      	adds	r5, r0, #3
 80077e4:	439d      	bics	r5, r3
 80077e6:	42a8      	cmp	r0, r5
 80077e8:	d007      	beq.n	80077fa <sbrk_aligned+0x3a>
 80077ea:	1a29      	subs	r1, r5, r0
 80077ec:	0020      	movs	r0, r4
 80077ee:	f000 fe5f 	bl	80084b0 <_sbrk_r>
 80077f2:	3001      	adds	r0, #1
 80077f4:	d101      	bne.n	80077fa <sbrk_aligned+0x3a>
 80077f6:	2501      	movs	r5, #1
 80077f8:	426d      	negs	r5, r5
 80077fa:	0028      	movs	r0, r5
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	20000710 	.word	0x20000710

08007804 <_malloc_r>:
 8007804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007806:	2203      	movs	r2, #3
 8007808:	1ccb      	adds	r3, r1, #3
 800780a:	4393      	bics	r3, r2
 800780c:	3308      	adds	r3, #8
 800780e:	0006      	movs	r6, r0
 8007810:	001f      	movs	r7, r3
 8007812:	2b0c      	cmp	r3, #12
 8007814:	d238      	bcs.n	8007888 <_malloc_r+0x84>
 8007816:	270c      	movs	r7, #12
 8007818:	42b9      	cmp	r1, r7
 800781a:	d837      	bhi.n	800788c <_malloc_r+0x88>
 800781c:	0030      	movs	r0, r6
 800781e:	f000 f873 	bl	8007908 <__malloc_lock>
 8007822:	4b38      	ldr	r3, [pc, #224]	; (8007904 <_malloc_r+0x100>)
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	001c      	movs	r4, r3
 800782a:	2c00      	cmp	r4, #0
 800782c:	d133      	bne.n	8007896 <_malloc_r+0x92>
 800782e:	0039      	movs	r1, r7
 8007830:	0030      	movs	r0, r6
 8007832:	f7ff ffc5 	bl	80077c0 <sbrk_aligned>
 8007836:	0004      	movs	r4, r0
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d15e      	bne.n	80078fa <_malloc_r+0xf6>
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	681c      	ldr	r4, [r3, #0]
 8007840:	0025      	movs	r5, r4
 8007842:	2d00      	cmp	r5, #0
 8007844:	d14e      	bne.n	80078e4 <_malloc_r+0xe0>
 8007846:	2c00      	cmp	r4, #0
 8007848:	d051      	beq.n	80078ee <_malloc_r+0xea>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	0029      	movs	r1, r5
 800784e:	18e3      	adds	r3, r4, r3
 8007850:	0030      	movs	r0, r6
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	f000 fe2c 	bl	80084b0 <_sbrk_r>
 8007858:	9b01      	ldr	r3, [sp, #4]
 800785a:	4283      	cmp	r3, r0
 800785c:	d147      	bne.n	80078ee <_malloc_r+0xea>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	0030      	movs	r0, r6
 8007862:	1aff      	subs	r7, r7, r3
 8007864:	0039      	movs	r1, r7
 8007866:	f7ff ffab 	bl	80077c0 <sbrk_aligned>
 800786a:	3001      	adds	r0, #1
 800786c:	d03f      	beq.n	80078ee <_malloc_r+0xea>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	19db      	adds	r3, r3, r7
 8007872:	6023      	str	r3, [r4, #0]
 8007874:	9b00      	ldr	r3, [sp, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d040      	beq.n	80078fe <_malloc_r+0xfa>
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	42a2      	cmp	r2, r4
 8007880:	d133      	bne.n	80078ea <_malloc_r+0xe6>
 8007882:	2200      	movs	r2, #0
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	e014      	b.n	80078b2 <_malloc_r+0xae>
 8007888:	2b00      	cmp	r3, #0
 800788a:	dac5      	bge.n	8007818 <_malloc_r+0x14>
 800788c:	230c      	movs	r3, #12
 800788e:	2500      	movs	r5, #0
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	0028      	movs	r0, r5
 8007894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007896:	6821      	ldr	r1, [r4, #0]
 8007898:	1bc9      	subs	r1, r1, r7
 800789a:	d420      	bmi.n	80078de <_malloc_r+0xda>
 800789c:	290b      	cmp	r1, #11
 800789e:	d918      	bls.n	80078d2 <_malloc_r+0xce>
 80078a0:	19e2      	adds	r2, r4, r7
 80078a2:	6027      	str	r7, [r4, #0]
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d112      	bne.n	80078ce <_malloc_r+0xca>
 80078a8:	9b00      	ldr	r3, [sp, #0]
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	6863      	ldr	r3, [r4, #4]
 80078ae:	6011      	str	r1, [r2, #0]
 80078b0:	6053      	str	r3, [r2, #4]
 80078b2:	0030      	movs	r0, r6
 80078b4:	0025      	movs	r5, r4
 80078b6:	f000 f82f 	bl	8007918 <__malloc_unlock>
 80078ba:	2207      	movs	r2, #7
 80078bc:	350b      	adds	r5, #11
 80078be:	1d23      	adds	r3, r4, #4
 80078c0:	4395      	bics	r5, r2
 80078c2:	1aea      	subs	r2, r5, r3
 80078c4:	429d      	cmp	r5, r3
 80078c6:	d0e4      	beq.n	8007892 <_malloc_r+0x8e>
 80078c8:	1b5b      	subs	r3, r3, r5
 80078ca:	50a3      	str	r3, [r4, r2]
 80078cc:	e7e1      	b.n	8007892 <_malloc_r+0x8e>
 80078ce:	605a      	str	r2, [r3, #4]
 80078d0:	e7ec      	b.n	80078ac <_malloc_r+0xa8>
 80078d2:	6862      	ldr	r2, [r4, #4]
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	d1d5      	bne.n	8007884 <_malloc_r+0x80>
 80078d8:	9b00      	ldr	r3, [sp, #0]
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e7e9      	b.n	80078b2 <_malloc_r+0xae>
 80078de:	0023      	movs	r3, r4
 80078e0:	6864      	ldr	r4, [r4, #4]
 80078e2:	e7a2      	b.n	800782a <_malloc_r+0x26>
 80078e4:	002c      	movs	r4, r5
 80078e6:	686d      	ldr	r5, [r5, #4]
 80078e8:	e7ab      	b.n	8007842 <_malloc_r+0x3e>
 80078ea:	0013      	movs	r3, r2
 80078ec:	e7c4      	b.n	8007878 <_malloc_r+0x74>
 80078ee:	230c      	movs	r3, #12
 80078f0:	0030      	movs	r0, r6
 80078f2:	6033      	str	r3, [r6, #0]
 80078f4:	f000 f810 	bl	8007918 <__malloc_unlock>
 80078f8:	e7cb      	b.n	8007892 <_malloc_r+0x8e>
 80078fa:	6027      	str	r7, [r4, #0]
 80078fc:	e7d9      	b.n	80078b2 <_malloc_r+0xae>
 80078fe:	605b      	str	r3, [r3, #4]
 8007900:	deff      	udf	#255	; 0xff
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	2000070c 	.word	0x2000070c

08007908 <__malloc_lock>:
 8007908:	b510      	push	{r4, lr}
 800790a:	4802      	ldr	r0, [pc, #8]	; (8007914 <__malloc_lock+0xc>)
 800790c:	f7ff f859 	bl	80069c2 <__retarget_lock_acquire_recursive>
 8007910:	bd10      	pop	{r4, pc}
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	20000708 	.word	0x20000708

08007918 <__malloc_unlock>:
 8007918:	b510      	push	{r4, lr}
 800791a:	4802      	ldr	r0, [pc, #8]	; (8007924 <__malloc_unlock+0xc>)
 800791c:	f7ff f852 	bl	80069c4 <__retarget_lock_release_recursive>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	20000708 	.word	0x20000708

08007928 <_Balloc>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	69c5      	ldr	r5, [r0, #28]
 800792c:	0006      	movs	r6, r0
 800792e:	000c      	movs	r4, r1
 8007930:	2d00      	cmp	r5, #0
 8007932:	d10e      	bne.n	8007952 <_Balloc+0x2a>
 8007934:	2010      	movs	r0, #16
 8007936:	f7ff ff39 	bl	80077ac <malloc>
 800793a:	1e02      	subs	r2, r0, #0
 800793c:	61f0      	str	r0, [r6, #28]
 800793e:	d104      	bne.n	800794a <_Balloc+0x22>
 8007940:	216b      	movs	r1, #107	; 0x6b
 8007942:	4b19      	ldr	r3, [pc, #100]	; (80079a8 <_Balloc+0x80>)
 8007944:	4819      	ldr	r0, [pc, #100]	; (80079ac <_Balloc+0x84>)
 8007946:	f000 fdcf 	bl	80084e8 <__assert_func>
 800794a:	6045      	str	r5, [r0, #4]
 800794c:	6085      	str	r5, [r0, #8]
 800794e:	6005      	str	r5, [r0, #0]
 8007950:	60c5      	str	r5, [r0, #12]
 8007952:	69f5      	ldr	r5, [r6, #28]
 8007954:	68eb      	ldr	r3, [r5, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d013      	beq.n	8007982 <_Balloc+0x5a>
 800795a:	69f3      	ldr	r3, [r6, #28]
 800795c:	00a2      	lsls	r2, r4, #2
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	189b      	adds	r3, r3, r2
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	2800      	cmp	r0, #0
 8007966:	d118      	bne.n	800799a <_Balloc+0x72>
 8007968:	2101      	movs	r1, #1
 800796a:	000d      	movs	r5, r1
 800796c:	40a5      	lsls	r5, r4
 800796e:	1d6a      	adds	r2, r5, #5
 8007970:	0030      	movs	r0, r6
 8007972:	0092      	lsls	r2, r2, #2
 8007974:	f000 fdd6 	bl	8008524 <_calloc_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	d00c      	beq.n	8007996 <_Balloc+0x6e>
 800797c:	6044      	str	r4, [r0, #4]
 800797e:	6085      	str	r5, [r0, #8]
 8007980:	e00d      	b.n	800799e <_Balloc+0x76>
 8007982:	2221      	movs	r2, #33	; 0x21
 8007984:	2104      	movs	r1, #4
 8007986:	0030      	movs	r0, r6
 8007988:	f000 fdcc 	bl	8008524 <_calloc_r>
 800798c:	69f3      	ldr	r3, [r6, #28]
 800798e:	60e8      	str	r0, [r5, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e1      	bne.n	800795a <_Balloc+0x32>
 8007996:	2000      	movs	r0, #0
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	6802      	ldr	r2, [r0, #0]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	2300      	movs	r3, #0
 80079a0:	6103      	str	r3, [r0, #16]
 80079a2:	60c3      	str	r3, [r0, #12]
 80079a4:	e7f8      	b.n	8007998 <_Balloc+0x70>
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	08008d49 	.word	0x08008d49
 80079ac:	08008dc9 	.word	0x08008dc9

080079b0 <_Bfree>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	69c6      	ldr	r6, [r0, #28]
 80079b4:	0005      	movs	r5, r0
 80079b6:	000c      	movs	r4, r1
 80079b8:	2e00      	cmp	r6, #0
 80079ba:	d10e      	bne.n	80079da <_Bfree+0x2a>
 80079bc:	2010      	movs	r0, #16
 80079be:	f7ff fef5 	bl	80077ac <malloc>
 80079c2:	1e02      	subs	r2, r0, #0
 80079c4:	61e8      	str	r0, [r5, #28]
 80079c6:	d104      	bne.n	80079d2 <_Bfree+0x22>
 80079c8:	218f      	movs	r1, #143	; 0x8f
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <_Bfree+0x40>)
 80079cc:	4809      	ldr	r0, [pc, #36]	; (80079f4 <_Bfree+0x44>)
 80079ce:	f000 fd8b 	bl	80084e8 <__assert_func>
 80079d2:	6046      	str	r6, [r0, #4]
 80079d4:	6086      	str	r6, [r0, #8]
 80079d6:	6006      	str	r6, [r0, #0]
 80079d8:	60c6      	str	r6, [r0, #12]
 80079da:	2c00      	cmp	r4, #0
 80079dc:	d007      	beq.n	80079ee <_Bfree+0x3e>
 80079de:	69eb      	ldr	r3, [r5, #28]
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	0092      	lsls	r2, r2, #2
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	6022      	str	r2, [r4, #0]
 80079ec:	601c      	str	r4, [r3, #0]
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	08008d49 	.word	0x08008d49
 80079f4:	08008dc9 	.word	0x08008dc9

080079f8 <__multadd>:
 80079f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079fa:	000e      	movs	r6, r1
 80079fc:	9001      	str	r0, [sp, #4]
 80079fe:	000c      	movs	r4, r1
 8007a00:	001d      	movs	r5, r3
 8007a02:	2000      	movs	r0, #0
 8007a04:	690f      	ldr	r7, [r1, #16]
 8007a06:	3614      	adds	r6, #20
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	b299      	uxth	r1, r3
 8007a0e:	4351      	muls	r1, r2
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	4353      	muls	r3, r2
 8007a14:	1949      	adds	r1, r1, r5
 8007a16:	0c0d      	lsrs	r5, r1, #16
 8007a18:	195b      	adds	r3, r3, r5
 8007a1a:	0c1d      	lsrs	r5, r3, #16
 8007a1c:	b289      	uxth	r1, r1
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	185b      	adds	r3, r3, r1
 8007a22:	c608      	stmia	r6!, {r3}
 8007a24:	4287      	cmp	r7, r0
 8007a26:	dcef      	bgt.n	8007a08 <__multadd+0x10>
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	d022      	beq.n	8007a72 <__multadd+0x7a>
 8007a2c:	68a3      	ldr	r3, [r4, #8]
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	dc19      	bgt.n	8007a66 <__multadd+0x6e>
 8007a32:	6861      	ldr	r1, [r4, #4]
 8007a34:	9801      	ldr	r0, [sp, #4]
 8007a36:	3101      	adds	r1, #1
 8007a38:	f7ff ff76 	bl	8007928 <_Balloc>
 8007a3c:	1e06      	subs	r6, r0, #0
 8007a3e:	d105      	bne.n	8007a4c <__multadd+0x54>
 8007a40:	0032      	movs	r2, r6
 8007a42:	21ba      	movs	r1, #186	; 0xba
 8007a44:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <__multadd+0x80>)
 8007a46:	480d      	ldr	r0, [pc, #52]	; (8007a7c <__multadd+0x84>)
 8007a48:	f000 fd4e 	bl	80084e8 <__assert_func>
 8007a4c:	0021      	movs	r1, r4
 8007a4e:	6922      	ldr	r2, [r4, #16]
 8007a50:	310c      	adds	r1, #12
 8007a52:	3202      	adds	r2, #2
 8007a54:	0092      	lsls	r2, r2, #2
 8007a56:	300c      	adds	r0, #12
 8007a58:	f000 fd3c 	bl	80084d4 <memcpy>
 8007a5c:	0021      	movs	r1, r4
 8007a5e:	9801      	ldr	r0, [sp, #4]
 8007a60:	f7ff ffa6 	bl	80079b0 <_Bfree>
 8007a64:	0034      	movs	r4, r6
 8007a66:	1d3b      	adds	r3, r7, #4
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	18e3      	adds	r3, r4, r3
 8007a6c:	605d      	str	r5, [r3, #4]
 8007a6e:	1c7b      	adds	r3, r7, #1
 8007a70:	6123      	str	r3, [r4, #16]
 8007a72:	0020      	movs	r0, r4
 8007a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	08008db8 	.word	0x08008db8
 8007a7c:	08008dc9 	.word	0x08008dc9

08007a80 <__hi0bits>:
 8007a80:	0003      	movs	r3, r0
 8007a82:	0c02      	lsrs	r2, r0, #16
 8007a84:	2000      	movs	r0, #0
 8007a86:	4282      	cmp	r2, r0
 8007a88:	d101      	bne.n	8007a8e <__hi0bits+0xe>
 8007a8a:	041b      	lsls	r3, r3, #16
 8007a8c:	3010      	adds	r0, #16
 8007a8e:	0e1a      	lsrs	r2, r3, #24
 8007a90:	d101      	bne.n	8007a96 <__hi0bits+0x16>
 8007a92:	3008      	adds	r0, #8
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	0f1a      	lsrs	r2, r3, #28
 8007a98:	d101      	bne.n	8007a9e <__hi0bits+0x1e>
 8007a9a:	3004      	adds	r0, #4
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	0f9a      	lsrs	r2, r3, #30
 8007aa0:	d101      	bne.n	8007aa6 <__hi0bits+0x26>
 8007aa2:	3002      	adds	r0, #2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	db03      	blt.n	8007ab2 <__hi0bits+0x32>
 8007aaa:	3001      	adds	r0, #1
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	d400      	bmi.n	8007ab2 <__hi0bits+0x32>
 8007ab0:	2020      	movs	r0, #32
 8007ab2:	4770      	bx	lr

08007ab4 <__lo0bits>:
 8007ab4:	6803      	ldr	r3, [r0, #0]
 8007ab6:	0001      	movs	r1, r0
 8007ab8:	2207      	movs	r2, #7
 8007aba:	0018      	movs	r0, r3
 8007abc:	4010      	ands	r0, r2
 8007abe:	4213      	tst	r3, r2
 8007ac0:	d00d      	beq.n	8007ade <__lo0bits+0x2a>
 8007ac2:	3a06      	subs	r2, #6
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	4213      	tst	r3, r2
 8007ac8:	d105      	bne.n	8007ad6 <__lo0bits+0x22>
 8007aca:	3002      	adds	r0, #2
 8007acc:	4203      	tst	r3, r0
 8007ace:	d003      	beq.n	8007ad8 <__lo0bits+0x24>
 8007ad0:	40d3      	lsrs	r3, r2
 8007ad2:	0010      	movs	r0, r2
 8007ad4:	600b      	str	r3, [r1, #0]
 8007ad6:	4770      	bx	lr
 8007ad8:	089b      	lsrs	r3, r3, #2
 8007ada:	600b      	str	r3, [r1, #0]
 8007adc:	e7fb      	b.n	8007ad6 <__lo0bits+0x22>
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	2a00      	cmp	r2, #0
 8007ae2:	d101      	bne.n	8007ae8 <__lo0bits+0x34>
 8007ae4:	2010      	movs	r0, #16
 8007ae6:	0c1b      	lsrs	r3, r3, #16
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	d101      	bne.n	8007af2 <__lo0bits+0x3e>
 8007aee:	3008      	adds	r0, #8
 8007af0:	0a1b      	lsrs	r3, r3, #8
 8007af2:	071a      	lsls	r2, r3, #28
 8007af4:	d101      	bne.n	8007afa <__lo0bits+0x46>
 8007af6:	3004      	adds	r0, #4
 8007af8:	091b      	lsrs	r3, r3, #4
 8007afa:	079a      	lsls	r2, r3, #30
 8007afc:	d101      	bne.n	8007b02 <__lo0bits+0x4e>
 8007afe:	3002      	adds	r0, #2
 8007b00:	089b      	lsrs	r3, r3, #2
 8007b02:	07da      	lsls	r2, r3, #31
 8007b04:	d4e9      	bmi.n	8007ada <__lo0bits+0x26>
 8007b06:	3001      	adds	r0, #1
 8007b08:	085b      	lsrs	r3, r3, #1
 8007b0a:	d1e6      	bne.n	8007ada <__lo0bits+0x26>
 8007b0c:	2020      	movs	r0, #32
 8007b0e:	e7e2      	b.n	8007ad6 <__lo0bits+0x22>

08007b10 <__i2b>:
 8007b10:	b510      	push	{r4, lr}
 8007b12:	000c      	movs	r4, r1
 8007b14:	2101      	movs	r1, #1
 8007b16:	f7ff ff07 	bl	8007928 <_Balloc>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d107      	bne.n	8007b2e <__i2b+0x1e>
 8007b1e:	2146      	movs	r1, #70	; 0x46
 8007b20:	4c05      	ldr	r4, [pc, #20]	; (8007b38 <__i2b+0x28>)
 8007b22:	0002      	movs	r2, r0
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <__i2b+0x2c>)
 8007b26:	0020      	movs	r0, r4
 8007b28:	31ff      	adds	r1, #255	; 0xff
 8007b2a:	f000 fcdd 	bl	80084e8 <__assert_func>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	6144      	str	r4, [r0, #20]
 8007b32:	6103      	str	r3, [r0, #16]
 8007b34:	bd10      	pop	{r4, pc}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	08008dc9 	.word	0x08008dc9
 8007b3c:	08008db8 	.word	0x08008db8

08007b40 <__multiply>:
 8007b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b42:	0015      	movs	r5, r2
 8007b44:	690a      	ldr	r2, [r1, #16]
 8007b46:	692b      	ldr	r3, [r5, #16]
 8007b48:	000c      	movs	r4, r1
 8007b4a:	b08b      	sub	sp, #44	; 0x2c
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	da01      	bge.n	8007b54 <__multiply+0x14>
 8007b50:	002c      	movs	r4, r5
 8007b52:	000d      	movs	r5, r1
 8007b54:	6927      	ldr	r7, [r4, #16]
 8007b56:	692e      	ldr	r6, [r5, #16]
 8007b58:	6861      	ldr	r1, [r4, #4]
 8007b5a:	19bb      	adds	r3, r7, r6
 8007b5c:	9303      	str	r3, [sp, #12]
 8007b5e:	68a3      	ldr	r3, [r4, #8]
 8007b60:	19ba      	adds	r2, r7, r6
 8007b62:	4293      	cmp	r3, r2
 8007b64:	da00      	bge.n	8007b68 <__multiply+0x28>
 8007b66:	3101      	adds	r1, #1
 8007b68:	f7ff fede 	bl	8007928 <_Balloc>
 8007b6c:	9002      	str	r0, [sp, #8]
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d106      	bne.n	8007b80 <__multiply+0x40>
 8007b72:	21b1      	movs	r1, #177	; 0xb1
 8007b74:	4b48      	ldr	r3, [pc, #288]	; (8007c98 <__multiply+0x158>)
 8007b76:	4849      	ldr	r0, [pc, #292]	; (8007c9c <__multiply+0x15c>)
 8007b78:	9a02      	ldr	r2, [sp, #8]
 8007b7a:	0049      	lsls	r1, r1, #1
 8007b7c:	f000 fcb4 	bl	80084e8 <__assert_func>
 8007b80:	9b02      	ldr	r3, [sp, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	3314      	adds	r3, #20
 8007b86:	469c      	mov	ip, r3
 8007b88:	19bb      	adds	r3, r7, r6
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4463      	add	r3, ip
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	4663      	mov	r3, ip
 8007b92:	9904      	ldr	r1, [sp, #16]
 8007b94:	428b      	cmp	r3, r1
 8007b96:	d32a      	bcc.n	8007bee <__multiply+0xae>
 8007b98:	0023      	movs	r3, r4
 8007b9a:	00bf      	lsls	r7, r7, #2
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	3514      	adds	r5, #20
 8007ba0:	9308      	str	r3, [sp, #32]
 8007ba2:	00b6      	lsls	r6, r6, #2
 8007ba4:	19db      	adds	r3, r3, r7
 8007ba6:	9305      	str	r3, [sp, #20]
 8007ba8:	19ab      	adds	r3, r5, r6
 8007baa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bac:	2304      	movs	r3, #4
 8007bae:	9306      	str	r3, [sp, #24]
 8007bb0:	0023      	movs	r3, r4
 8007bb2:	9a05      	ldr	r2, [sp, #20]
 8007bb4:	3315      	adds	r3, #21
 8007bb6:	9501      	str	r5, [sp, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d305      	bcc.n	8007bc8 <__multiply+0x88>
 8007bbc:	1b13      	subs	r3, r2, r4
 8007bbe:	3b15      	subs	r3, #21
 8007bc0:	089b      	lsrs	r3, r3, #2
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	9306      	str	r3, [sp, #24]
 8007bc8:	9b01      	ldr	r3, [sp, #4]
 8007bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d310      	bcc.n	8007bf2 <__multiply+0xb2>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dd05      	ble.n	8007be2 <__multiply+0xa2>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	3b04      	subs	r3, #4
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d056      	beq.n	8007c90 <__multiply+0x150>
 8007be2:	9b02      	ldr	r3, [sp, #8]
 8007be4:	9a03      	ldr	r2, [sp, #12]
 8007be6:	0018      	movs	r0, r3
 8007be8:	611a      	str	r2, [r3, #16]
 8007bea:	b00b      	add	sp, #44	; 0x2c
 8007bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bee:	c304      	stmia	r3!, {r2}
 8007bf0:	e7cf      	b.n	8007b92 <__multiply+0x52>
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	b280      	uxth	r0, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d01e      	beq.n	8007c3a <__multiply+0xfa>
 8007bfc:	4667      	mov	r7, ip
 8007bfe:	2500      	movs	r5, #0
 8007c00:	9e08      	ldr	r6, [sp, #32]
 8007c02:	ce02      	ldmia	r6!, {r1}
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	b28b      	uxth	r3, r1
 8007c0a:	4343      	muls	r3, r0
 8007c0c:	001a      	movs	r2, r3
 8007c0e:	466b      	mov	r3, sp
 8007c10:	8b9b      	ldrh	r3, [r3, #28]
 8007c12:	18d3      	adds	r3, r2, r3
 8007c14:	195b      	adds	r3, r3, r5
 8007c16:	0c0d      	lsrs	r5, r1, #16
 8007c18:	4345      	muls	r5, r0
 8007c1a:	9a07      	ldr	r2, [sp, #28]
 8007c1c:	0c11      	lsrs	r1, r2, #16
 8007c1e:	1869      	adds	r1, r5, r1
 8007c20:	0c1a      	lsrs	r2, r3, #16
 8007c22:	188a      	adds	r2, r1, r2
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	0c15      	lsrs	r5, r2, #16
 8007c28:	0412      	lsls	r2, r2, #16
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	9b05      	ldr	r3, [sp, #20]
 8007c2e:	c704      	stmia	r7!, {r2}
 8007c30:	42b3      	cmp	r3, r6
 8007c32:	d8e6      	bhi.n	8007c02 <__multiply+0xc2>
 8007c34:	4663      	mov	r3, ip
 8007c36:	9a06      	ldr	r2, [sp, #24]
 8007c38:	509d      	str	r5, [r3, r2]
 8007c3a:	9b01      	ldr	r3, [sp, #4]
 8007c3c:	6818      	ldr	r0, [r3, #0]
 8007c3e:	0c00      	lsrs	r0, r0, #16
 8007c40:	d020      	beq.n	8007c84 <__multiply+0x144>
 8007c42:	4663      	mov	r3, ip
 8007c44:	0025      	movs	r5, r4
 8007c46:	4661      	mov	r1, ip
 8007c48:	2700      	movs	r7, #0
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3514      	adds	r5, #20
 8007c4e:	682a      	ldr	r2, [r5, #0]
 8007c50:	680e      	ldr	r6, [r1, #0]
 8007c52:	b292      	uxth	r2, r2
 8007c54:	4342      	muls	r2, r0
 8007c56:	0c36      	lsrs	r6, r6, #16
 8007c58:	1992      	adds	r2, r2, r6
 8007c5a:	19d2      	adds	r2, r2, r7
 8007c5c:	0416      	lsls	r6, r2, #16
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	431e      	orrs	r6, r3
 8007c62:	600e      	str	r6, [r1, #0]
 8007c64:	cd40      	ldmia	r5!, {r6}
 8007c66:	684b      	ldr	r3, [r1, #4]
 8007c68:	0c36      	lsrs	r6, r6, #16
 8007c6a:	4346      	muls	r6, r0
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	0c12      	lsrs	r2, r2, #16
 8007c70:	18f3      	adds	r3, r6, r3
 8007c72:	189b      	adds	r3, r3, r2
 8007c74:	9a05      	ldr	r2, [sp, #20]
 8007c76:	0c1f      	lsrs	r7, r3, #16
 8007c78:	3104      	adds	r1, #4
 8007c7a:	42aa      	cmp	r2, r5
 8007c7c:	d8e7      	bhi.n	8007c4e <__multiply+0x10e>
 8007c7e:	4662      	mov	r2, ip
 8007c80:	9906      	ldr	r1, [sp, #24]
 8007c82:	5053      	str	r3, [r2, r1]
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	3304      	adds	r3, #4
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	2304      	movs	r3, #4
 8007c8c:	449c      	add	ip, r3
 8007c8e:	e79b      	b.n	8007bc8 <__multiply+0x88>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	9303      	str	r3, [sp, #12]
 8007c96:	e79b      	b.n	8007bd0 <__multiply+0x90>
 8007c98:	08008db8 	.word	0x08008db8
 8007c9c:	08008dc9 	.word	0x08008dc9

08007ca0 <__pow5mult>:
 8007ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	0015      	movs	r5, r2
 8007ca6:	0007      	movs	r7, r0
 8007ca8:	000e      	movs	r6, r1
 8007caa:	401a      	ands	r2, r3
 8007cac:	421d      	tst	r5, r3
 8007cae:	d008      	beq.n	8007cc2 <__pow5mult+0x22>
 8007cb0:	4925      	ldr	r1, [pc, #148]	; (8007d48 <__pow5mult+0xa8>)
 8007cb2:	3a01      	subs	r2, #1
 8007cb4:	0092      	lsls	r2, r2, #2
 8007cb6:	5852      	ldr	r2, [r2, r1]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	0031      	movs	r1, r6
 8007cbc:	f7ff fe9c 	bl	80079f8 <__multadd>
 8007cc0:	0006      	movs	r6, r0
 8007cc2:	10ad      	asrs	r5, r5, #2
 8007cc4:	d03d      	beq.n	8007d42 <__pow5mult+0xa2>
 8007cc6:	69fc      	ldr	r4, [r7, #28]
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d10f      	bne.n	8007cec <__pow5mult+0x4c>
 8007ccc:	2010      	movs	r0, #16
 8007cce:	f7ff fd6d 	bl	80077ac <malloc>
 8007cd2:	1e02      	subs	r2, r0, #0
 8007cd4:	61f8      	str	r0, [r7, #28]
 8007cd6:	d105      	bne.n	8007ce4 <__pow5mult+0x44>
 8007cd8:	21b4      	movs	r1, #180	; 0xb4
 8007cda:	4b1c      	ldr	r3, [pc, #112]	; (8007d4c <__pow5mult+0xac>)
 8007cdc:	481c      	ldr	r0, [pc, #112]	; (8007d50 <__pow5mult+0xb0>)
 8007cde:	31ff      	adds	r1, #255	; 0xff
 8007ce0:	f000 fc02 	bl	80084e8 <__assert_func>
 8007ce4:	6044      	str	r4, [r0, #4]
 8007ce6:	6084      	str	r4, [r0, #8]
 8007ce8:	6004      	str	r4, [r0, #0]
 8007cea:	60c4      	str	r4, [r0, #12]
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	689c      	ldr	r4, [r3, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	2c00      	cmp	r4, #0
 8007cf4:	d108      	bne.n	8007d08 <__pow5mult+0x68>
 8007cf6:	0038      	movs	r0, r7
 8007cf8:	4916      	ldr	r1, [pc, #88]	; (8007d54 <__pow5mult+0xb4>)
 8007cfa:	f7ff ff09 	bl	8007b10 <__i2b>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	0004      	movs	r4, r0
 8007d02:	6098      	str	r0, [r3, #8]
 8007d04:	2300      	movs	r3, #0
 8007d06:	6003      	str	r3, [r0, #0]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	421d      	tst	r5, r3
 8007d0c:	d00a      	beq.n	8007d24 <__pow5mult+0x84>
 8007d0e:	0031      	movs	r1, r6
 8007d10:	0022      	movs	r2, r4
 8007d12:	0038      	movs	r0, r7
 8007d14:	f7ff ff14 	bl	8007b40 <__multiply>
 8007d18:	0031      	movs	r1, r6
 8007d1a:	9001      	str	r0, [sp, #4]
 8007d1c:	0038      	movs	r0, r7
 8007d1e:	f7ff fe47 	bl	80079b0 <_Bfree>
 8007d22:	9e01      	ldr	r6, [sp, #4]
 8007d24:	106d      	asrs	r5, r5, #1
 8007d26:	d00c      	beq.n	8007d42 <__pow5mult+0xa2>
 8007d28:	6820      	ldr	r0, [r4, #0]
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d107      	bne.n	8007d3e <__pow5mult+0x9e>
 8007d2e:	0022      	movs	r2, r4
 8007d30:	0021      	movs	r1, r4
 8007d32:	0038      	movs	r0, r7
 8007d34:	f7ff ff04 	bl	8007b40 <__multiply>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6020      	str	r0, [r4, #0]
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	0004      	movs	r4, r0
 8007d40:	e7e2      	b.n	8007d08 <__pow5mult+0x68>
 8007d42:	0030      	movs	r0, r6
 8007d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	08008f18 	.word	0x08008f18
 8007d4c:	08008d49 	.word	0x08008d49
 8007d50:	08008dc9 	.word	0x08008dc9
 8007d54:	00000271 	.word	0x00000271

08007d58 <__lshift>:
 8007d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5a:	000c      	movs	r4, r1
 8007d5c:	0017      	movs	r7, r2
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	1155      	asrs	r5, r2, #5
 8007d62:	b087      	sub	sp, #28
 8007d64:	18eb      	adds	r3, r5, r3
 8007d66:	9302      	str	r3, [sp, #8]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	6849      	ldr	r1, [r1, #4]
 8007d6e:	68a3      	ldr	r3, [r4, #8]
 8007d70:	9004      	str	r0, [sp, #16]
 8007d72:	9a01      	ldr	r2, [sp, #4]
 8007d74:	4293      	cmp	r3, r2
 8007d76:	db10      	blt.n	8007d9a <__lshift+0x42>
 8007d78:	9804      	ldr	r0, [sp, #16]
 8007d7a:	f7ff fdd5 	bl	8007928 <_Balloc>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	0002      	movs	r2, r0
 8007d82:	0006      	movs	r6, r0
 8007d84:	0019      	movs	r1, r3
 8007d86:	3214      	adds	r2, #20
 8007d88:	4298      	cmp	r0, r3
 8007d8a:	d10c      	bne.n	8007da6 <__lshift+0x4e>
 8007d8c:	31df      	adds	r1, #223	; 0xdf
 8007d8e:	0032      	movs	r2, r6
 8007d90:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <__lshift+0xd4>)
 8007d92:	4827      	ldr	r0, [pc, #156]	; (8007e30 <__lshift+0xd8>)
 8007d94:	31ff      	adds	r1, #255	; 0xff
 8007d96:	f000 fba7 	bl	80084e8 <__assert_func>
 8007d9a:	3101      	adds	r1, #1
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	e7e8      	b.n	8007d72 <__lshift+0x1a>
 8007da0:	0098      	lsls	r0, r3, #2
 8007da2:	5011      	str	r1, [r2, r0]
 8007da4:	3301      	adds	r3, #1
 8007da6:	42ab      	cmp	r3, r5
 8007da8:	dbfa      	blt.n	8007da0 <__lshift+0x48>
 8007daa:	43eb      	mvns	r3, r5
 8007dac:	17db      	asrs	r3, r3, #31
 8007dae:	401d      	ands	r5, r3
 8007db0:	211f      	movs	r1, #31
 8007db2:	0023      	movs	r3, r4
 8007db4:	0038      	movs	r0, r7
 8007db6:	00ad      	lsls	r5, r5, #2
 8007db8:	1955      	adds	r5, r2, r5
 8007dba:	6922      	ldr	r2, [r4, #16]
 8007dbc:	3314      	adds	r3, #20
 8007dbe:	0092      	lsls	r2, r2, #2
 8007dc0:	4008      	ands	r0, r1
 8007dc2:	4684      	mov	ip, r0
 8007dc4:	189a      	adds	r2, r3, r2
 8007dc6:	420f      	tst	r7, r1
 8007dc8:	d02a      	beq.n	8007e20 <__lshift+0xc8>
 8007dca:	3101      	adds	r1, #1
 8007dcc:	1a09      	subs	r1, r1, r0
 8007dce:	9105      	str	r1, [sp, #20]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	9503      	str	r5, [sp, #12]
 8007dd4:	4667      	mov	r7, ip
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	40b8      	lsls	r0, r7
 8007dda:	4308      	orrs	r0, r1
 8007ddc:	9903      	ldr	r1, [sp, #12]
 8007dde:	c101      	stmia	r1!, {r0}
 8007de0:	9103      	str	r1, [sp, #12]
 8007de2:	9805      	ldr	r0, [sp, #20]
 8007de4:	cb02      	ldmia	r3!, {r1}
 8007de6:	40c1      	lsrs	r1, r0
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d8f3      	bhi.n	8007dd4 <__lshift+0x7c>
 8007dec:	0020      	movs	r0, r4
 8007dee:	3015      	adds	r0, #21
 8007df0:	2304      	movs	r3, #4
 8007df2:	4282      	cmp	r2, r0
 8007df4:	d304      	bcc.n	8007e00 <__lshift+0xa8>
 8007df6:	1b13      	subs	r3, r2, r4
 8007df8:	3b15      	subs	r3, #21
 8007dfa:	089b      	lsrs	r3, r3, #2
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	50e9      	str	r1, [r5, r3]
 8007e02:	2900      	cmp	r1, #0
 8007e04:	d002      	beq.n	8007e0c <__lshift+0xb4>
 8007e06:	9b02      	ldr	r3, [sp, #8]
 8007e08:	3302      	adds	r3, #2
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	9804      	ldr	r0, [sp, #16]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	0021      	movs	r1, r4
 8007e14:	6133      	str	r3, [r6, #16]
 8007e16:	f7ff fdcb 	bl	80079b0 <_Bfree>
 8007e1a:	0030      	movs	r0, r6
 8007e1c:	b007      	add	sp, #28
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e20:	cb02      	ldmia	r3!, {r1}
 8007e22:	c502      	stmia	r5!, {r1}
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d8fb      	bhi.n	8007e20 <__lshift+0xc8>
 8007e28:	e7f0      	b.n	8007e0c <__lshift+0xb4>
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	08008db8 	.word	0x08008db8
 8007e30:	08008dc9 	.word	0x08008dc9

08007e34 <__mcmp>:
 8007e34:	b530      	push	{r4, r5, lr}
 8007e36:	690b      	ldr	r3, [r1, #16]
 8007e38:	6904      	ldr	r4, [r0, #16]
 8007e3a:	0002      	movs	r2, r0
 8007e3c:	1ae0      	subs	r0, r4, r3
 8007e3e:	429c      	cmp	r4, r3
 8007e40:	d10e      	bne.n	8007e60 <__mcmp+0x2c>
 8007e42:	3214      	adds	r2, #20
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	3114      	adds	r1, #20
 8007e48:	0014      	movs	r4, r2
 8007e4a:	18c9      	adds	r1, r1, r3
 8007e4c:	18d2      	adds	r2, r2, r3
 8007e4e:	3a04      	subs	r2, #4
 8007e50:	3904      	subs	r1, #4
 8007e52:	6815      	ldr	r5, [r2, #0]
 8007e54:	680b      	ldr	r3, [r1, #0]
 8007e56:	429d      	cmp	r5, r3
 8007e58:	d003      	beq.n	8007e62 <__mcmp+0x2e>
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	429d      	cmp	r5, r3
 8007e5e:	d303      	bcc.n	8007e68 <__mcmp+0x34>
 8007e60:	bd30      	pop	{r4, r5, pc}
 8007e62:	4294      	cmp	r4, r2
 8007e64:	d3f3      	bcc.n	8007e4e <__mcmp+0x1a>
 8007e66:	e7fb      	b.n	8007e60 <__mcmp+0x2c>
 8007e68:	4240      	negs	r0, r0
 8007e6a:	e7f9      	b.n	8007e60 <__mcmp+0x2c>

08007e6c <__mdiff>:
 8007e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6e:	000e      	movs	r6, r1
 8007e70:	0007      	movs	r7, r0
 8007e72:	0011      	movs	r1, r2
 8007e74:	0030      	movs	r0, r6
 8007e76:	b087      	sub	sp, #28
 8007e78:	0014      	movs	r4, r2
 8007e7a:	f7ff ffdb 	bl	8007e34 <__mcmp>
 8007e7e:	1e05      	subs	r5, r0, #0
 8007e80:	d110      	bne.n	8007ea4 <__mdiff+0x38>
 8007e82:	0001      	movs	r1, r0
 8007e84:	0038      	movs	r0, r7
 8007e86:	f7ff fd4f 	bl	8007928 <_Balloc>
 8007e8a:	1e02      	subs	r2, r0, #0
 8007e8c:	d104      	bne.n	8007e98 <__mdiff+0x2c>
 8007e8e:	4b3f      	ldr	r3, [pc, #252]	; (8007f8c <__mdiff+0x120>)
 8007e90:	483f      	ldr	r0, [pc, #252]	; (8007f90 <__mdiff+0x124>)
 8007e92:	4940      	ldr	r1, [pc, #256]	; (8007f94 <__mdiff+0x128>)
 8007e94:	f000 fb28 	bl	80084e8 <__assert_func>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	6145      	str	r5, [r0, #20]
 8007e9c:	6103      	str	r3, [r0, #16]
 8007e9e:	0010      	movs	r0, r2
 8007ea0:	b007      	add	sp, #28
 8007ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	db04      	blt.n	8007eb6 <__mdiff+0x4a>
 8007eac:	0023      	movs	r3, r4
 8007eae:	0034      	movs	r4, r6
 8007eb0:	001e      	movs	r6, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	0038      	movs	r0, r7
 8007eb8:	6861      	ldr	r1, [r4, #4]
 8007eba:	f7ff fd35 	bl	8007928 <_Balloc>
 8007ebe:	1e02      	subs	r2, r0, #0
 8007ec0:	d103      	bne.n	8007eca <__mdiff+0x5e>
 8007ec2:	4b32      	ldr	r3, [pc, #200]	; (8007f8c <__mdiff+0x120>)
 8007ec4:	4832      	ldr	r0, [pc, #200]	; (8007f90 <__mdiff+0x124>)
 8007ec6:	4934      	ldr	r1, [pc, #208]	; (8007f98 <__mdiff+0x12c>)
 8007ec8:	e7e4      	b.n	8007e94 <__mdiff+0x28>
 8007eca:	9b01      	ldr	r3, [sp, #4]
 8007ecc:	2700      	movs	r7, #0
 8007ece:	60c3      	str	r3, [r0, #12]
 8007ed0:	6920      	ldr	r0, [r4, #16]
 8007ed2:	3414      	adds	r4, #20
 8007ed4:	0083      	lsls	r3, r0, #2
 8007ed6:	18e3      	adds	r3, r4, r3
 8007ed8:	0021      	movs	r1, r4
 8007eda:	9401      	str	r4, [sp, #4]
 8007edc:	0034      	movs	r4, r6
 8007ede:	9302      	str	r3, [sp, #8]
 8007ee0:	6933      	ldr	r3, [r6, #16]
 8007ee2:	3414      	adds	r4, #20
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	18e3      	adds	r3, r4, r3
 8007ee8:	9303      	str	r3, [sp, #12]
 8007eea:	0013      	movs	r3, r2
 8007eec:	3314      	adds	r3, #20
 8007eee:	469c      	mov	ip, r3
 8007ef0:	9305      	str	r3, [sp, #20]
 8007ef2:	9104      	str	r1, [sp, #16]
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	cc02      	ldmia	r4!, {r1}
 8007ef8:	cb20      	ldmia	r3!, {r5}
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	b2ab      	uxth	r3, r5
 8007efe:	19df      	adds	r7, r3, r7
 8007f00:	b28b      	uxth	r3, r1
 8007f02:	1afb      	subs	r3, r7, r3
 8007f04:	0c09      	lsrs	r1, r1, #16
 8007f06:	0c2d      	lsrs	r5, r5, #16
 8007f08:	1a6d      	subs	r5, r5, r1
 8007f0a:	1419      	asrs	r1, r3, #16
 8007f0c:	1869      	adds	r1, r5, r1
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	140f      	asrs	r7, r1, #16
 8007f12:	0409      	lsls	r1, r1, #16
 8007f14:	4319      	orrs	r1, r3
 8007f16:	4663      	mov	r3, ip
 8007f18:	c302      	stmia	r3!, {r1}
 8007f1a:	469c      	mov	ip, r3
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	42a3      	cmp	r3, r4
 8007f20:	d8e8      	bhi.n	8007ef4 <__mdiff+0x88>
 8007f22:	0031      	movs	r1, r6
 8007f24:	9c03      	ldr	r4, [sp, #12]
 8007f26:	3115      	adds	r1, #21
 8007f28:	2304      	movs	r3, #4
 8007f2a:	428c      	cmp	r4, r1
 8007f2c:	d304      	bcc.n	8007f38 <__mdiff+0xcc>
 8007f2e:	1ba3      	subs	r3, r4, r6
 8007f30:	3b15      	subs	r3, #21
 8007f32:	089b      	lsrs	r3, r3, #2
 8007f34:	3301      	adds	r3, #1
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	9901      	ldr	r1, [sp, #4]
 8007f3a:	18cd      	adds	r5, r1, r3
 8007f3c:	9905      	ldr	r1, [sp, #20]
 8007f3e:	002e      	movs	r6, r5
 8007f40:	18cb      	adds	r3, r1, r3
 8007f42:	469c      	mov	ip, r3
 8007f44:	9902      	ldr	r1, [sp, #8]
 8007f46:	428e      	cmp	r6, r1
 8007f48:	d310      	bcc.n	8007f6c <__mdiff+0x100>
 8007f4a:	9e02      	ldr	r6, [sp, #8]
 8007f4c:	1ee9      	subs	r1, r5, #3
 8007f4e:	2400      	movs	r4, #0
 8007f50:	428e      	cmp	r6, r1
 8007f52:	d304      	bcc.n	8007f5e <__mdiff+0xf2>
 8007f54:	0031      	movs	r1, r6
 8007f56:	3103      	adds	r1, #3
 8007f58:	1b49      	subs	r1, r1, r5
 8007f5a:	0889      	lsrs	r1, r1, #2
 8007f5c:	008c      	lsls	r4, r1, #2
 8007f5e:	191b      	adds	r3, r3, r4
 8007f60:	3b04      	subs	r3, #4
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d00f      	beq.n	8007f88 <__mdiff+0x11c>
 8007f68:	6110      	str	r0, [r2, #16]
 8007f6a:	e798      	b.n	8007e9e <__mdiff+0x32>
 8007f6c:	ce02      	ldmia	r6!, {r1}
 8007f6e:	b28c      	uxth	r4, r1
 8007f70:	19e4      	adds	r4, r4, r7
 8007f72:	0c0f      	lsrs	r7, r1, #16
 8007f74:	1421      	asrs	r1, r4, #16
 8007f76:	1879      	adds	r1, r7, r1
 8007f78:	b2a4      	uxth	r4, r4
 8007f7a:	140f      	asrs	r7, r1, #16
 8007f7c:	0409      	lsls	r1, r1, #16
 8007f7e:	4321      	orrs	r1, r4
 8007f80:	4664      	mov	r4, ip
 8007f82:	c402      	stmia	r4!, {r1}
 8007f84:	46a4      	mov	ip, r4
 8007f86:	e7dd      	b.n	8007f44 <__mdiff+0xd8>
 8007f88:	3801      	subs	r0, #1
 8007f8a:	e7e9      	b.n	8007f60 <__mdiff+0xf4>
 8007f8c:	08008db8 	.word	0x08008db8
 8007f90:	08008dc9 	.word	0x08008dc9
 8007f94:	00000237 	.word	0x00000237
 8007f98:	00000245 	.word	0x00000245

08007f9c <__d2b>:
 8007f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	0014      	movs	r4, r2
 8007fa2:	001d      	movs	r5, r3
 8007fa4:	9f08      	ldr	r7, [sp, #32]
 8007fa6:	f7ff fcbf 	bl	8007928 <_Balloc>
 8007faa:	1e06      	subs	r6, r0, #0
 8007fac:	d105      	bne.n	8007fba <__d2b+0x1e>
 8007fae:	0032      	movs	r2, r6
 8007fb0:	4b24      	ldr	r3, [pc, #144]	; (8008044 <__d2b+0xa8>)
 8007fb2:	4825      	ldr	r0, [pc, #148]	; (8008048 <__d2b+0xac>)
 8007fb4:	4925      	ldr	r1, [pc, #148]	; (800804c <__d2b+0xb0>)
 8007fb6:	f000 fa97 	bl	80084e8 <__assert_func>
 8007fba:	032b      	lsls	r3, r5, #12
 8007fbc:	006d      	lsls	r5, r5, #1
 8007fbe:	0b1b      	lsrs	r3, r3, #12
 8007fc0:	0d6d      	lsrs	r5, r5, #21
 8007fc2:	d125      	bne.n	8008010 <__d2b+0x74>
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	2c00      	cmp	r4, #0
 8007fc8:	d028      	beq.n	800801c <__d2b+0x80>
 8007fca:	4668      	mov	r0, sp
 8007fcc:	9400      	str	r4, [sp, #0]
 8007fce:	f7ff fd71 	bl	8007ab4 <__lo0bits>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	9900      	ldr	r1, [sp, #0]
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d01e      	beq.n	8008018 <__d2b+0x7c>
 8007fda:	2220      	movs	r2, #32
 8007fdc:	001c      	movs	r4, r3
 8007fde:	1a12      	subs	r2, r2, r0
 8007fe0:	4094      	lsls	r4, r2
 8007fe2:	0022      	movs	r2, r4
 8007fe4:	40c3      	lsrs	r3, r0
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	6172      	str	r2, [r6, #20]
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	9c01      	ldr	r4, [sp, #4]
 8007fee:	61b4      	str	r4, [r6, #24]
 8007ff0:	1e63      	subs	r3, r4, #1
 8007ff2:	419c      	sbcs	r4, r3
 8007ff4:	3401      	adds	r4, #1
 8007ff6:	6134      	str	r4, [r6, #16]
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	d017      	beq.n	800802c <__d2b+0x90>
 8007ffc:	2435      	movs	r4, #53	; 0x35
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <__d2b+0xb4>)
 8008000:	18ed      	adds	r5, r5, r3
 8008002:	182d      	adds	r5, r5, r0
 8008004:	603d      	str	r5, [r7, #0]
 8008006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008008:	1a24      	subs	r4, r4, r0
 800800a:	601c      	str	r4, [r3, #0]
 800800c:	0030      	movs	r0, r6
 800800e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008010:	2280      	movs	r2, #128	; 0x80
 8008012:	0352      	lsls	r2, r2, #13
 8008014:	4313      	orrs	r3, r2
 8008016:	e7d5      	b.n	8007fc4 <__d2b+0x28>
 8008018:	6171      	str	r1, [r6, #20]
 800801a:	e7e7      	b.n	8007fec <__d2b+0x50>
 800801c:	a801      	add	r0, sp, #4
 800801e:	f7ff fd49 	bl	8007ab4 <__lo0bits>
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	2401      	movs	r4, #1
 8008026:	6173      	str	r3, [r6, #20]
 8008028:	3020      	adds	r0, #32
 800802a:	e7e4      	b.n	8007ff6 <__d2b+0x5a>
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <__d2b+0xb8>)
 800802e:	18c0      	adds	r0, r0, r3
 8008030:	4b09      	ldr	r3, [pc, #36]	; (8008058 <__d2b+0xbc>)
 8008032:	6038      	str	r0, [r7, #0]
 8008034:	18e3      	adds	r3, r4, r3
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	18f3      	adds	r3, r6, r3
 800803a:	6958      	ldr	r0, [r3, #20]
 800803c:	f7ff fd20 	bl	8007a80 <__hi0bits>
 8008040:	0164      	lsls	r4, r4, #5
 8008042:	e7e0      	b.n	8008006 <__d2b+0x6a>
 8008044:	08008db8 	.word	0x08008db8
 8008048:	08008dc9 	.word	0x08008dc9
 800804c:	0000030f 	.word	0x0000030f
 8008050:	fffffbcd 	.word	0xfffffbcd
 8008054:	fffffbce 	.word	0xfffffbce
 8008058:	3fffffff 	.word	0x3fffffff

0800805c <__ssputs_r>:
 800805c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805e:	b085      	sub	sp, #20
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	9203      	str	r2, [sp, #12]
 8008064:	688e      	ldr	r6, [r1, #8]
 8008066:	9a01      	ldr	r2, [sp, #4]
 8008068:	0007      	movs	r7, r0
 800806a:	000c      	movs	r4, r1
 800806c:	680b      	ldr	r3, [r1, #0]
 800806e:	4296      	cmp	r6, r2
 8008070:	d831      	bhi.n	80080d6 <__ssputs_r+0x7a>
 8008072:	898a      	ldrh	r2, [r1, #12]
 8008074:	2190      	movs	r1, #144	; 0x90
 8008076:	00c9      	lsls	r1, r1, #3
 8008078:	420a      	tst	r2, r1
 800807a:	d029      	beq.n	80080d0 <__ssputs_r+0x74>
 800807c:	2003      	movs	r0, #3
 800807e:	6921      	ldr	r1, [r4, #16]
 8008080:	1a5b      	subs	r3, r3, r1
 8008082:	9302      	str	r3, [sp, #8]
 8008084:	6963      	ldr	r3, [r4, #20]
 8008086:	4343      	muls	r3, r0
 8008088:	0fdd      	lsrs	r5, r3, #31
 800808a:	18ed      	adds	r5, r5, r3
 800808c:	9b01      	ldr	r3, [sp, #4]
 800808e:	9802      	ldr	r0, [sp, #8]
 8008090:	3301      	adds	r3, #1
 8008092:	181b      	adds	r3, r3, r0
 8008094:	106d      	asrs	r5, r5, #1
 8008096:	42ab      	cmp	r3, r5
 8008098:	d900      	bls.n	800809c <__ssputs_r+0x40>
 800809a:	001d      	movs	r5, r3
 800809c:	0552      	lsls	r2, r2, #21
 800809e:	d529      	bpl.n	80080f4 <__ssputs_r+0x98>
 80080a0:	0029      	movs	r1, r5
 80080a2:	0038      	movs	r0, r7
 80080a4:	f7ff fbae 	bl	8007804 <_malloc_r>
 80080a8:	1e06      	subs	r6, r0, #0
 80080aa:	d02d      	beq.n	8008108 <__ssputs_r+0xac>
 80080ac:	9a02      	ldr	r2, [sp, #8]
 80080ae:	6921      	ldr	r1, [r4, #16]
 80080b0:	f000 fa10 	bl	80084d4 <memcpy>
 80080b4:	89a2      	ldrh	r2, [r4, #12]
 80080b6:	4b19      	ldr	r3, [pc, #100]	; (800811c <__ssputs_r+0xc0>)
 80080b8:	401a      	ands	r2, r3
 80080ba:	2380      	movs	r3, #128	; 0x80
 80080bc:	4313      	orrs	r3, r2
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	6126      	str	r6, [r4, #16]
 80080c4:	18f6      	adds	r6, r6, r3
 80080c6:	6026      	str	r6, [r4, #0]
 80080c8:	6165      	str	r5, [r4, #20]
 80080ca:	9e01      	ldr	r6, [sp, #4]
 80080cc:	1aed      	subs	r5, r5, r3
 80080ce:	60a5      	str	r5, [r4, #8]
 80080d0:	9b01      	ldr	r3, [sp, #4]
 80080d2:	429e      	cmp	r6, r3
 80080d4:	d900      	bls.n	80080d8 <__ssputs_r+0x7c>
 80080d6:	9e01      	ldr	r6, [sp, #4]
 80080d8:	0032      	movs	r2, r6
 80080da:	9903      	ldr	r1, [sp, #12]
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	f000 f9d4 	bl	800848a <memmove>
 80080e2:	2000      	movs	r0, #0
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	1b9b      	subs	r3, r3, r6
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	199b      	adds	r3, r3, r6
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	b005      	add	sp, #20
 80080f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f4:	002a      	movs	r2, r5
 80080f6:	0038      	movs	r0, r7
 80080f8:	f000 fa53 	bl	80085a2 <_realloc_r>
 80080fc:	1e06      	subs	r6, r0, #0
 80080fe:	d1df      	bne.n	80080c0 <__ssputs_r+0x64>
 8008100:	0038      	movs	r0, r7
 8008102:	6921      	ldr	r1, [r4, #16]
 8008104:	f7ff fb08 	bl	8007718 <_free_r>
 8008108:	230c      	movs	r3, #12
 800810a:	2001      	movs	r0, #1
 800810c:	603b      	str	r3, [r7, #0]
 800810e:	89a2      	ldrh	r2, [r4, #12]
 8008110:	3334      	adds	r3, #52	; 0x34
 8008112:	4313      	orrs	r3, r2
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	4240      	negs	r0, r0
 8008118:	e7ea      	b.n	80080f0 <__ssputs_r+0x94>
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	fffffb7f 	.word	0xfffffb7f

08008120 <_svfiprintf_r>:
 8008120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008122:	b0a1      	sub	sp, #132	; 0x84
 8008124:	9003      	str	r0, [sp, #12]
 8008126:	001d      	movs	r5, r3
 8008128:	898b      	ldrh	r3, [r1, #12]
 800812a:	000f      	movs	r7, r1
 800812c:	0016      	movs	r6, r2
 800812e:	061b      	lsls	r3, r3, #24
 8008130:	d511      	bpl.n	8008156 <_svfiprintf_r+0x36>
 8008132:	690b      	ldr	r3, [r1, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10e      	bne.n	8008156 <_svfiprintf_r+0x36>
 8008138:	2140      	movs	r1, #64	; 0x40
 800813a:	f7ff fb63 	bl	8007804 <_malloc_r>
 800813e:	6038      	str	r0, [r7, #0]
 8008140:	6138      	str	r0, [r7, #16]
 8008142:	2800      	cmp	r0, #0
 8008144:	d105      	bne.n	8008152 <_svfiprintf_r+0x32>
 8008146:	230c      	movs	r3, #12
 8008148:	9a03      	ldr	r2, [sp, #12]
 800814a:	3801      	subs	r0, #1
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	b021      	add	sp, #132	; 0x84
 8008150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	2300      	movs	r3, #0
 8008158:	ac08      	add	r4, sp, #32
 800815a:	6163      	str	r3, [r4, #20]
 800815c:	3320      	adds	r3, #32
 800815e:	7663      	strb	r3, [r4, #25]
 8008160:	3310      	adds	r3, #16
 8008162:	76a3      	strb	r3, [r4, #26]
 8008164:	9507      	str	r5, [sp, #28]
 8008166:	0035      	movs	r5, r6
 8008168:	782b      	ldrb	r3, [r5, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <_svfiprintf_r+0x52>
 800816e:	2b25      	cmp	r3, #37	; 0x25
 8008170:	d148      	bne.n	8008204 <_svfiprintf_r+0xe4>
 8008172:	1bab      	subs	r3, r5, r6
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	42b5      	cmp	r5, r6
 8008178:	d00b      	beq.n	8008192 <_svfiprintf_r+0x72>
 800817a:	0032      	movs	r2, r6
 800817c:	0039      	movs	r1, r7
 800817e:	9803      	ldr	r0, [sp, #12]
 8008180:	f7ff ff6c 	bl	800805c <__ssputs_r>
 8008184:	3001      	adds	r0, #1
 8008186:	d100      	bne.n	800818a <_svfiprintf_r+0x6a>
 8008188:	e0af      	b.n	80082ea <_svfiprintf_r+0x1ca>
 800818a:	6963      	ldr	r3, [r4, #20]
 800818c:	9a05      	ldr	r2, [sp, #20]
 800818e:	189b      	adds	r3, r3, r2
 8008190:	6163      	str	r3, [r4, #20]
 8008192:	782b      	ldrb	r3, [r5, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d100      	bne.n	800819a <_svfiprintf_r+0x7a>
 8008198:	e0a7      	b.n	80082ea <_svfiprintf_r+0x1ca>
 800819a:	2201      	movs	r2, #1
 800819c:	2300      	movs	r3, #0
 800819e:	4252      	negs	r2, r2
 80081a0:	6062      	str	r2, [r4, #4]
 80081a2:	a904      	add	r1, sp, #16
 80081a4:	3254      	adds	r2, #84	; 0x54
 80081a6:	1852      	adds	r2, r2, r1
 80081a8:	1c6e      	adds	r6, r5, #1
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	60e3      	str	r3, [r4, #12]
 80081ae:	60a3      	str	r3, [r4, #8]
 80081b0:	7013      	strb	r3, [r2, #0]
 80081b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80081b4:	4b55      	ldr	r3, [pc, #340]	; (800830c <_svfiprintf_r+0x1ec>)
 80081b6:	2205      	movs	r2, #5
 80081b8:	0018      	movs	r0, r3
 80081ba:	7831      	ldrb	r1, [r6, #0]
 80081bc:	9305      	str	r3, [sp, #20]
 80081be:	f7fe fc02 	bl	80069c6 <memchr>
 80081c2:	1c75      	adds	r5, r6, #1
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d11f      	bne.n	8008208 <_svfiprintf_r+0xe8>
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	06d3      	lsls	r3, r2, #27
 80081cc:	d504      	bpl.n	80081d8 <_svfiprintf_r+0xb8>
 80081ce:	2353      	movs	r3, #83	; 0x53
 80081d0:	a904      	add	r1, sp, #16
 80081d2:	185b      	adds	r3, r3, r1
 80081d4:	2120      	movs	r1, #32
 80081d6:	7019      	strb	r1, [r3, #0]
 80081d8:	0713      	lsls	r3, r2, #28
 80081da:	d504      	bpl.n	80081e6 <_svfiprintf_r+0xc6>
 80081dc:	2353      	movs	r3, #83	; 0x53
 80081de:	a904      	add	r1, sp, #16
 80081e0:	185b      	adds	r3, r3, r1
 80081e2:	212b      	movs	r1, #43	; 0x2b
 80081e4:	7019      	strb	r1, [r3, #0]
 80081e6:	7833      	ldrb	r3, [r6, #0]
 80081e8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ea:	d016      	beq.n	800821a <_svfiprintf_r+0xfa>
 80081ec:	0035      	movs	r5, r6
 80081ee:	2100      	movs	r1, #0
 80081f0:	200a      	movs	r0, #10
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	782a      	ldrb	r2, [r5, #0]
 80081f6:	1c6e      	adds	r6, r5, #1
 80081f8:	3a30      	subs	r2, #48	; 0x30
 80081fa:	2a09      	cmp	r2, #9
 80081fc:	d94e      	bls.n	800829c <_svfiprintf_r+0x17c>
 80081fe:	2900      	cmp	r1, #0
 8008200:	d111      	bne.n	8008226 <_svfiprintf_r+0x106>
 8008202:	e017      	b.n	8008234 <_svfiprintf_r+0x114>
 8008204:	3501      	adds	r5, #1
 8008206:	e7af      	b.n	8008168 <_svfiprintf_r+0x48>
 8008208:	9b05      	ldr	r3, [sp, #20]
 800820a:	6822      	ldr	r2, [r4, #0]
 800820c:	1ac0      	subs	r0, r0, r3
 800820e:	2301      	movs	r3, #1
 8008210:	4083      	lsls	r3, r0
 8008212:	4313      	orrs	r3, r2
 8008214:	002e      	movs	r6, r5
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	e7cc      	b.n	80081b4 <_svfiprintf_r+0x94>
 800821a:	9b07      	ldr	r3, [sp, #28]
 800821c:	1d19      	adds	r1, r3, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	9107      	str	r1, [sp, #28]
 8008222:	2b00      	cmp	r3, #0
 8008224:	db01      	blt.n	800822a <_svfiprintf_r+0x10a>
 8008226:	930b      	str	r3, [sp, #44]	; 0x2c
 8008228:	e004      	b.n	8008234 <_svfiprintf_r+0x114>
 800822a:	425b      	negs	r3, r3
 800822c:	60e3      	str	r3, [r4, #12]
 800822e:	2302      	movs	r3, #2
 8008230:	4313      	orrs	r3, r2
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	782b      	ldrb	r3, [r5, #0]
 8008236:	2b2e      	cmp	r3, #46	; 0x2e
 8008238:	d10a      	bne.n	8008250 <_svfiprintf_r+0x130>
 800823a:	786b      	ldrb	r3, [r5, #1]
 800823c:	2b2a      	cmp	r3, #42	; 0x2a
 800823e:	d135      	bne.n	80082ac <_svfiprintf_r+0x18c>
 8008240:	9b07      	ldr	r3, [sp, #28]
 8008242:	3502      	adds	r5, #2
 8008244:	1d1a      	adds	r2, r3, #4
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	9207      	str	r2, [sp, #28]
 800824a:	2b00      	cmp	r3, #0
 800824c:	db2b      	blt.n	80082a6 <_svfiprintf_r+0x186>
 800824e:	9309      	str	r3, [sp, #36]	; 0x24
 8008250:	4e2f      	ldr	r6, [pc, #188]	; (8008310 <_svfiprintf_r+0x1f0>)
 8008252:	2203      	movs	r2, #3
 8008254:	0030      	movs	r0, r6
 8008256:	7829      	ldrb	r1, [r5, #0]
 8008258:	f7fe fbb5 	bl	80069c6 <memchr>
 800825c:	2800      	cmp	r0, #0
 800825e:	d006      	beq.n	800826e <_svfiprintf_r+0x14e>
 8008260:	2340      	movs	r3, #64	; 0x40
 8008262:	1b80      	subs	r0, r0, r6
 8008264:	4083      	lsls	r3, r0
 8008266:	6822      	ldr	r2, [r4, #0]
 8008268:	3501      	adds	r5, #1
 800826a:	4313      	orrs	r3, r2
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	7829      	ldrb	r1, [r5, #0]
 8008270:	2206      	movs	r2, #6
 8008272:	4828      	ldr	r0, [pc, #160]	; (8008314 <_svfiprintf_r+0x1f4>)
 8008274:	1c6e      	adds	r6, r5, #1
 8008276:	7621      	strb	r1, [r4, #24]
 8008278:	f7fe fba5 	bl	80069c6 <memchr>
 800827c:	2800      	cmp	r0, #0
 800827e:	d03c      	beq.n	80082fa <_svfiprintf_r+0x1da>
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <_svfiprintf_r+0x1f8>)
 8008282:	2b00      	cmp	r3, #0
 8008284:	d125      	bne.n	80082d2 <_svfiprintf_r+0x1b2>
 8008286:	2207      	movs	r2, #7
 8008288:	9b07      	ldr	r3, [sp, #28]
 800828a:	3307      	adds	r3, #7
 800828c:	4393      	bics	r3, r2
 800828e:	3308      	adds	r3, #8
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	6963      	ldr	r3, [r4, #20]
 8008294:	9a04      	ldr	r2, [sp, #16]
 8008296:	189b      	adds	r3, r3, r2
 8008298:	6163      	str	r3, [r4, #20]
 800829a:	e764      	b.n	8008166 <_svfiprintf_r+0x46>
 800829c:	4343      	muls	r3, r0
 800829e:	0035      	movs	r5, r6
 80082a0:	2101      	movs	r1, #1
 80082a2:	189b      	adds	r3, r3, r2
 80082a4:	e7a6      	b.n	80081f4 <_svfiprintf_r+0xd4>
 80082a6:	2301      	movs	r3, #1
 80082a8:	425b      	negs	r3, r3
 80082aa:	e7d0      	b.n	800824e <_svfiprintf_r+0x12e>
 80082ac:	2300      	movs	r3, #0
 80082ae:	200a      	movs	r0, #10
 80082b0:	001a      	movs	r2, r3
 80082b2:	3501      	adds	r5, #1
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	7829      	ldrb	r1, [r5, #0]
 80082b8:	1c6e      	adds	r6, r5, #1
 80082ba:	3930      	subs	r1, #48	; 0x30
 80082bc:	2909      	cmp	r1, #9
 80082be:	d903      	bls.n	80082c8 <_svfiprintf_r+0x1a8>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0c5      	beq.n	8008250 <_svfiprintf_r+0x130>
 80082c4:	9209      	str	r2, [sp, #36]	; 0x24
 80082c6:	e7c3      	b.n	8008250 <_svfiprintf_r+0x130>
 80082c8:	4342      	muls	r2, r0
 80082ca:	0035      	movs	r5, r6
 80082cc:	2301      	movs	r3, #1
 80082ce:	1852      	adds	r2, r2, r1
 80082d0:	e7f1      	b.n	80082b6 <_svfiprintf_r+0x196>
 80082d2:	aa07      	add	r2, sp, #28
 80082d4:	9200      	str	r2, [sp, #0]
 80082d6:	0021      	movs	r1, r4
 80082d8:	003a      	movs	r2, r7
 80082da:	4b10      	ldr	r3, [pc, #64]	; (800831c <_svfiprintf_r+0x1fc>)
 80082dc:	9803      	ldr	r0, [sp, #12]
 80082de:	f7fd fde5 	bl	8005eac <_printf_float>
 80082e2:	9004      	str	r0, [sp, #16]
 80082e4:	9b04      	ldr	r3, [sp, #16]
 80082e6:	3301      	adds	r3, #1
 80082e8:	d1d3      	bne.n	8008292 <_svfiprintf_r+0x172>
 80082ea:	89bb      	ldrh	r3, [r7, #12]
 80082ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80082ee:	065b      	lsls	r3, r3, #25
 80082f0:	d400      	bmi.n	80082f4 <_svfiprintf_r+0x1d4>
 80082f2:	e72c      	b.n	800814e <_svfiprintf_r+0x2e>
 80082f4:	2001      	movs	r0, #1
 80082f6:	4240      	negs	r0, r0
 80082f8:	e729      	b.n	800814e <_svfiprintf_r+0x2e>
 80082fa:	aa07      	add	r2, sp, #28
 80082fc:	9200      	str	r2, [sp, #0]
 80082fe:	0021      	movs	r1, r4
 8008300:	003a      	movs	r2, r7
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <_svfiprintf_r+0x1fc>)
 8008304:	9803      	ldr	r0, [sp, #12]
 8008306:	f7fe f897 	bl	8006438 <_printf_i>
 800830a:	e7ea      	b.n	80082e2 <_svfiprintf_r+0x1c2>
 800830c:	08008f24 	.word	0x08008f24
 8008310:	08008f2a 	.word	0x08008f2a
 8008314:	08008f2e 	.word	0x08008f2e
 8008318:	08005ead 	.word	0x08005ead
 800831c:	0800805d 	.word	0x0800805d

08008320 <__sflush_r>:
 8008320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008322:	898b      	ldrh	r3, [r1, #12]
 8008324:	0005      	movs	r5, r0
 8008326:	000c      	movs	r4, r1
 8008328:	071a      	lsls	r2, r3, #28
 800832a:	d45c      	bmi.n	80083e6 <__sflush_r+0xc6>
 800832c:	684a      	ldr	r2, [r1, #4]
 800832e:	2a00      	cmp	r2, #0
 8008330:	dc04      	bgt.n	800833c <__sflush_r+0x1c>
 8008332:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008334:	2a00      	cmp	r2, #0
 8008336:	dc01      	bgt.n	800833c <__sflush_r+0x1c>
 8008338:	2000      	movs	r0, #0
 800833a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800833c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800833e:	2f00      	cmp	r7, #0
 8008340:	d0fa      	beq.n	8008338 <__sflush_r+0x18>
 8008342:	2200      	movs	r2, #0
 8008344:	2080      	movs	r0, #128	; 0x80
 8008346:	682e      	ldr	r6, [r5, #0]
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	001a      	movs	r2, r3
 800834c:	0140      	lsls	r0, r0, #5
 800834e:	6a21      	ldr	r1, [r4, #32]
 8008350:	4002      	ands	r2, r0
 8008352:	4203      	tst	r3, r0
 8008354:	d034      	beq.n	80083c0 <__sflush_r+0xa0>
 8008356:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	075b      	lsls	r3, r3, #29
 800835c:	d506      	bpl.n	800836c <__sflush_r+0x4c>
 800835e:	6863      	ldr	r3, [r4, #4]
 8008360:	1ac0      	subs	r0, r0, r3
 8008362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <__sflush_r+0x4c>
 8008368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800836a:	1ac0      	subs	r0, r0, r3
 800836c:	0002      	movs	r2, r0
 800836e:	2300      	movs	r3, #0
 8008370:	0028      	movs	r0, r5
 8008372:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008374:	6a21      	ldr	r1, [r4, #32]
 8008376:	47b8      	blx	r7
 8008378:	89a2      	ldrh	r2, [r4, #12]
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d106      	bne.n	800838c <__sflush_r+0x6c>
 800837e:	6829      	ldr	r1, [r5, #0]
 8008380:	291d      	cmp	r1, #29
 8008382:	d82c      	bhi.n	80083de <__sflush_r+0xbe>
 8008384:	4b2a      	ldr	r3, [pc, #168]	; (8008430 <__sflush_r+0x110>)
 8008386:	410b      	asrs	r3, r1
 8008388:	07db      	lsls	r3, r3, #31
 800838a:	d428      	bmi.n	80083de <__sflush_r+0xbe>
 800838c:	2300      	movs	r3, #0
 800838e:	6063      	str	r3, [r4, #4]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	04d2      	lsls	r2, r2, #19
 8008396:	d505      	bpl.n	80083a4 <__sflush_r+0x84>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <__sflush_r+0x82>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d100      	bne.n	80083a4 <__sflush_r+0x84>
 80083a2:	6560      	str	r0, [r4, #84]	; 0x54
 80083a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083a6:	602e      	str	r6, [r5, #0]
 80083a8:	2900      	cmp	r1, #0
 80083aa:	d0c5      	beq.n	8008338 <__sflush_r+0x18>
 80083ac:	0023      	movs	r3, r4
 80083ae:	3344      	adds	r3, #68	; 0x44
 80083b0:	4299      	cmp	r1, r3
 80083b2:	d002      	beq.n	80083ba <__sflush_r+0x9a>
 80083b4:	0028      	movs	r0, r5
 80083b6:	f7ff f9af 	bl	8007718 <_free_r>
 80083ba:	2000      	movs	r0, #0
 80083bc:	6360      	str	r0, [r4, #52]	; 0x34
 80083be:	e7bc      	b.n	800833a <__sflush_r+0x1a>
 80083c0:	2301      	movs	r3, #1
 80083c2:	0028      	movs	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	d1c6      	bne.n	8008358 <__sflush_r+0x38>
 80083ca:	682b      	ldr	r3, [r5, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0c3      	beq.n	8008358 <__sflush_r+0x38>
 80083d0:	2b1d      	cmp	r3, #29
 80083d2:	d001      	beq.n	80083d8 <__sflush_r+0xb8>
 80083d4:	2b16      	cmp	r3, #22
 80083d6:	d101      	bne.n	80083dc <__sflush_r+0xbc>
 80083d8:	602e      	str	r6, [r5, #0]
 80083da:	e7ad      	b.n	8008338 <__sflush_r+0x18>
 80083dc:	89a2      	ldrh	r2, [r4, #12]
 80083de:	2340      	movs	r3, #64	; 0x40
 80083e0:	4313      	orrs	r3, r2
 80083e2:	81a3      	strh	r3, [r4, #12]
 80083e4:	e7a9      	b.n	800833a <__sflush_r+0x1a>
 80083e6:	690e      	ldr	r6, [r1, #16]
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	d0a5      	beq.n	8008338 <__sflush_r+0x18>
 80083ec:	680f      	ldr	r7, [r1, #0]
 80083ee:	600e      	str	r6, [r1, #0]
 80083f0:	1bba      	subs	r2, r7, r6
 80083f2:	9201      	str	r2, [sp, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	079b      	lsls	r3, r3, #30
 80083f8:	d100      	bne.n	80083fc <__sflush_r+0xdc>
 80083fa:	694a      	ldr	r2, [r1, #20]
 80083fc:	60a2      	str	r2, [r4, #8]
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	dd99      	ble.n	8008338 <__sflush_r+0x18>
 8008404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008406:	0032      	movs	r2, r6
 8008408:	001f      	movs	r7, r3
 800840a:	0028      	movs	r0, r5
 800840c:	9b01      	ldr	r3, [sp, #4]
 800840e:	6a21      	ldr	r1, [r4, #32]
 8008410:	47b8      	blx	r7
 8008412:	2800      	cmp	r0, #0
 8008414:	dc06      	bgt.n	8008424 <__sflush_r+0x104>
 8008416:	2340      	movs	r3, #64	; 0x40
 8008418:	2001      	movs	r0, #1
 800841a:	89a2      	ldrh	r2, [r4, #12]
 800841c:	4240      	negs	r0, r0
 800841e:	4313      	orrs	r3, r2
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	e78a      	b.n	800833a <__sflush_r+0x1a>
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	1836      	adds	r6, r6, r0
 8008428:	1a1b      	subs	r3, r3, r0
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	e7e7      	b.n	80083fe <__sflush_r+0xde>
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	dfbffffe 	.word	0xdfbffffe

08008434 <_fflush_r>:
 8008434:	690b      	ldr	r3, [r1, #16]
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	0005      	movs	r5, r0
 800843a:	000c      	movs	r4, r1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <_fflush_r+0x12>
 8008440:	2500      	movs	r5, #0
 8008442:	0028      	movs	r0, r5
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	2800      	cmp	r0, #0
 8008448:	d004      	beq.n	8008454 <_fflush_r+0x20>
 800844a:	6a03      	ldr	r3, [r0, #32]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <_fflush_r+0x20>
 8008450:	f7fe f992 	bl	8006778 <__sinit>
 8008454:	220c      	movs	r2, #12
 8008456:	5ea3      	ldrsh	r3, [r4, r2]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f1      	beq.n	8008440 <_fflush_r+0xc>
 800845c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800845e:	07d2      	lsls	r2, r2, #31
 8008460:	d404      	bmi.n	800846c <_fflush_r+0x38>
 8008462:	059b      	lsls	r3, r3, #22
 8008464:	d402      	bmi.n	800846c <_fflush_r+0x38>
 8008466:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008468:	f7fe faab 	bl	80069c2 <__retarget_lock_acquire_recursive>
 800846c:	0028      	movs	r0, r5
 800846e:	0021      	movs	r1, r4
 8008470:	f7ff ff56 	bl	8008320 <__sflush_r>
 8008474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008476:	0005      	movs	r5, r0
 8008478:	07db      	lsls	r3, r3, #31
 800847a:	d4e2      	bmi.n	8008442 <_fflush_r+0xe>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	059b      	lsls	r3, r3, #22
 8008480:	d4df      	bmi.n	8008442 <_fflush_r+0xe>
 8008482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008484:	f7fe fa9e 	bl	80069c4 <__retarget_lock_release_recursive>
 8008488:	e7db      	b.n	8008442 <_fflush_r+0xe>

0800848a <memmove>:
 800848a:	b510      	push	{r4, lr}
 800848c:	4288      	cmp	r0, r1
 800848e:	d902      	bls.n	8008496 <memmove+0xc>
 8008490:	188b      	adds	r3, r1, r2
 8008492:	4298      	cmp	r0, r3
 8008494:	d303      	bcc.n	800849e <memmove+0x14>
 8008496:	2300      	movs	r3, #0
 8008498:	e007      	b.n	80084aa <memmove+0x20>
 800849a:	5c8b      	ldrb	r3, [r1, r2]
 800849c:	5483      	strb	r3, [r0, r2]
 800849e:	3a01      	subs	r2, #1
 80084a0:	d2fb      	bcs.n	800849a <memmove+0x10>
 80084a2:	bd10      	pop	{r4, pc}
 80084a4:	5ccc      	ldrb	r4, [r1, r3]
 80084a6:	54c4      	strb	r4, [r0, r3]
 80084a8:	3301      	adds	r3, #1
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d1fa      	bne.n	80084a4 <memmove+0x1a>
 80084ae:	e7f8      	b.n	80084a2 <memmove+0x18>

080084b0 <_sbrk_r>:
 80084b0:	2300      	movs	r3, #0
 80084b2:	b570      	push	{r4, r5, r6, lr}
 80084b4:	4d06      	ldr	r5, [pc, #24]	; (80084d0 <_sbrk_r+0x20>)
 80084b6:	0004      	movs	r4, r0
 80084b8:	0008      	movs	r0, r1
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7fb fed4 	bl	8004268 <_sbrk>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d103      	bne.n	80084cc <_sbrk_r+0x1c>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d000      	beq.n	80084cc <_sbrk_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	20000704 	.word	0x20000704

080084d4 <memcpy>:
 80084d4:	2300      	movs	r3, #0
 80084d6:	b510      	push	{r4, lr}
 80084d8:	429a      	cmp	r2, r3
 80084da:	d100      	bne.n	80084de <memcpy+0xa>
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	5ccc      	ldrb	r4, [r1, r3]
 80084e0:	54c4      	strb	r4, [r0, r3]
 80084e2:	3301      	adds	r3, #1
 80084e4:	e7f8      	b.n	80084d8 <memcpy+0x4>
	...

080084e8 <__assert_func>:
 80084e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80084ea:	0014      	movs	r4, r2
 80084ec:	001a      	movs	r2, r3
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <__assert_func+0x2c>)
 80084f0:	0005      	movs	r5, r0
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	000e      	movs	r6, r1
 80084f6:	68d8      	ldr	r0, [r3, #12]
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <__assert_func+0x30>)
 80084fa:	2c00      	cmp	r4, #0
 80084fc:	d101      	bne.n	8008502 <__assert_func+0x1a>
 80084fe:	4b07      	ldr	r3, [pc, #28]	; (800851c <__assert_func+0x34>)
 8008500:	001c      	movs	r4, r3
 8008502:	4907      	ldr	r1, [pc, #28]	; (8008520 <__assert_func+0x38>)
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	9402      	str	r4, [sp, #8]
 8008508:	002b      	movs	r3, r5
 800850a:	9600      	str	r6, [sp, #0]
 800850c:	f000 f886 	bl	800861c <fiprintf>
 8008510:	f000 f894 	bl	800863c <abort>
 8008514:	200001bc 	.word	0x200001bc
 8008518:	08008f3f 	.word	0x08008f3f
 800851c:	08008f7a 	.word	0x08008f7a
 8008520:	08008f4c 	.word	0x08008f4c

08008524 <_calloc_r>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	0c0b      	lsrs	r3, r1, #16
 8008528:	0c15      	lsrs	r5, r2, #16
 800852a:	2b00      	cmp	r3, #0
 800852c:	d11e      	bne.n	800856c <_calloc_r+0x48>
 800852e:	2d00      	cmp	r5, #0
 8008530:	d10c      	bne.n	800854c <_calloc_r+0x28>
 8008532:	b289      	uxth	r1, r1
 8008534:	b294      	uxth	r4, r2
 8008536:	434c      	muls	r4, r1
 8008538:	0021      	movs	r1, r4
 800853a:	f7ff f963 	bl	8007804 <_malloc_r>
 800853e:	1e05      	subs	r5, r0, #0
 8008540:	d01b      	beq.n	800857a <_calloc_r+0x56>
 8008542:	0022      	movs	r2, r4
 8008544:	2100      	movs	r1, #0
 8008546:	f7fe f9b7 	bl	80068b8 <memset>
 800854a:	e016      	b.n	800857a <_calloc_r+0x56>
 800854c:	1c2b      	adds	r3, r5, #0
 800854e:	1c0c      	adds	r4, r1, #0
 8008550:	b289      	uxth	r1, r1
 8008552:	b292      	uxth	r2, r2
 8008554:	434a      	muls	r2, r1
 8008556:	b2a1      	uxth	r1, r4
 8008558:	b29c      	uxth	r4, r3
 800855a:	434c      	muls	r4, r1
 800855c:	0c13      	lsrs	r3, r2, #16
 800855e:	18e4      	adds	r4, r4, r3
 8008560:	0c23      	lsrs	r3, r4, #16
 8008562:	d107      	bne.n	8008574 <_calloc_r+0x50>
 8008564:	0424      	lsls	r4, r4, #16
 8008566:	b292      	uxth	r2, r2
 8008568:	4314      	orrs	r4, r2
 800856a:	e7e5      	b.n	8008538 <_calloc_r+0x14>
 800856c:	2d00      	cmp	r5, #0
 800856e:	d101      	bne.n	8008574 <_calloc_r+0x50>
 8008570:	1c14      	adds	r4, r2, #0
 8008572:	e7ed      	b.n	8008550 <_calloc_r+0x2c>
 8008574:	230c      	movs	r3, #12
 8008576:	2500      	movs	r5, #0
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	0028      	movs	r0, r5
 800857c:	bd70      	pop	{r4, r5, r6, pc}

0800857e <__ascii_mbtowc>:
 800857e:	b082      	sub	sp, #8
 8008580:	2900      	cmp	r1, #0
 8008582:	d100      	bne.n	8008586 <__ascii_mbtowc+0x8>
 8008584:	a901      	add	r1, sp, #4
 8008586:	1e10      	subs	r0, r2, #0
 8008588:	d006      	beq.n	8008598 <__ascii_mbtowc+0x1a>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d006      	beq.n	800859c <__ascii_mbtowc+0x1e>
 800858e:	7813      	ldrb	r3, [r2, #0]
 8008590:	600b      	str	r3, [r1, #0]
 8008592:	7810      	ldrb	r0, [r2, #0]
 8008594:	1e43      	subs	r3, r0, #1
 8008596:	4198      	sbcs	r0, r3
 8008598:	b002      	add	sp, #8
 800859a:	4770      	bx	lr
 800859c:	2002      	movs	r0, #2
 800859e:	4240      	negs	r0, r0
 80085a0:	e7fa      	b.n	8008598 <__ascii_mbtowc+0x1a>

080085a2 <_realloc_r>:
 80085a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085a4:	0007      	movs	r7, r0
 80085a6:	000e      	movs	r6, r1
 80085a8:	0014      	movs	r4, r2
 80085aa:	2900      	cmp	r1, #0
 80085ac:	d105      	bne.n	80085ba <_realloc_r+0x18>
 80085ae:	0011      	movs	r1, r2
 80085b0:	f7ff f928 	bl	8007804 <_malloc_r>
 80085b4:	0005      	movs	r5, r0
 80085b6:	0028      	movs	r0, r5
 80085b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	d103      	bne.n	80085c6 <_realloc_r+0x24>
 80085be:	f7ff f8ab 	bl	8007718 <_free_r>
 80085c2:	0025      	movs	r5, r4
 80085c4:	e7f7      	b.n	80085b6 <_realloc_r+0x14>
 80085c6:	f000 f840 	bl	800864a <_malloc_usable_size_r>
 80085ca:	9001      	str	r0, [sp, #4]
 80085cc:	4284      	cmp	r4, r0
 80085ce:	d803      	bhi.n	80085d8 <_realloc_r+0x36>
 80085d0:	0035      	movs	r5, r6
 80085d2:	0843      	lsrs	r3, r0, #1
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	d3ee      	bcc.n	80085b6 <_realloc_r+0x14>
 80085d8:	0021      	movs	r1, r4
 80085da:	0038      	movs	r0, r7
 80085dc:	f7ff f912 	bl	8007804 <_malloc_r>
 80085e0:	1e05      	subs	r5, r0, #0
 80085e2:	d0e8      	beq.n	80085b6 <_realloc_r+0x14>
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	0022      	movs	r2, r4
 80085e8:	429c      	cmp	r4, r3
 80085ea:	d900      	bls.n	80085ee <_realloc_r+0x4c>
 80085ec:	001a      	movs	r2, r3
 80085ee:	0031      	movs	r1, r6
 80085f0:	0028      	movs	r0, r5
 80085f2:	f7ff ff6f 	bl	80084d4 <memcpy>
 80085f6:	0031      	movs	r1, r6
 80085f8:	0038      	movs	r0, r7
 80085fa:	f7ff f88d 	bl	8007718 <_free_r>
 80085fe:	e7da      	b.n	80085b6 <_realloc_r+0x14>

08008600 <__ascii_wctomb>:
 8008600:	0003      	movs	r3, r0
 8008602:	1e08      	subs	r0, r1, #0
 8008604:	d005      	beq.n	8008612 <__ascii_wctomb+0x12>
 8008606:	2aff      	cmp	r2, #255	; 0xff
 8008608:	d904      	bls.n	8008614 <__ascii_wctomb+0x14>
 800860a:	228a      	movs	r2, #138	; 0x8a
 800860c:	2001      	movs	r0, #1
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	4240      	negs	r0, r0
 8008612:	4770      	bx	lr
 8008614:	2001      	movs	r0, #1
 8008616:	700a      	strb	r2, [r1, #0]
 8008618:	e7fb      	b.n	8008612 <__ascii_wctomb+0x12>
	...

0800861c <fiprintf>:
 800861c:	b40e      	push	{r1, r2, r3}
 800861e:	b517      	push	{r0, r1, r2, r4, lr}
 8008620:	4c05      	ldr	r4, [pc, #20]	; (8008638 <fiprintf+0x1c>)
 8008622:	ab05      	add	r3, sp, #20
 8008624:	cb04      	ldmia	r3!, {r2}
 8008626:	0001      	movs	r1, r0
 8008628:	6820      	ldr	r0, [r4, #0]
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	f000 f83c 	bl	80086a8 <_vfiprintf_r>
 8008630:	bc1e      	pop	{r1, r2, r3, r4}
 8008632:	bc08      	pop	{r3}
 8008634:	b003      	add	sp, #12
 8008636:	4718      	bx	r3
 8008638:	200001bc 	.word	0x200001bc

0800863c <abort>:
 800863c:	2006      	movs	r0, #6
 800863e:	b510      	push	{r4, lr}
 8008640:	f000 fa1e 	bl	8008a80 <raise>
 8008644:	2001      	movs	r0, #1
 8008646:	f7fb fd9d 	bl	8004184 <_exit>

0800864a <_malloc_usable_size_r>:
 800864a:	1f0b      	subs	r3, r1, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	1f18      	subs	r0, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	da01      	bge.n	8008658 <_malloc_usable_size_r+0xe>
 8008654:	580b      	ldr	r3, [r1, r0]
 8008656:	18c0      	adds	r0, r0, r3
 8008658:	4770      	bx	lr

0800865a <__sfputc_r>:
 800865a:	6893      	ldr	r3, [r2, #8]
 800865c:	b510      	push	{r4, lr}
 800865e:	3b01      	subs	r3, #1
 8008660:	6093      	str	r3, [r2, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	da04      	bge.n	8008670 <__sfputc_r+0x16>
 8008666:	6994      	ldr	r4, [r2, #24]
 8008668:	42a3      	cmp	r3, r4
 800866a:	db07      	blt.n	800867c <__sfputc_r+0x22>
 800866c:	290a      	cmp	r1, #10
 800866e:	d005      	beq.n	800867c <__sfputc_r+0x22>
 8008670:	6813      	ldr	r3, [r2, #0]
 8008672:	1c58      	adds	r0, r3, #1
 8008674:	6010      	str	r0, [r2, #0]
 8008676:	7019      	strb	r1, [r3, #0]
 8008678:	0008      	movs	r0, r1
 800867a:	bd10      	pop	{r4, pc}
 800867c:	f000 f930 	bl	80088e0 <__swbuf_r>
 8008680:	0001      	movs	r1, r0
 8008682:	e7f9      	b.n	8008678 <__sfputc_r+0x1e>

08008684 <__sfputs_r>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	0006      	movs	r6, r0
 8008688:	000f      	movs	r7, r1
 800868a:	0014      	movs	r4, r2
 800868c:	18d5      	adds	r5, r2, r3
 800868e:	42ac      	cmp	r4, r5
 8008690:	d101      	bne.n	8008696 <__sfputs_r+0x12>
 8008692:	2000      	movs	r0, #0
 8008694:	e007      	b.n	80086a6 <__sfputs_r+0x22>
 8008696:	7821      	ldrb	r1, [r4, #0]
 8008698:	003a      	movs	r2, r7
 800869a:	0030      	movs	r0, r6
 800869c:	f7ff ffdd 	bl	800865a <__sfputc_r>
 80086a0:	3401      	adds	r4, #1
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d1f3      	bne.n	800868e <__sfputs_r+0xa>
 80086a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086a8 <_vfiprintf_r>:
 80086a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086aa:	b0a1      	sub	sp, #132	; 0x84
 80086ac:	000f      	movs	r7, r1
 80086ae:	0015      	movs	r5, r2
 80086b0:	001e      	movs	r6, r3
 80086b2:	9003      	str	r0, [sp, #12]
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d004      	beq.n	80086c2 <_vfiprintf_r+0x1a>
 80086b8:	6a03      	ldr	r3, [r0, #32]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <_vfiprintf_r+0x1a>
 80086be:	f7fe f85b 	bl	8006778 <__sinit>
 80086c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086c4:	07db      	lsls	r3, r3, #31
 80086c6:	d405      	bmi.n	80086d4 <_vfiprintf_r+0x2c>
 80086c8:	89bb      	ldrh	r3, [r7, #12]
 80086ca:	059b      	lsls	r3, r3, #22
 80086cc:	d402      	bmi.n	80086d4 <_vfiprintf_r+0x2c>
 80086ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80086d0:	f7fe f977 	bl	80069c2 <__retarget_lock_acquire_recursive>
 80086d4:	89bb      	ldrh	r3, [r7, #12]
 80086d6:	071b      	lsls	r3, r3, #28
 80086d8:	d502      	bpl.n	80086e0 <_vfiprintf_r+0x38>
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d113      	bne.n	8008708 <_vfiprintf_r+0x60>
 80086e0:	0039      	movs	r1, r7
 80086e2:	9803      	ldr	r0, [sp, #12]
 80086e4:	f000 f93e 	bl	8008964 <__swsetup_r>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d00d      	beq.n	8008708 <_vfiprintf_r+0x60>
 80086ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ee:	07db      	lsls	r3, r3, #31
 80086f0:	d503      	bpl.n	80086fa <_vfiprintf_r+0x52>
 80086f2:	2001      	movs	r0, #1
 80086f4:	4240      	negs	r0, r0
 80086f6:	b021      	add	sp, #132	; 0x84
 80086f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fa:	89bb      	ldrh	r3, [r7, #12]
 80086fc:	059b      	lsls	r3, r3, #22
 80086fe:	d4f8      	bmi.n	80086f2 <_vfiprintf_r+0x4a>
 8008700:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008702:	f7fe f95f 	bl	80069c4 <__retarget_lock_release_recursive>
 8008706:	e7f4      	b.n	80086f2 <_vfiprintf_r+0x4a>
 8008708:	2300      	movs	r3, #0
 800870a:	ac08      	add	r4, sp, #32
 800870c:	6163      	str	r3, [r4, #20]
 800870e:	3320      	adds	r3, #32
 8008710:	7663      	strb	r3, [r4, #25]
 8008712:	3310      	adds	r3, #16
 8008714:	76a3      	strb	r3, [r4, #26]
 8008716:	9607      	str	r6, [sp, #28]
 8008718:	002e      	movs	r6, r5
 800871a:	7833      	ldrb	r3, [r6, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <_vfiprintf_r+0x7c>
 8008720:	2b25      	cmp	r3, #37	; 0x25
 8008722:	d148      	bne.n	80087b6 <_vfiprintf_r+0x10e>
 8008724:	1b73      	subs	r3, r6, r5
 8008726:	9305      	str	r3, [sp, #20]
 8008728:	42ae      	cmp	r6, r5
 800872a:	d00b      	beq.n	8008744 <_vfiprintf_r+0x9c>
 800872c:	002a      	movs	r2, r5
 800872e:	0039      	movs	r1, r7
 8008730:	9803      	ldr	r0, [sp, #12]
 8008732:	f7ff ffa7 	bl	8008684 <__sfputs_r>
 8008736:	3001      	adds	r0, #1
 8008738:	d100      	bne.n	800873c <_vfiprintf_r+0x94>
 800873a:	e0af      	b.n	800889c <_vfiprintf_r+0x1f4>
 800873c:	6963      	ldr	r3, [r4, #20]
 800873e:	9a05      	ldr	r2, [sp, #20]
 8008740:	189b      	adds	r3, r3, r2
 8008742:	6163      	str	r3, [r4, #20]
 8008744:	7833      	ldrb	r3, [r6, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d100      	bne.n	800874c <_vfiprintf_r+0xa4>
 800874a:	e0a7      	b.n	800889c <_vfiprintf_r+0x1f4>
 800874c:	2201      	movs	r2, #1
 800874e:	2300      	movs	r3, #0
 8008750:	4252      	negs	r2, r2
 8008752:	6062      	str	r2, [r4, #4]
 8008754:	a904      	add	r1, sp, #16
 8008756:	3254      	adds	r2, #84	; 0x54
 8008758:	1852      	adds	r2, r2, r1
 800875a:	1c75      	adds	r5, r6, #1
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	60e3      	str	r3, [r4, #12]
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	7013      	strb	r3, [r2, #0]
 8008764:	65a3      	str	r3, [r4, #88]	; 0x58
 8008766:	4b59      	ldr	r3, [pc, #356]	; (80088cc <_vfiprintf_r+0x224>)
 8008768:	2205      	movs	r2, #5
 800876a:	0018      	movs	r0, r3
 800876c:	7829      	ldrb	r1, [r5, #0]
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	f7fe f929 	bl	80069c6 <memchr>
 8008774:	1c6e      	adds	r6, r5, #1
 8008776:	2800      	cmp	r0, #0
 8008778:	d11f      	bne.n	80087ba <_vfiprintf_r+0x112>
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	06d3      	lsls	r3, r2, #27
 800877e:	d504      	bpl.n	800878a <_vfiprintf_r+0xe2>
 8008780:	2353      	movs	r3, #83	; 0x53
 8008782:	a904      	add	r1, sp, #16
 8008784:	185b      	adds	r3, r3, r1
 8008786:	2120      	movs	r1, #32
 8008788:	7019      	strb	r1, [r3, #0]
 800878a:	0713      	lsls	r3, r2, #28
 800878c:	d504      	bpl.n	8008798 <_vfiprintf_r+0xf0>
 800878e:	2353      	movs	r3, #83	; 0x53
 8008790:	a904      	add	r1, sp, #16
 8008792:	185b      	adds	r3, r3, r1
 8008794:	212b      	movs	r1, #43	; 0x2b
 8008796:	7019      	strb	r1, [r3, #0]
 8008798:	782b      	ldrb	r3, [r5, #0]
 800879a:	2b2a      	cmp	r3, #42	; 0x2a
 800879c:	d016      	beq.n	80087cc <_vfiprintf_r+0x124>
 800879e:	002e      	movs	r6, r5
 80087a0:	2100      	movs	r1, #0
 80087a2:	200a      	movs	r0, #10
 80087a4:	68e3      	ldr	r3, [r4, #12]
 80087a6:	7832      	ldrb	r2, [r6, #0]
 80087a8:	1c75      	adds	r5, r6, #1
 80087aa:	3a30      	subs	r2, #48	; 0x30
 80087ac:	2a09      	cmp	r2, #9
 80087ae:	d94e      	bls.n	800884e <_vfiprintf_r+0x1a6>
 80087b0:	2900      	cmp	r1, #0
 80087b2:	d111      	bne.n	80087d8 <_vfiprintf_r+0x130>
 80087b4:	e017      	b.n	80087e6 <_vfiprintf_r+0x13e>
 80087b6:	3601      	adds	r6, #1
 80087b8:	e7af      	b.n	800871a <_vfiprintf_r+0x72>
 80087ba:	9b05      	ldr	r3, [sp, #20]
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	1ac0      	subs	r0, r0, r3
 80087c0:	2301      	movs	r3, #1
 80087c2:	4083      	lsls	r3, r0
 80087c4:	4313      	orrs	r3, r2
 80087c6:	0035      	movs	r5, r6
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	e7cc      	b.n	8008766 <_vfiprintf_r+0xbe>
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	1d19      	adds	r1, r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	9107      	str	r1, [sp, #28]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	db01      	blt.n	80087dc <_vfiprintf_r+0x134>
 80087d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80087da:	e004      	b.n	80087e6 <_vfiprintf_r+0x13e>
 80087dc:	425b      	negs	r3, r3
 80087de:	60e3      	str	r3, [r4, #12]
 80087e0:	2302      	movs	r3, #2
 80087e2:	4313      	orrs	r3, r2
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	7833      	ldrb	r3, [r6, #0]
 80087e8:	2b2e      	cmp	r3, #46	; 0x2e
 80087ea:	d10a      	bne.n	8008802 <_vfiprintf_r+0x15a>
 80087ec:	7873      	ldrb	r3, [r6, #1]
 80087ee:	2b2a      	cmp	r3, #42	; 0x2a
 80087f0:	d135      	bne.n	800885e <_vfiprintf_r+0x1b6>
 80087f2:	9b07      	ldr	r3, [sp, #28]
 80087f4:	3602      	adds	r6, #2
 80087f6:	1d1a      	adds	r2, r3, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	9207      	str	r2, [sp, #28]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	db2b      	blt.n	8008858 <_vfiprintf_r+0x1b0>
 8008800:	9309      	str	r3, [sp, #36]	; 0x24
 8008802:	4d33      	ldr	r5, [pc, #204]	; (80088d0 <_vfiprintf_r+0x228>)
 8008804:	2203      	movs	r2, #3
 8008806:	0028      	movs	r0, r5
 8008808:	7831      	ldrb	r1, [r6, #0]
 800880a:	f7fe f8dc 	bl	80069c6 <memchr>
 800880e:	2800      	cmp	r0, #0
 8008810:	d006      	beq.n	8008820 <_vfiprintf_r+0x178>
 8008812:	2340      	movs	r3, #64	; 0x40
 8008814:	1b40      	subs	r0, r0, r5
 8008816:	4083      	lsls	r3, r0
 8008818:	6822      	ldr	r2, [r4, #0]
 800881a:	3601      	adds	r6, #1
 800881c:	4313      	orrs	r3, r2
 800881e:	6023      	str	r3, [r4, #0]
 8008820:	7831      	ldrb	r1, [r6, #0]
 8008822:	2206      	movs	r2, #6
 8008824:	482b      	ldr	r0, [pc, #172]	; (80088d4 <_vfiprintf_r+0x22c>)
 8008826:	1c75      	adds	r5, r6, #1
 8008828:	7621      	strb	r1, [r4, #24]
 800882a:	f7fe f8cc 	bl	80069c6 <memchr>
 800882e:	2800      	cmp	r0, #0
 8008830:	d043      	beq.n	80088ba <_vfiprintf_r+0x212>
 8008832:	4b29      	ldr	r3, [pc, #164]	; (80088d8 <_vfiprintf_r+0x230>)
 8008834:	2b00      	cmp	r3, #0
 8008836:	d125      	bne.n	8008884 <_vfiprintf_r+0x1dc>
 8008838:	2207      	movs	r2, #7
 800883a:	9b07      	ldr	r3, [sp, #28]
 800883c:	3307      	adds	r3, #7
 800883e:	4393      	bics	r3, r2
 8008840:	3308      	adds	r3, #8
 8008842:	9307      	str	r3, [sp, #28]
 8008844:	6963      	ldr	r3, [r4, #20]
 8008846:	9a04      	ldr	r2, [sp, #16]
 8008848:	189b      	adds	r3, r3, r2
 800884a:	6163      	str	r3, [r4, #20]
 800884c:	e764      	b.n	8008718 <_vfiprintf_r+0x70>
 800884e:	4343      	muls	r3, r0
 8008850:	002e      	movs	r6, r5
 8008852:	2101      	movs	r1, #1
 8008854:	189b      	adds	r3, r3, r2
 8008856:	e7a6      	b.n	80087a6 <_vfiprintf_r+0xfe>
 8008858:	2301      	movs	r3, #1
 800885a:	425b      	negs	r3, r3
 800885c:	e7d0      	b.n	8008800 <_vfiprintf_r+0x158>
 800885e:	2300      	movs	r3, #0
 8008860:	200a      	movs	r0, #10
 8008862:	001a      	movs	r2, r3
 8008864:	3601      	adds	r6, #1
 8008866:	6063      	str	r3, [r4, #4]
 8008868:	7831      	ldrb	r1, [r6, #0]
 800886a:	1c75      	adds	r5, r6, #1
 800886c:	3930      	subs	r1, #48	; 0x30
 800886e:	2909      	cmp	r1, #9
 8008870:	d903      	bls.n	800887a <_vfiprintf_r+0x1d2>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0c5      	beq.n	8008802 <_vfiprintf_r+0x15a>
 8008876:	9209      	str	r2, [sp, #36]	; 0x24
 8008878:	e7c3      	b.n	8008802 <_vfiprintf_r+0x15a>
 800887a:	4342      	muls	r2, r0
 800887c:	002e      	movs	r6, r5
 800887e:	2301      	movs	r3, #1
 8008880:	1852      	adds	r2, r2, r1
 8008882:	e7f1      	b.n	8008868 <_vfiprintf_r+0x1c0>
 8008884:	aa07      	add	r2, sp, #28
 8008886:	9200      	str	r2, [sp, #0]
 8008888:	0021      	movs	r1, r4
 800888a:	003a      	movs	r2, r7
 800888c:	4b13      	ldr	r3, [pc, #76]	; (80088dc <_vfiprintf_r+0x234>)
 800888e:	9803      	ldr	r0, [sp, #12]
 8008890:	f7fd fb0c 	bl	8005eac <_printf_float>
 8008894:	9004      	str	r0, [sp, #16]
 8008896:	9b04      	ldr	r3, [sp, #16]
 8008898:	3301      	adds	r3, #1
 800889a:	d1d3      	bne.n	8008844 <_vfiprintf_r+0x19c>
 800889c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800889e:	07db      	lsls	r3, r3, #31
 80088a0:	d405      	bmi.n	80088ae <_vfiprintf_r+0x206>
 80088a2:	89bb      	ldrh	r3, [r7, #12]
 80088a4:	059b      	lsls	r3, r3, #22
 80088a6:	d402      	bmi.n	80088ae <_vfiprintf_r+0x206>
 80088a8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80088aa:	f7fe f88b 	bl	80069c4 <__retarget_lock_release_recursive>
 80088ae:	89bb      	ldrh	r3, [r7, #12]
 80088b0:	065b      	lsls	r3, r3, #25
 80088b2:	d500      	bpl.n	80088b6 <_vfiprintf_r+0x20e>
 80088b4:	e71d      	b.n	80086f2 <_vfiprintf_r+0x4a>
 80088b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80088b8:	e71d      	b.n	80086f6 <_vfiprintf_r+0x4e>
 80088ba:	aa07      	add	r2, sp, #28
 80088bc:	9200      	str	r2, [sp, #0]
 80088be:	0021      	movs	r1, r4
 80088c0:	003a      	movs	r2, r7
 80088c2:	4b06      	ldr	r3, [pc, #24]	; (80088dc <_vfiprintf_r+0x234>)
 80088c4:	9803      	ldr	r0, [sp, #12]
 80088c6:	f7fd fdb7 	bl	8006438 <_printf_i>
 80088ca:	e7e3      	b.n	8008894 <_vfiprintf_r+0x1ec>
 80088cc:	08008f24 	.word	0x08008f24
 80088d0:	08008f2a 	.word	0x08008f2a
 80088d4:	08008f2e 	.word	0x08008f2e
 80088d8:	08005ead 	.word	0x08005ead
 80088dc:	08008685 	.word	0x08008685

080088e0 <__swbuf_r>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	0006      	movs	r6, r0
 80088e4:	000d      	movs	r5, r1
 80088e6:	0014      	movs	r4, r2
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d004      	beq.n	80088f6 <__swbuf_r+0x16>
 80088ec:	6a03      	ldr	r3, [r0, #32]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <__swbuf_r+0x16>
 80088f2:	f7fd ff41 	bl	8006778 <__sinit>
 80088f6:	69a3      	ldr	r3, [r4, #24]
 80088f8:	60a3      	str	r3, [r4, #8]
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	071b      	lsls	r3, r3, #28
 80088fe:	d528      	bpl.n	8008952 <__swbuf_r+0x72>
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d025      	beq.n	8008952 <__swbuf_r+0x72>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	6820      	ldr	r0, [r4, #0]
 800890a:	b2ef      	uxtb	r7, r5
 800890c:	1ac0      	subs	r0, r0, r3
 800890e:	6963      	ldr	r3, [r4, #20]
 8008910:	b2ed      	uxtb	r5, r5
 8008912:	4283      	cmp	r3, r0
 8008914:	dc05      	bgt.n	8008922 <__swbuf_r+0x42>
 8008916:	0021      	movs	r1, r4
 8008918:	0030      	movs	r0, r6
 800891a:	f7ff fd8b 	bl	8008434 <_fflush_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	d11d      	bne.n	800895e <__swbuf_r+0x7e>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	3001      	adds	r0, #1
 8008926:	3b01      	subs	r3, #1
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	701f      	strb	r7, [r3, #0]
 8008932:	6963      	ldr	r3, [r4, #20]
 8008934:	4283      	cmp	r3, r0
 8008936:	d004      	beq.n	8008942 <__swbuf_r+0x62>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	07db      	lsls	r3, r3, #31
 800893c:	d507      	bpl.n	800894e <__swbuf_r+0x6e>
 800893e:	2d0a      	cmp	r5, #10
 8008940:	d105      	bne.n	800894e <__swbuf_r+0x6e>
 8008942:	0021      	movs	r1, r4
 8008944:	0030      	movs	r0, r6
 8008946:	f7ff fd75 	bl	8008434 <_fflush_r>
 800894a:	2800      	cmp	r0, #0
 800894c:	d107      	bne.n	800895e <__swbuf_r+0x7e>
 800894e:	0028      	movs	r0, r5
 8008950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008952:	0021      	movs	r1, r4
 8008954:	0030      	movs	r0, r6
 8008956:	f000 f805 	bl	8008964 <__swsetup_r>
 800895a:	2800      	cmp	r0, #0
 800895c:	d0d3      	beq.n	8008906 <__swbuf_r+0x26>
 800895e:	2501      	movs	r5, #1
 8008960:	426d      	negs	r5, r5
 8008962:	e7f4      	b.n	800894e <__swbuf_r+0x6e>

08008964 <__swsetup_r>:
 8008964:	4b30      	ldr	r3, [pc, #192]	; (8008a28 <__swsetup_r+0xc4>)
 8008966:	b570      	push	{r4, r5, r6, lr}
 8008968:	0005      	movs	r5, r0
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	000c      	movs	r4, r1
 800896e:	2800      	cmp	r0, #0
 8008970:	d004      	beq.n	800897c <__swsetup_r+0x18>
 8008972:	6a03      	ldr	r3, [r0, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <__swsetup_r+0x18>
 8008978:	f7fd fefe 	bl	8006778 <__sinit>
 800897c:	230c      	movs	r3, #12
 800897e:	5ee2      	ldrsh	r2, [r4, r3]
 8008980:	b293      	uxth	r3, r2
 8008982:	0711      	lsls	r1, r2, #28
 8008984:	d423      	bmi.n	80089ce <__swsetup_r+0x6a>
 8008986:	06d9      	lsls	r1, r3, #27
 8008988:	d407      	bmi.n	800899a <__swsetup_r+0x36>
 800898a:	2309      	movs	r3, #9
 800898c:	2001      	movs	r0, #1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	3337      	adds	r3, #55	; 0x37
 8008992:	4313      	orrs	r3, r2
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	4240      	negs	r0, r0
 8008998:	bd70      	pop	{r4, r5, r6, pc}
 800899a:	075b      	lsls	r3, r3, #29
 800899c:	d513      	bpl.n	80089c6 <__swsetup_r+0x62>
 800899e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a0:	2900      	cmp	r1, #0
 80089a2:	d008      	beq.n	80089b6 <__swsetup_r+0x52>
 80089a4:	0023      	movs	r3, r4
 80089a6:	3344      	adds	r3, #68	; 0x44
 80089a8:	4299      	cmp	r1, r3
 80089aa:	d002      	beq.n	80089b2 <__swsetup_r+0x4e>
 80089ac:	0028      	movs	r0, r5
 80089ae:	f7fe feb3 	bl	8007718 <_free_r>
 80089b2:	2300      	movs	r3, #0
 80089b4:	6363      	str	r3, [r4, #52]	; 0x34
 80089b6:	2224      	movs	r2, #36	; 0x24
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	4393      	bics	r3, r2
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	2300      	movs	r3, #0
 80089c0:	6063      	str	r3, [r4, #4]
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	2308      	movs	r3, #8
 80089c8:	89a2      	ldrh	r2, [r4, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <__swsetup_r+0x88>
 80089d4:	21a0      	movs	r1, #160	; 0xa0
 80089d6:	2280      	movs	r2, #128	; 0x80
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	0089      	lsls	r1, r1, #2
 80089dc:	0092      	lsls	r2, r2, #2
 80089de:	400b      	ands	r3, r1
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d003      	beq.n	80089ec <__swsetup_r+0x88>
 80089e4:	0021      	movs	r1, r4
 80089e6:	0028      	movs	r0, r5
 80089e8:	f000 f892 	bl	8008b10 <__smakebuf_r>
 80089ec:	220c      	movs	r2, #12
 80089ee:	5ea3      	ldrsh	r3, [r4, r2]
 80089f0:	2001      	movs	r0, #1
 80089f2:	001a      	movs	r2, r3
 80089f4:	b299      	uxth	r1, r3
 80089f6:	4002      	ands	r2, r0
 80089f8:	4203      	tst	r3, r0
 80089fa:	d00f      	beq.n	8008a1c <__swsetup_r+0xb8>
 80089fc:	2200      	movs	r2, #0
 80089fe:	60a2      	str	r2, [r4, #8]
 8008a00:	6962      	ldr	r2, [r4, #20]
 8008a02:	4252      	negs	r2, r2
 8008a04:	61a2      	str	r2, [r4, #24]
 8008a06:	2000      	movs	r0, #0
 8008a08:	6922      	ldr	r2, [r4, #16]
 8008a0a:	4282      	cmp	r2, r0
 8008a0c:	d1c4      	bne.n	8008998 <__swsetup_r+0x34>
 8008a0e:	0609      	lsls	r1, r1, #24
 8008a10:	d5c2      	bpl.n	8008998 <__swsetup_r+0x34>
 8008a12:	2240      	movs	r2, #64	; 0x40
 8008a14:	4313      	orrs	r3, r2
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	3801      	subs	r0, #1
 8008a1a:	e7bd      	b.n	8008998 <__swsetup_r+0x34>
 8008a1c:	0788      	lsls	r0, r1, #30
 8008a1e:	d400      	bmi.n	8008a22 <__swsetup_r+0xbe>
 8008a20:	6962      	ldr	r2, [r4, #20]
 8008a22:	60a2      	str	r2, [r4, #8]
 8008a24:	e7ef      	b.n	8008a06 <__swsetup_r+0xa2>
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	200001bc 	.word	0x200001bc

08008a2c <_raise_r>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	0004      	movs	r4, r0
 8008a30:	000d      	movs	r5, r1
 8008a32:	291f      	cmp	r1, #31
 8008a34:	d904      	bls.n	8008a40 <_raise_r+0x14>
 8008a36:	2316      	movs	r3, #22
 8008a38:	6003      	str	r3, [r0, #0]
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	4240      	negs	r0, r0
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <_raise_r+0x24>
 8008a46:	008a      	lsls	r2, r1, #2
 8008a48:	189b      	adds	r3, r3, r2
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	d108      	bne.n	8008a62 <_raise_r+0x36>
 8008a50:	0020      	movs	r0, r4
 8008a52:	f000 f831 	bl	8008ab8 <_getpid_r>
 8008a56:	002a      	movs	r2, r5
 8008a58:	0001      	movs	r1, r0
 8008a5a:	0020      	movs	r0, r4
 8008a5c:	f000 f81a 	bl	8008a94 <_kill_r>
 8008a60:	e7ed      	b.n	8008a3e <_raise_r+0x12>
 8008a62:	2000      	movs	r0, #0
 8008a64:	2a01      	cmp	r2, #1
 8008a66:	d0ea      	beq.n	8008a3e <_raise_r+0x12>
 8008a68:	1c51      	adds	r1, r2, #1
 8008a6a:	d103      	bne.n	8008a74 <_raise_r+0x48>
 8008a6c:	2316      	movs	r3, #22
 8008a6e:	3001      	adds	r0, #1
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	e7e4      	b.n	8008a3e <_raise_r+0x12>
 8008a74:	2400      	movs	r4, #0
 8008a76:	0028      	movs	r0, r5
 8008a78:	601c      	str	r4, [r3, #0]
 8008a7a:	4790      	blx	r2
 8008a7c:	0020      	movs	r0, r4
 8008a7e:	e7de      	b.n	8008a3e <_raise_r+0x12>

08008a80 <raise>:
 8008a80:	b510      	push	{r4, lr}
 8008a82:	4b03      	ldr	r3, [pc, #12]	; (8008a90 <raise+0x10>)
 8008a84:	0001      	movs	r1, r0
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	f7ff ffd0 	bl	8008a2c <_raise_r>
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	46c0      	nop			; (mov r8, r8)
 8008a90:	200001bc 	.word	0x200001bc

08008a94 <_kill_r>:
 8008a94:	2300      	movs	r3, #0
 8008a96:	b570      	push	{r4, r5, r6, lr}
 8008a98:	4d06      	ldr	r5, [pc, #24]	; (8008ab4 <_kill_r+0x20>)
 8008a9a:	0004      	movs	r4, r0
 8008a9c:	0008      	movs	r0, r1
 8008a9e:	0011      	movs	r1, r2
 8008aa0:	602b      	str	r3, [r5, #0]
 8008aa2:	f7fb fb5f 	bl	8004164 <_kill>
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	d103      	bne.n	8008ab2 <_kill_r+0x1e>
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d000      	beq.n	8008ab2 <_kill_r+0x1e>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	20000704 	.word	0x20000704

08008ab8 <_getpid_r>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	f7fb fb4d 	bl	8004158 <_getpid>
 8008abe:	bd10      	pop	{r4, pc}

08008ac0 <__swhatbuf_r>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	000e      	movs	r6, r1
 8008ac4:	001d      	movs	r5, r3
 8008ac6:	230e      	movs	r3, #14
 8008ac8:	5ec9      	ldrsh	r1, [r1, r3]
 8008aca:	0014      	movs	r4, r2
 8008acc:	b096      	sub	sp, #88	; 0x58
 8008ace:	2900      	cmp	r1, #0
 8008ad0:	da0c      	bge.n	8008aec <__swhatbuf_r+0x2c>
 8008ad2:	89b2      	ldrh	r2, [r6, #12]
 8008ad4:	2380      	movs	r3, #128	; 0x80
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	4019      	ands	r1, r3
 8008ada:	421a      	tst	r2, r3
 8008adc:	d013      	beq.n	8008b06 <__swhatbuf_r+0x46>
 8008ade:	2100      	movs	r1, #0
 8008ae0:	3b40      	subs	r3, #64	; 0x40
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	6029      	str	r1, [r5, #0]
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	b016      	add	sp, #88	; 0x58
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	466a      	mov	r2, sp
 8008aee:	f000 f84d 	bl	8008b8c <_fstat_r>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	dbed      	blt.n	8008ad2 <__swhatbuf_r+0x12>
 8008af6:	23f0      	movs	r3, #240	; 0xf0
 8008af8:	9901      	ldr	r1, [sp, #4]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	4019      	ands	r1, r3
 8008afe:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <__swhatbuf_r+0x4c>)
 8008b00:	18c9      	adds	r1, r1, r3
 8008b02:	424b      	negs	r3, r1
 8008b04:	4159      	adcs	r1, r3
 8008b06:	2380      	movs	r3, #128	; 0x80
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	e7ea      	b.n	8008ae2 <__swhatbuf_r+0x22>
 8008b0c:	ffffe000 	.word	0xffffe000

08008b10 <__smakebuf_r>:
 8008b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b12:	2602      	movs	r6, #2
 8008b14:	898b      	ldrh	r3, [r1, #12]
 8008b16:	0005      	movs	r5, r0
 8008b18:	000c      	movs	r4, r1
 8008b1a:	4233      	tst	r3, r6
 8008b1c:	d006      	beq.n	8008b2c <__smakebuf_r+0x1c>
 8008b1e:	0023      	movs	r3, r4
 8008b20:	3347      	adds	r3, #71	; 0x47
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	2301      	movs	r3, #1
 8008b28:	6163      	str	r3, [r4, #20]
 8008b2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008b2c:	466a      	mov	r2, sp
 8008b2e:	ab01      	add	r3, sp, #4
 8008b30:	f7ff ffc6 	bl	8008ac0 <__swhatbuf_r>
 8008b34:	9900      	ldr	r1, [sp, #0]
 8008b36:	0007      	movs	r7, r0
 8008b38:	0028      	movs	r0, r5
 8008b3a:	f7fe fe63 	bl	8007804 <_malloc_r>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d108      	bne.n	8008b54 <__smakebuf_r+0x44>
 8008b42:	220c      	movs	r2, #12
 8008b44:	5ea3      	ldrsh	r3, [r4, r2]
 8008b46:	059a      	lsls	r2, r3, #22
 8008b48:	d4ef      	bmi.n	8008b2a <__smakebuf_r+0x1a>
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	4393      	bics	r3, r2
 8008b4e:	431e      	orrs	r6, r3
 8008b50:	81a6      	strh	r6, [r4, #12]
 8008b52:	e7e4      	b.n	8008b1e <__smakebuf_r+0xe>
 8008b54:	2380      	movs	r3, #128	; 0x80
 8008b56:	89a2      	ldrh	r2, [r4, #12]
 8008b58:	6020      	str	r0, [r4, #0]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	9b00      	ldr	r3, [sp, #0]
 8008b60:	6120      	str	r0, [r4, #16]
 8008b62:	6163      	str	r3, [r4, #20]
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00c      	beq.n	8008b84 <__smakebuf_r+0x74>
 8008b6a:	0028      	movs	r0, r5
 8008b6c:	230e      	movs	r3, #14
 8008b6e:	5ee1      	ldrsh	r1, [r4, r3]
 8008b70:	f000 f81e 	bl	8008bb0 <_isatty_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d005      	beq.n	8008b84 <__smakebuf_r+0x74>
 8008b78:	2303      	movs	r3, #3
 8008b7a:	89a2      	ldrh	r2, [r4, #12]
 8008b7c:	439a      	bics	r2, r3
 8008b7e:	3b02      	subs	r3, #2
 8008b80:	4313      	orrs	r3, r2
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	433b      	orrs	r3, r7
 8008b88:	81a3      	strh	r3, [r4, #12]
 8008b8a:	e7ce      	b.n	8008b2a <__smakebuf_r+0x1a>

08008b8c <_fstat_r>:
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	b570      	push	{r4, r5, r6, lr}
 8008b90:	4d06      	ldr	r5, [pc, #24]	; (8008bac <_fstat_r+0x20>)
 8008b92:	0004      	movs	r4, r0
 8008b94:	0008      	movs	r0, r1
 8008b96:	0011      	movs	r1, r2
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	f7fb fb42 	bl	8004222 <_fstat>
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	d103      	bne.n	8008baa <_fstat_r+0x1e>
 8008ba2:	682b      	ldr	r3, [r5, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d000      	beq.n	8008baa <_fstat_r+0x1e>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	20000704 	.word	0x20000704

08008bb0 <_isatty_r>:
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	b570      	push	{r4, r5, r6, lr}
 8008bb4:	4d06      	ldr	r5, [pc, #24]	; (8008bd0 <_isatty_r+0x20>)
 8008bb6:	0004      	movs	r4, r0
 8008bb8:	0008      	movs	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7fb fb3f 	bl	800423e <_isatty>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d103      	bne.n	8008bcc <_isatty_r+0x1c>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d000      	beq.n	8008bcc <_isatty_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	20000704 	.word	0x20000704

08008bd4 <_init>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	46c0      	nop			; (mov r8, r8)
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr

08008be0 <_fini>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr
